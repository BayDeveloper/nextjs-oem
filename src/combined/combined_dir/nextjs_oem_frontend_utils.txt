
-- /nextjs_oem_frontend/utils/cookies.ts --
'use client'

export async function waitForSessionCookie(timeout = 1000): Promise<boolean> {
  let waited = 0
  while (!document.cookie.includes('sessionid') && waited < timeout) {
    await new Promise((res) => setTimeout(res, 50))
    waited += 50
  }
  return document.cookie.includes('sessionid')
}


----------------------------------------


-- /nextjs_oem_frontend/utils/useRecentlyReauthenticated.ts --
import { useAuth } from '../auth/AuthContext'

export function useRecentlyReauthenticated(): boolean {
  const { user, methods, lastReauthenticatedAt } = useAuth()

  // ✅ Bypass reauth kalau user memang tidak punya password
  if (user && user.has_usable_password === false) {
    return true
  }

  const FIVE_MINUTES = 5 * 60 * 1000
  const reauthenticated = methods?.some(m => m.reauthenticated) || false

  if (reauthenticated) return true
  if (!lastReauthenticatedAt) return false

  return Date.now() - new Date(lastReauthenticatedAt).getTime() < FIVE_MINUTES
}


----------------------------------------


-- /nextjs_oem_frontend/utils/isConfigReady.ts --
import { ConfigType } from '../lib/allauth'

export function isConfigReady(config: ConfigType | null | undefined): boolean {
  return !!(
    config &&
    typeof config === 'object' &&
    Object.keys(config).length > 0 &&
    config.account?.authentication_method
  )
}


----------------------------------------


-- /nextjs_oem_frontend/utils/reauth.ts --
// utils/reauth.ts
import { useAuth } from "../auth/AuthContext"

export function useRecentlyReauthenticated(): boolean {
  const { user, methods, lastReauthenticatedAt } = useAuth()

  // ✅ Bypass reauth kalau user memang tidak punya password
  if (user && user.has_usable_password === false) {
    return true
  }

  const FIVE_MINUTES = 5 * 60 * 1000
  const reauthenticated = methods?.some((m) => m.reauthenticated) || false

  if (reauthenticated) return true
  if (!lastReauthenticatedAt) return false

  return Date.now() - new Date(lastReauthenticatedAt).getTime() < FIVE_MINUTES
}



----------------------------------------


-- /nextjs_oem_frontend/utils/upload.ts --
// utils/upload.ts
import { request } from "../lib/allauth"

export async function uploadImage(file: File): Promise<string> {
  const formData = new FormData()
  formData.append("file", file)

  const data = await request<{ url: string }>(
    "POST",
    "/blog/uploads/image/",
    formData
  )

  return data.url
}


----------------------------------------

