
-- /nextjs_oem_frontend/app/page.module.css --
.page {
  --gray-rgb: 0, 0, 0;
  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);

  --button-primary-hover: #383838;
  --button-secondary-hover: #f2f2f2;

  display: grid;
  grid-template-rows: 20px 1fr 20px;
  align-items: center;
  justify-items: center;
  min-height: 100svh;
  padding: 80px;
  gap: 64px;
  font-family: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  .page {
    --gray-rgb: 255, 255, 255;
    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);

    --button-primary-hover: #ccc;
    --button-secondary-hover: #1a1a1a;
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 32px;
  grid-row-start: 2;
}

.main ol {
  font-family: var(--font-geist-mono);
  padding-left: 0;
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: -0.01em;
  list-style-position: inside;
}

.main li:not(:last-of-type) {
  margin-bottom: 8px;
}

.main code {
  font-family: inherit;
  background: var(--gray-alpha-100);
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
}

.ctas {
  display: flex;
  gap: 16px;
}

.ctas a {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  border: 1px solid transparent;
  transition:
    background 0.2s,
    color 0.2s,
    border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
}

a.primary {
  background: var(--foreground);
  color: var(--background);
  gap: 8px;
}

a.secondary {
  border-color: var(--gray-alpha-200);
  min-width: 158px;
}

.footer {
  grid-row-start: 3;
  display: flex;
  gap: 24px;
}

.footer a {
  display: flex;
  align-items: center;
  gap: 8px;
}

.footer img {
  flex-shrink: 0;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  a.primary:hover {
    background: var(--button-primary-hover);
    border-color: transparent;
  }

  a.secondary:hover {
    background: var(--button-secondary-hover);
    border-color: transparent;
  }

  .footer a:hover {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
}

@media (max-width: 600px) {
  .page {
    padding: 32px;
    padding-bottom: 80px;
  }

  .main {
    align-items: center;
  }

  .main ol {
    text-align: center;
  }

  .ctas {
    flex-direction: column;
  }

  .ctas a {
    font-size: 14px;
    height: 40px;
    padding: 0 16px;
  }

  a.secondary {
    min-width: auto;
  }

  .footer {
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
}

@media (prefers-color-scheme: dark) {
  .logo {
    filter: invert();
  }
}


----------------------------------------


-- /nextjs_oem_frontend/app/page.tsx --
// src/app/page.tsx
import type { Metadata } from "next"
import HomeClient from "./HomeClient"
import React from "react"

export const metadata: Metadata = {
  title: "OEM-X Blog | Artikel Terbaru",
  description: "Kumpulan artikel terbaru dari semua blog di OEM-X.",
  openGraph: {
    title: "OEM-X Blog | Artikel Terbaru",
    description: "Kumpulan artikel terbaru dari semua blog di OEM-X.",
    url: "https://oem-x.my.id/",
    type: "website",
    images: [
      {
        url: "https://oem-x.my.id/next.svg",
        width: 1200,
        height: 630,
        alt: "OEM-X Blog",
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: "OEM-X Blog | Artikel Terbaru",
    description: "Kumpulan artikel terbaru dari semua blog di OEM-X.",
    images: ["https://oem-x.my.id/next.svg"],
  },
}

export default function HomePage() {
  return <HomeClient />
}


----------------------------------------


-- /nextjs_oem_frontend/app/HomeClient.tsx --
"use client"

import React, { useEffect, useState } from "react"
import Link from "next/link"
import { request } from "../lib/allauth"
import { renderPlainNode } from "../components/wysiwyg/renderers"
import { Descendant } from "slate"

type Blog = {
  id: number
  slug: string
  title: string
}

type Post = {
  id: number
  slug: string
  title: string
  blog: string
  published_at: string
  content: string | Descendant[]
}

export default function HomeClient() {
  const [blogs, setBlogs] = useState<Blog[]>([])
  const [posts, setPosts] = useState<Post[]>([])
  const [selectedBlog, setSelectedBlog] = useState<string>("")
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    async function fetchBlogs() {
      try {
        const res = await request<any>("GET", "/blog/public/blogs/")
        setBlogs(res?.results ?? res ?? [])
      } catch (e) {
        console.error("Gagal load blogs:", e)
        setBlogs([])
      }
    }
    fetchBlogs()
  }, [])

  useEffect(() => {
    async function fetchPosts() {
      setLoading(true)
      try {
        const url = selectedBlog
          ? `/blog/public/posts/?blog=${encodeURIComponent(selectedBlog)}`
          : "/blog/public/posts/"
        const res = await request<any>("GET", url)
        setPosts(res?.results ?? res ?? [])
      } catch (e) {
        console.error("Gagal load posts:", e)
      } finally {
        setLoading(false)
      }
    }
    fetchPosts()
  }, [selectedBlog])

  return (
    <div className="container py-5" style={{ maxWidth: "1000px" }}>
      <h1 className="display-6 fw-bold mb-4 text-center">Artikel Terbaru</h1>

      <div className="mb-4 text-center">
        <select
          className="form-select w-auto d-inline-block"
          value={selectedBlog}
          onChange={(e) => setSelectedBlog(e.target.value)}
        >
          <option value="">Semua Blog</option>
          {blogs.map((b) => (
            <option key={b.id} value={b.slug}>
              {b.title}
            </option>
          ))}
        </select>
      </div>

      {loading ? (
        <div className="text-center">Memuat posting...</div>
      ) : posts.length === 0 ? (
        <p className="text-muted text-center">Tidak ada posting.</p>
      ) : (
        <div className="row g-4">
          {posts.map((p) => {
            const content: Descendant[] =
              typeof p.content === "string" ? JSON.parse(p.content) : p.content
            const excerptNodes = content.slice(0, 2)

            return (
              <div className="col-md-6 col-lg-4" key={p.id}>
                <div className="card h-100 shadow-sm border-0">
                  <div className="card-body d-flex flex-column">
                    <h5 className="card-title">
                      <Link href={`/blog/${p.blog}/${p.slug}`}>
                        {p.title}
                      </Link>
                    </h5>
                    <p className="card-subtitle mb-2 text-muted small">
                      {new Date(p.published_at).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </p>
                    <div
                      className="card-text text-truncate"
                      style={{ maxHeight: "4.5rem", overflow: "hidden" }}
                    >
                      {excerptNodes.map((node, i) =>
                        renderPlainNode(node, i)
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      )}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/layout.tsx --
// === src/app/layout.tsx ===
import React from 'react'
import { cookies } from 'next/headers'
import { AuthProvider, AuthContextType } from '../auth/AuthContext'
import NavbarWrapper from '../components/NavbarWrapper'
import 'bootstrap/dist/css/bootstrap.min.css'
import "bootstrap-icons/font/bootstrap-icons.css";
import './globals.css'
import { ConfigType, getAuthSSR, getConfigSSR } from '../lib/allauth'
import { SWRConfig } from 'swr'
import AppWrapper from '../components/AppWrapper'

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const cookieHeader = await cookies()
  const sessionid = cookieHeader.get('sessionid')?.value || null

  let initialAuth: AuthContextType | undefined = undefined

  let initialConfig: ConfigType | null = null

  try {
    if (sessionid) {
      console.log('[RootLayout] Ada sessionid, ambil auth + config')

      const [authRes, configRaw] = await Promise.all([
        getAuthSSR(sessionid),
        getConfigSSR(),
      ])

      const data = authRes.data ?? {}
      const meta = authRes.meta ?? {}

      type Flow = {
        id: string
        providers?: string[]
        [key: string]: unknown
      }

      const flows: Flow[] = data.flows ?? []
      const providerFlow = flows.find((f) => f.id === 'provider_redirect')
      const providers = providerFlow?.providers ?? []

      initialAuth = {
        isAuthenticated: meta.is_authenticated ?? false,
        user: data.user ?? null,
        flows,
        providers,
        methods: data.methods ?? [],
        tokens: {
          session_token: meta.session_token,
          access_token: meta.access_token,
        },
        loading: false,
        lastReauthenticatedAt: typeof meta.last_reauthenticated_at === 'string'
          ? meta.last_reauthenticated_at
          : null,
      }

      initialConfig = configRaw?.data ?? configRaw ?? null
    } else {
      console.log('[RootLayout] Tidak ada sessionid, hanya ambil config')
      const configRaw = await getConfigSSR()
      initialConfig = configRaw?.data ?? configRaw ?? null
    }
  } catch (err) {
    console.error('[RootLayout] Gagal ambil auth/config:', err)
  }

  return (
    <html lang="en">
      <body>
        <SWRConfig value={{
          fallback: {
            '/auth/session': initialAuth,
            '/auth/config': initialConfig,
          }
        }}>
          <AppWrapper>
            <AuthProvider initialAuth={initialAuth} initialConfig={initialConfig}>
              <NavbarWrapper />
              {children}
            </AuthProvider>
          </AppWrapper>
        </SWRConfig>
      </body>
    </html>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/calculator/page.tsx --
'use client'

import React, { useState, useCallback } from 'react'
import APICard, { APIResponse } from '../../components/APICard'
import {
  settings,
} from '../../lib/allauth'

export default function CalculatorPage() {
  const [x, setX] = useState<string>('')
  const [y, setY] = useState<string>('')
  const [drfResponse, setDrfResponse] = useState<APIResponse>({ status: 0, data: '' })
  const [ninjaResponse, setNinjaResponse] = useState<APIResponse>({ status: 0, data: '' })
  const [loading, setLoading] = useState(false)

  const fetchResult = useCallback(
    async (
      url: string,
      x: string,
      y: string,
      setResponse: React.Dispatch<React.SetStateAction<APIResponse>>
    ) => {
      const query = new URLSearchParams({ x, y }).toString()
      const options: RequestInit = { headers: {} }

      if (settings.withCredentials) {
        options.credentials = 'include'
      }

      try {
        const res = await fetch(`${url}?${query}`, options)
        const data = await res.json()
        setResponse({ status: res.status, data })
      } catch (err: unknown) {
        const message =
          err instanceof Error ? err.message : 'Terjadi kesalahan tak dikenal'
        setResponse({ status: 'Error', data: message })
      }
    },
    []
  )

  const onCalculate = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault()
      if (isNaN(Number(x)) || isNaN(Number(y))) {
        alert('Masukkan angka yang valid untuk x dan y.')
        return
      }

      let origin: string
      try {
        origin = new URL(settings.baseUrl).origin
      } catch {
        alert(`Base URL tidak valid: ${settings.baseUrl}`)
        return
      }

      setLoading(true)
      await Promise.all([
        fetchResult(`${origin}/drf/api/add/`, x, y, setDrfResponse),
        fetchResult(`${origin}/ninja/api/add`, x, y, setNinjaResponse),
      ])
      setLoading(false)
    },
    [x, y, fetchResult]
  )

  return (
    <div className="container mt-5">
      <h2 className="mb-4">Calculator</h2>
      <form onSubmit={onCalculate}>
        <fieldset disabled={loading}>
          <div className="mb-3">
            <label htmlFor="inputX" className="form-label">
              𝓍
            </label>
            <input
              id="inputX"
              type="number"
              className="form-control"
              value={x}
              onChange={(e) => setX(e.target.value)}
              required
            />
          </div>
          <div className="mb-3">
            <label htmlFor="inputY" className="form-label">
              𝓎
            </label>
            <input
              id="inputY"
              type="number"
              className="form-control"
              value={y}
              onChange={(e) => setY(e.target.value)}
              required
            />
          </div>
          <button type="submit" className="btn btn-primary">
            {loading ? 'Calculating…' : 'Add these inputs'}
          </button>
        </fieldset>
      </form>

      <div className="row mt-5">
        <div className="col-md-6 mb-4">
          <APICard
            title="Ninja"
            docs="/ninja/api/docs"
            response={ninjaResponse}
          />
        </div>
        <div className="col-md-6 mb-4">
          <APICard
            title="Django REST Framework"
            docs="/drf/api/schema/redoc/"
            response={drfResponse}
          />
        </div>
      </div>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/metadata.ts --
// src/app/account/metadata.ts
import type { Metadata } from "next"

export const accountMetadata: Metadata = {
  title: "Akun | OEM-X",
  description: "Kelola akun Anda di OEM-X.",
  robots: {
    index: false, // 🚫 jangan diindeks Google
    follow: false, // 🚫 jangan ikuti link di halaman ini
  },
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/page.tsx --
// src/app/account/page.tsx
'use client'

import React from 'react'
import { withAuth } from '../../auth/AuthContext'
import { ClientOnly } from '../../lib/helpers/ClientOnly'
import { AccountContent } from './content'

const ProtectedAccount = withAuth(AccountContent)

export default function AccountPage() {
  return (
    <ClientOnly>
      <ProtectedAccount />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/content.tsx --
// src/app/account/content.tsx
'use client'

import React from 'react'
import { useAuth } from '../../auth/AuthContext'
import { useLogout } from '../../auth/useLogout'

export function AccountContent() {
  const { user, loading } = useAuth()
  const { triggerLogout } = useLogout()

  if (loading) {
    return <p className="container mt-5 text-center">⏳ Memuat data akun…</p>
  }
  if (!user) {
    return (
      <p className="container mt-5 text-center text-danger">
        ❌ Gagal memuat akun.
      </p>
    )
  }

  // ✅ casting aman tanpa interface
  const id = String(user.id ?? '')
  const email = String(user.email ?? '')
  const display = String(user.display ?? email ?? 'Pengguna')
  const role = String(user.role ?? '')
  const hasPassword = Boolean(user.has_usable_password)

  return (
    <div className="container mt-5">
      <h2 className="mb-3">👋 Halo, {display}!</h2>
      <p>Selamat datang di dashboard akun Anda.</p>

      <div className="mt-4">
        <h5 className="mb-3">📌 Informasi Akun</h5>
        <ul className="list-group mb-4">
          <li className="list-group-item">
            <strong>ID:</strong> {id}
          </li>
          <li className="list-group-item">
            <strong>Email:</strong> {email}
          </li>
          {role && (
            <li className="list-group-item">
              <strong>Role:</strong> {role}
            </li>
          )}
          <li className="list-group-item">
            <strong>Password aktif:</strong> {hasPassword ? '✅ Ya' : '❌ Tidak'}
          </li>
        </ul>
      </div>

      <button
        onClick={triggerLogout}
        className="btn btn-outline-danger"
      >
        🚪 Logout
      </button>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/layout.tsx --
// app/account/layout.tsx
import React from "react"
import { accountMetadata } from "./metadata"

export const metadata = accountMetadata

export default function AccountLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="container py-5" style={{ maxWidth: "800px" }}>
      {children}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/reauthenticate/page.tsx --
// src/app/account/reauthenticate/page.tsx
'use client'

import React from 'react'
import { withAuth } from '../../../auth/AuthContext'
import { ReauthenticateContent } from './content'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'

const Fallback = (
  <div className="container mt-5" style={{ maxWidth: 480 }}>
    <h2>Verifikasi Ulang</h2>
    <form>{/* Placeholder */}</form>
  </div>
)

function ReauthenticatePage() {
  const Protected = withAuth(ReauthenticateContent, '/account/login', Fallback)
  return <ClientOnly>{<Protected />}</ClientOnly>
}

export default ReauthenticatePage



----------------------------------------


-- /nextjs_oem_frontend/app/account/reauthenticate/content.tsx --
'use client'

import React, { useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { reauthenticate } from '../../../lib/allauth'
import { useRequest } from '../../../lib/helpers/useRequest'
import { mutate } from 'swr'

export function ReauthenticateContent() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const next = searchParams.get('next') || '/'

  const [password, setPassword] = useState('')
  const { trigger: doReauth, error, loading } = useRequest(reauthenticate)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    const resp = await doReauth({ password })

    if (!resp?.meta?.is_authenticated) return

    // Revalidasi session auth agar fresh
    await mutate('/auth/session')

    // Redirect ke tujuan semula
    router.replace(next)
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 480 }}>
      <h2>Verifikasi Ulang</h2>
      <p>
        Demi keamanan, masukkan ulang password Anda untuk melanjutkan.
      </p>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label htmlFor="password" className="form-label">Password</label>
          <input
            id="password"
            type="password"
            className="form-control"
            value={password}
            onChange={e => setPassword(e.target.value)}
            disabled={loading}
            required
            autoComplete="current-password"
          />
        </div>

        {error && <div className="alert alert-danger">{error}</div>}

        <button type="submit" className="btn btn-primary" disabled={loading || !password}>
          {loading ? 'Memverifikasi...' : 'Lanjutkan'}
        </button>
      </form>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/password/change/page.tsx --
// app/account/password/change/page.tsx
'use client'

import dynamic from 'next/dynamic'

// ⛔️ Hindari SSR agar tidak terjadi hydration mismatch
const ChangePasswordClient = dynamic(() => import('./ChangePasswordClient'), {
  ssr: false,
})

export default ChangePasswordClient


----------------------------------------


-- /nextjs_oem_frontend/app/account/password/change/ChangePasswordClient.tsx --
// app/account/password/change/ChangePasswordClient.tsx
'use client'

import React, { useEffect, useState } from 'react'
import { useAuth, withAuth, withReauth } from '../../../../auth/AuthContext'
import { ClientOnly } from '../../../../lib/helpers/ClientOnly'
import { changePassword } from '../../../../lib/allauth'
import { useRequest } from '../../../../lib/helpers/useRequest'
import { mutate } from 'swr'

function ChangePasswordPage() {
  const { user } = useAuth()
  const [currentPassword, setCurrentPassword] = useState('')
  const [newPassword, setNewPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [success, setSuccess] = useState<string | null>(null)
  const [justChanged, setJustChanged] = useState(false)

  const { trigger, error, loading } = useRequest(changePassword)

  const hasUsablePassword = !!user?.has_usable_password

  useEffect(() => {
    if (justChanged) {
      const timer = setTimeout(() => {
        setSuccess(null)
      }, 2500)
      return () => clearTimeout(timer)
    }
  }, [justChanged])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setSuccess(null)

    if (newPassword.length < 8) {
      return alert('Password baru minimal 8 karakter.')
    }

    if (newPassword !== confirmPassword) {
      return alert('Konfirmasi password tidak cocok.')
    }

    const res = await trigger({
      current_password: hasUsablePassword ? currentPassword : '',
      new_password: newPassword,
    })

    if (res?.status === 200) {
      await mutate('/auth/session') // ✅ refresh metode auth terbaru
      setSuccess('Password berhasil diubah.')
      setCurrentPassword('')
      setNewPassword('')
      setConfirmPassword('')
      setJustChanged(true)
    }
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 480 }}>
      <h2>Ubah Password</h2>
      <form onSubmit={handleSubmit}>
        {hasUsablePassword && (
          <div className="mb-3">
            <label htmlFor="currentPassword" className="form-label">Password Saat Ini</label>
            <input
              type="password"
              id="currentPassword"
              className="form-control"
              value={currentPassword}
              onChange={(e) => setCurrentPassword(e.target.value)}
              required
              disabled={loading}
            />
          </div>
        )}

        <div className="mb-3">
          <label htmlFor="newPassword" className="form-label">Password Baru</label>
          <input
            type="password"
            id="newPassword"
            className="form-control"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
            disabled={loading}
          />
        </div>

        <div className="mb-3">
          <label htmlFor="confirmPassword" className="form-label">Konfirmasi Password Baru</label>
          <input
            type="password"
            id="confirmPassword"
            className="form-control"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
            disabled={loading}
          />
        </div>

        {error && <div className="alert alert-danger">{error}</div>}
        {success && <div className="alert alert-success">{success}</div>}

        <button type="submit" className="btn btn-primary" disabled={loading}>
          {loading ? 'Menyimpan...' : 'Simpan'}
        </button>
      </form>
    </div>
  )
}

// 💡 Fallback loading UI
const Fallback = (
  <div className="container mt-5" style={{ maxWidth: 480 }}>
    <h2>Ubah Password</h2>
    <form>
      <div className="mb-3">
        <label className="form-label placeholder-glow">Password Saat Ini</label>
        <div className="form-control placeholder-glow" />
      </div>

      <div className="mb-3">
        <label className="form-label placeholder-glow">Password Baru</label>
        <div className="form-control placeholder-glow" />
      </div>

      <div className="mb-3">
        <label className="form-label placeholder-glow">Konfirmasi Password Baru</label>
        <div className="form-control placeholder-glow" />
      </div>

      <div className="d-grid">
        <button className="btn btn-primary disabled placeholder-glow">
          Menyimpan...
        </button>
      </div>
    </form>
  </div>
)

// ✅ Gunakan HOC + ClientOnly agar aman dari SSR mismatch
const ProtectedChangePassword = withAuth(
  withReauth(ChangePasswordPage, '/account/reauthenticate', Fallback),
  '/account/login',
  Fallback
)

export default function SecureChangePassword() {
  return (
    <ClientOnly>
      <ProtectedChangePassword />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/email/page.tsx --
// app/account/email/page.tsx
'use client'

import React, { useState, useMemo } from 'react'
import { withAuth, useConfig } from '../../../auth/AuthContext'
import {
  addEmail,
  deleteEmail,
  markEmailAsPrimary,
  requestEmailVerification,
  EmailAddress
} from '../../../lib/allauth'
import { useRequest } from '../../../lib/helpers/useRequest'
import Button from '../../../components/Button'
import { useRouter } from 'next/navigation'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'
import { useEmailAddresses } from '../../../lib/hooks/useEmailAddresses'

function ChangeEmailPage() {
  const config = useConfig()
  const router = useRouter()
  const [email, setEmail] = useState('')

  const { data, isLoading: loadingEmails, mutate } = useEmailAddresses()
  const emails: EmailAddress[] = data?.data ?? []

  const { trigger: add, loading: adding, error: addError } = useRequest(addEmail)
  const { trigger: resend, loading: resending } = useRequest(requestEmailVerification)
  const { trigger: del, loading: deleting } = useRequest(deleteEmail)
  const { trigger: setPrimary, loading: patching } = useRequest(markEmailAsPrimary)

  const isBusy = useMemo(() => adding || resending || deleting || patching, [
    adding, resending, deleting, patching
  ])

  const handleAdd = async () => {
    const res = await add(email)
    if (res?.status === 200) {
      mutate() // reload email list
      setEmail('')
      if (config?.account?.email_verification_by_code_enabled) {
        router.replace('/account/verify-email')
      }
    }
  }

  const handleVerify = async (email: string) => {
    const res = await resend(email)
    if (res?.status === 200 && config?.account?.email_verification_by_code_enabled) {
      router.replace('/account/verify-email')
    }
  }

  const handleDelete = async (email: string) => {
    const res = await del(email)
    if (res?.status === 200) {
      mutate()
    }
  }

  const handleSetPrimary = async (email: string) => {
    const res = await setPrimary(email)
    if (res?.status === 200) {
      mutate()
    }
  }

  return (
    <div className="container mt-5">
      <h2 className="mb-4">Kelola Email</h2>

      {loadingEmails ? (
        <p>Sedang memuat daftar email...</p>
      ) : (
        <div className="table-responsive">
          <table className="table table-bordered">
            <thead>
              <tr>
                <th>Email</th>
                <th>Terverifikasi</th>
                <th>Utama</th>
                <th>Aksi</th>
              </tr>
            </thead>
            <tbody>
              {emails.map((ea) => (
                <tr key={ea.email}>
                  <td>{ea.email}</td>
                  <td>{ea.verified ? '✅' : '❌'}</td>
                  <td>
                    <input
                      type="radio"
                      onChange={() => handleSetPrimary(ea.email)}
                      checked={ea.primary}
                      disabled={isBusy}
                    />
                  </td>
                  <td>
                    {!ea.verified && (
                      <Button onClick={() => handleVerify(ea.email)} disabled={isBusy}>Resend</Button>
                    )}{' '}
                    {!ea.primary && (
                      <Button onClick={() => handleDelete(ea.email)} disabled={isBusy}>Remove</Button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      <h4 className="mt-4">Tambah Email</h4>

      {addError && <div className="alert alert-danger">{addError}</div>}

      <div className="mb-3">
        <label htmlFor="new-email" className="form-label">Email Baru</label>
        <input
          id="new-email"
          type="email"
          className="form-control"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          disabled={adding}
          required
        />
      </div>

      <Button disabled={adding || !email} onClick={handleAdd}>
        Tambah
      </Button>
    </div>
  )
}

const ProtectedChangeEmail = withAuth(ChangeEmailPage)

export default function SecuredChangeEmail() {
  return (
    <ClientOnly>
      <ProtectedChangeEmail />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/sessions/page.tsx --
// app/account/sessions/page.tsx
'use client'

import React, { useMemo } from 'react'
import { withAuth, useConfig } from '../../../auth/AuthContext'
import {
  endSessions,
  SessionType
} from '../../../lib/allauth'
import { useRequest } from '../../../lib/helpers/useRequest'
import Button from '../../../components/Button'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'
import { useSessions } from '../../../lib/hooks/useSessions'

function SessionsPage() {
  const config = useConfig()
  const { data, isLoading: fetching, mutate } = useSessions()
  const sessions: SessionType[] = data?.data ?? []

  const { trigger: doLogout, loading: loggingOut } = useRequest(endSessions)

  const handleLogout = async (target: SessionType[]) => {
    const resp = await doLogout(target.map((s) => s.id))
    if (resp?.status === 200) mutate()
  }

  const otherSessions = useMemo(
    () => sessions.filter((s) => !s.is_current),
    [sessions]
  )

  return (
    <div className="container mt-5">
      <h2 className="mb-4">Sesi Aktif</h2>

      {fetching ? (
        <div className="text-center my-4">
          <div className="spinner-border text-primary" role="status" />
          <p className="mt-2">Memuat sesi aktif...</p>
        </div>
      ) : (
        <>
          <div className="table-responsive">
            <table className="table table-bordered">
              <thead>
                <tr>
                  <th>Waktu Masuk</th>
                  <th>IP Address</th>
                  <th>Browser</th>
                  {Boolean(config?.usersessions?.track_activity) && <th>Terakhir Aktif</th>}
                  <th>Sesi Ini</th>
                  <th>Aksi</th>
                </tr>
              </thead>
              <tbody>
                {sessions.map((session) => (
                  <tr key={session.id}>
                    <td>{new Date(session.created_at * 1000).toLocaleString()}</td>
                    <td>{session.ip}</td>
                    <td>{session.user_agent}</td>
                    {Boolean(config?.usersessions?.track_activity) && (
                      <td>{session.last_seen_at ?? '-'}</td>
                    )}
                    <td>{session.is_current ? '⭐' : ''}</td>
                    <td>
                      {!session.is_current && (
                        <Button onClick={() => handleLogout([session])} disabled={loggingOut || fetching}>
                          Logout
                        </Button>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {sessions.length === 0 && (
            <p className="text-muted text-center mt-3">
              Tidak ada sesi aktif yang ditemukan.
            </p>
          )}

          <Button
            className="btn btn-danger mt-3"
            disabled={otherSessions.length <= 0 || loggingOut || fetching}
            onClick={() => handleLogout(otherSessions)}
          >
            Logout dari Sesi Lain
          </Button>
        </>
      )}
    </div>
  )
}

const ProtectedSessions = withAuth(SessionsPage)

export default function SecuredSessions() {
  return (
    <ClientOnly>
      <ProtectedSessions />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/login/page.tsx --
// app/account/login/page.tsx
'use client'

import React, { useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { mutate } from 'swr'

import { login, redirectToProvider, AuthProcess } from '../../../lib/allauth'
import { withAnonymous } from '../../../auth/AuthContext'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'
import { useAuthConfig } from '../../../lib/hooks/useAuthConfig'
import type { Provider } from '../../../types'

function LoginPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const next = searchParams.get('next') || '/account'

  const { data: config, error: configError, isLoading: loadingConfig } = useAuthConfig()

  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState<string | null>(null)
  const [loading, setLoading] = useState(false)

  const authMethod = config?.data?.account?.authentication_method ?? 'email'
  const isSignupOpen = config?.data?.account?.is_open_for_signup ?? true
  const socialProviders = config?.data?.socialaccount?.providers ?? []

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError(null)
    setLoading(true)

    console.log('[Login] Mulai proses login dengan email:', email)

    try {
      const res = await login({ email, password })

      console.log('[Login] Respons login:', res)

      if (res.meta?.is_authenticated) {
        console.log('[Login] Berhasil login, redirect ke:', next)
        await mutate('/auth/session')
        router.push(next)
        return
      }

      // Jika response tidak melempar error, tapi juga tidak authenticated
      console.warn('[Login] Tidak berhasil login, response tidak melempar error tapi tidak authenticated')
      setError(res.detail || 'Login gagal.')
    } catch (e: unknown) {
      console.error('[Login] Error saat login:', e)

      if (typeof e === 'object' && e !== null && 'status' in e && 'data' in e) {
        const err = e as { status: number; data?: any }
        const flows = err.data?.data?.flows

        if (
          err.status === 401 &&
          Array.isArray(flows) &&
          flows.some((f: any) => f.id === 'verify_email' && f.is_pending)
        ) {
          console.log('[Login] Email belum diverifikasi, redirect ke /account/verify-email')
          router.push('/account/verify-email')
          return
        }

        setError(err.data?.detail || 'Login gagal.')
      } else if (e instanceof Error) {
        setError(e.message)
      } else {
        setError('Terjadi kesalahan tak dikenal.')
      }
    } finally {
      console.log('[Login] Proses login selesai.')
      setLoading(false)
    }
  }


  if (loadingConfig) {
    return <div className="container mt-5">Memuat konfigurasi login…</div>
  }
  if (configError) {
    return <div className="container mt-5 text-danger">Gagal memuat konfigurasi login.</div>
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 500 }}>
      <h2 className="mb-3">Login</h2>

      {isSignupOpen && (
        <p>
          Belum punya akun? <Link href="/account/signup">Daftar di sini</Link>
        </p>
      )}

      {error && <div className="alert alert-danger">{error}</div>}

      {authMethod === 'email' && (
        <form onSubmit={handleSubmit} className="mb-4">
          <div className="mb-3">
            <label htmlFor="email" className="form-label">Email</label>
            <input
              id="email"
              type="email"
              className="form-control"
              value={email}
              onChange={e => setEmail(e.target.value)}
              disabled={loading}
              required
            />
          </div>
          <div className="mb-3">
            <label htmlFor="password" className="form-label">Password</label>
            <input
              id="password"
              type="password"
              className="form-control"
              value={password}
              onChange={e => setPassword(e.target.value)}
              disabled={loading}
              required
            />
            <div className="form-text">
              <Link href="/account/password/reset">Lupa password?</Link>
            </div>
          </div>
          <button type="submit" className="btn btn-primary" disabled={loading}>
            {loading ? 'Logging in…' : 'Login'}
          </button>
        </form>
      )}

      {socialProviders.length > 0 && (
        <div>
          <h5>Atau login dengan:</h5>
          <ul className="list-unstyled">
            {socialProviders.map((provider: Provider) => (
              <li key={provider.id} className="mb-2">
                <button
                  onClick={() =>
                    redirectToProvider(provider.id, '/account/provider/callback', AuthProcess.LOGIN)
                  }
                  className="btn btn-outline-secondary w-100"
                >
                  Login dengan {provider.name ?? provider.id}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  )
}

const LoginWithAnonymous = withAnonymous(LoginPage)
export default function LoginClientWrapper() {
  return (
    <ClientOnly>
      <LoginWithAnonymous />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/verify-email/page.tsx --
// app/account/verify-email/page.tsx
'use client'

import React from 'react'
import Link from 'next/link'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'

export default function VerifyEmailPage() {
  return (
    <ClientOnly>
      <div className="container mt-5" style={{ maxWidth: 500 }}>
        <h2 className="mb-4">Verifikasi Email</h2>
        <p>
          Kami telah mengirimkan link verifikasi ke alamat email Anda.
          Silakan cek kotak masuk (dan folder spam) untuk menemukannya.
        </p>
        <p>
          Jika Anda belum menerima email dalam beberapa menit, Anda dapat{' '}
          <Link href="/account/verify-email/request" className="text-primary">
            meminta kirim ulang
          </Link>.
        </p>
        <p className="mt-4">
          Setelah mengeklik link verifikasi, Anda dapat{' '}
          <Link href="/account/login" className="text-primary">
            masuk ke akun Anda
          </Link>.
        </p>
      </div>
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/verify-email/request/page.tsx --
// app/account/verify-email/request/page.tsx
'use client'

import React, { useState } from 'react'
import { ClientOnly } from '../../../../lib/helpers/ClientOnly'
import { useRequest } from '../../../../lib/helpers/useRequest'
import { requestEmailVerificationUnauthenticated } from '../../../../lib/allauth'

function RequestEmailVerificationPage() {
  const [email, setEmail] = useState<string>('')
  const [success, setSuccess] = useState<string | null>(null)
  const [httpStatus, setHttpStatus] = useState<number | null>(null)

  const { trigger: sendRequest, error, loading } = useRequest(requestEmailVerificationUnauthenticated)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setSuccess(null)
    setHttpStatus(null)

    try {
      const resp = await sendRequest({ email })
      if (resp?.status === 200) {
        setSuccess('Email verifikasi telah dikirim. Silakan periksa kotak masuk Anda.')
      }
    } catch (err: any) {
      setHttpStatus(err?.status ?? null)
    }
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 500 }}>
      <h2 className="mb-4">Permintaan Verifikasi Email</h2>

      {success && <div className="alert alert-success">{success}</div>}

      {httpStatus === 403 && (
        <div className="alert alert-warning">
          Terlalu banyak permintaan. Coba lagi nanti.
        </div>
      )}

      {httpStatus === 400 && (
        <div className="alert alert-danger">
          Email tidak valid atau tidak ditemukan.
        </div>
      )}

      {httpStatus !== 400 && httpStatus !== 403 && error && (
        <div className="alert alert-danger">{error}</div>
      )}

      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label htmlFor="email" className="form-label">Alamat Email</label>
          <input
            id="email"
            type="email"
            className="form-control"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            disabled={loading}
          />
        </div>

        <button type="submit" className="btn btn-primary" disabled={loading}>
          {loading ? 'Mengirim…' : 'Kirim Verifikasi'}
        </button>
      </form>
    </div>
  )
}

export default function RequestWrapper() {
  return (
    <ClientOnly>
      <RequestEmailVerificationPage />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/verify-email/[key]/page.tsx --
// app/account/verify-email/[key]/page.tsx
'use client'

import React, { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { AuthResponse, getEmailVerification, verifyEmail } from '../../../../lib/allauth'
import Button from '../../../../components/Button'

type Status = 'pending' | 'success' | 'error'

export default function VerifyEmailPage() {
  const params = useParams()
  const router = useRouter()

  const rawKey = Array.isArray(params.key) ? params.key[0] : params.key
  const key = typeof rawKey === 'string' ? decodeURIComponent(rawKey) : ''

  const [verification, setVerification] = useState<AuthResponse | null>(null)
  const [status, setStatus] = useState<Status>('pending')
  const [message, setMessage] = useState('')
  const [fetching, setFetching] = useState(false)

  useEffect(() => {
    console.log(`load key ${key}`)
    if (!key || key.length < 8) {
      setVerification({ status: 400, data: {} })
      return
    }

    getEmailVerification(key)
      .then((resp) => {
        setVerification(resp)
      })
      .catch((e: unknown) => {
        const error = e as { status?: number }
        console.error('Gagal memuat informasi verifikasi:', error)
        // Hanya log error selain 400 dan 404
        if (error?.status && ![400, 404].includes(error.status)) {
          console.error('Gagal memuat informasi verifikasi:', error)
        }

        setVerification({ status: error?.status || 400, data: {} })
      })
  }, [key])


  const submit = async () => {
    setFetching(true)
    try {
      const res = await verifyEmail(key)
      if (res?.status === 200 || res?.status === 401) {
        setStatus('success')
        setMessage('Email berhasil diverifikasi!')
        setTimeout(() => router.push('/account/email'), 2000)
      } else {
        const errList = Array.isArray(res?.data?.errors) ? res.data.errors : []
        const reason =
          errList.length > 0
            ? `${errList[0].message} (kode: ${errList[0].code})`
            : res?.data?.detail || `Status ${res?.status || '??'}`

        setStatus('error')
        setMessage(`Gagal memverifikasi email: ${reason}`)

        // Hanya log kesalahan berat
        if (!res?.status || res.status >= 500) {
          console.error('Detail error:', res)
        }
      }
    } catch (e) {
      if (e.status === 401) {
        setStatus('success')
        setMessage('Email berhasil diverifikasi!')
        setTimeout(() => router.push('/account/email'), 2000)
      }
      else {
        console.error('Exception saat verifikasi:', e)
        setStatus('error')
        setMessage('Terjadi kesalahan saat memverifikasi email.')
      }
    } finally {
      setFetching(false)
    }
  }

  if (!verification) {
    return (
      <div className="container mt-5">
        <p>Memuat informasi verifikasi email...</p>
      </div>
    )
  }

  const data = verification.data

  return (
    <div className="container mt-5">
      <h1>Verifikasi Email</h1>

      {status === 'success' && (
        <div className="alert alert-success" role="alert">
          {message}
        </div>
      )}

      {status === 'error' && (
        <div className="alert alert-danger" role="alert">
          {message}
          <br />
          <Button className="mt-3" onClick={() => router.replace('/account/email')}>
            Kembali ke Pengaturan Email
          </Button>
        </div>
      )}

      {status === 'pending' && verification.status === 200 && (
        <>
          <p>
            Konfirmasi bahwa{' '}
            <a href={`mailto:${String(data?.email)}`}>{String(data?.email)}</a> adalah email milik{' '}
            <strong>{String((data?.user as Record<string, unknown>)?.str ?? 'pengguna ini')}</strong>.
          </p>
          <Button onClick={submit} disabled={fetching}>
            {fetching ? 'Memverifikasi...' : 'Verifikasi Email'}
          </Button>
        </>
      )}

      {status === 'pending' && verification.status !== 200 && (
        <div className="alert alert-warning" role="alert">
          Link verifikasi tidak valid atau email sudah diverifikasi sebelumnya.
        </div>
      )}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/verify-email/resend/page.tsx --
// app/account/verify-email/resend/page.tsx
'use client'

import React, { useState } from 'react'
import { useAuth } from '../../../../auth/AuthContext'
import { ClientOnly } from '../../../../lib/helpers/ClientOnly'
import { useRequest } from '../../../../lib/helpers/useRequest'
import { sendEmailVerification } from '../../../../lib/allauth'

function ResendEmailVerificationPage() {
  const { user } = useAuth()
  const [success, setSuccess] = useState<string | null>(null)
  const [httpStatus, setHttpStatus] = useState<number | null>(null)

  const initialEmail = typeof user?.email === 'string' ? user.email : ''
  const [email, setEmail] = useState<string>(initialEmail)

  const { trigger: resendEmail, error, loading } = useRequest(sendEmailVerification)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setSuccess(null)
    setHttpStatus(null)

    try {
      const resp = await resendEmail({ email })
      if (resp?.status === 200) {
        setSuccess('Email verifikasi telah dikirim. Silakan periksa kotak masuk Anda.')
      }
    } catch (err: any) {
      setHttpStatus(err?.status ?? null)
    }
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 500 }}>
      <h2 className="mb-4">Kirim Ulang Verifikasi Email</h2>

      {success && <div className="alert alert-success">{success}</div>}
      {httpStatus === 403 && (
        <div className="alert alert-warning">
          Terlalu banyak permintaan. Silakan coba lagi nanti.
        </div>
      )}
      {httpStatus === 400 && (
        <div className="alert alert-danger">
          Email tidak valid atau tidak ditemukan.
        </div>
      )}
      {httpStatus !== 400 && httpStatus !== 403 && error && (
        <div className="alert alert-danger">{error}</div>
      )}

      <form onSubmit={handleSubmit}>
        {initialEmail ? (
          <p>
            Email Anda: <strong>{initialEmail}</strong>
          </p>
        ) : (
          <div className="mb-3">
            <label htmlFor="email" className="form-label">Email</label>
            <input
              id="email"
              type="email"
              className="form-control"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              disabled={loading}
            />
          </div>
        )}

        <button type="submit" className="btn btn-primary" disabled={loading}>
          {loading ? 'Mengirim…' : 'Kirim Verifikasi'}
        </button>
      </form>
    </div>
  )
}

export default function ResendWrapper() {
  return (
    <ClientOnly>
      <ResendEmailVerificationPage />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/invitation/page.tsx --
// app/account/invitation/page.tsx
'use client';

import React, { useState } from 'react';
import { useInvitation } from '../../../lib/hooks/useInvitation';

export default function InvitationRequestPage() {
  const { loading, error, sendEmailRequest } = useInvitation();
  const [email, setEmail] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSuccessMessage('');
    const resp = await sendEmailRequest(email);
    if (resp?.detail) {
      setSuccessMessage(resp.detail);
    }
  };

  return (
    <div className="container mt-5">
      <h1 className="mb-4">Ajukan Permintaan Undangan</h1>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label htmlFor="email" className="form-label">Email Anda</label>
          <input
            type="email"
            id="email"
            className="form-control"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        {error && <div className="alert alert-danger">{error}</div>}
        {successMessage && <div className="alert alert-success">{successMessage}</div>}
        <button type="submit" className="btn btn-primary" disabled={loading}>
          {loading ? 'Mengirim...' : 'Kirim Permintaan Undangan'}
        </button>
      </form>
    </div>
  );
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/invitation/[token]/page.tsx --
// app/account/invitation/[token]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useInvitation } from '../../../../lib/hooks/useInvitation';

export default function InvitationSignupPage() {
  const { token } = useParams();
  const router = useRouter();
  const { loading, error, validateToken, signupWithToken } = useInvitation();

  const [email, setEmail] = useState('');
  const [password1, setPassword1] = useState('');
  const [password2, setPassword2] = useState('');
  const [tokenValid, setTokenValid] = useState<boolean | null>(null);
  const [message, setMessage] = useState('');

  useEffect(() => {
    if (!token) {
      setTokenValid(false);
      setMessage('Token tidak ditemukan');
      return;
    }
    (async () => {
      const resp = await validateToken(token as string);
      if (resp && resp.id) {
        setTokenValid(true);
        setEmail((resp as any).email || '');
      } else {
        setTokenValid(false);
        setMessage(error || (resp as any)?.detail || 'Token tidak valid atau kadaluarsa');
      }
    })();
  }, [token, validateToken, error]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setMessage('');

    if (password1 !== password2) {
      setMessage('Password dan konfirmasi harus sama');
      return;
    }

    try {
      const resp: any = await signupWithToken({
        email,
        password1,
        password2,
        token: token as string,
      });

      if (resp && (resp as any).success) {
        // Kalau backend kasih pesan verifikasi email
        if (resp.detail?.toLowerCase().includes('verification')) {
          router.push('/account/verify-email');
        } else {
          router.push('/account');
        }
      } else {
        setMessage(resp?.detail || error || 'Pendaftaran gagal');
      }
    } catch (err: any) {
      setMessage(err?.data?.detail || err.message || 'Pendaftaran gagal');
    }
  };

  if (tokenValid === null) {
    return <p>Memverifikasi token...</p>;
  }

  if (!tokenValid) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">{message}</div>
      </div>
    );
  }

  return (
    <div className="container mt-5">
      <h1 className="mb-4">Daftar dengan Undangan</h1>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label htmlFor="email" className="form-label">Email</label>
          <input
            type="email"
            id="email"
            className="form-control"
            value={email}
            readOnly
          />
        </div>
        <div className="mb-3">
          <label htmlFor="password1" className="form-label">Password</label>
          <input
            type="password"
            id="password1"
            className="form-control"
            value={password1}
            onChange={(e) => setPassword1(e.target.value)}
            required
          />
        </div>
        <div className="mb-3">
          <label htmlFor="password2" className="form-label">Konfirmasi Password</label>
          <input
            type="password"
            id="password2"
            className="form-control"
            value={password2}
            onChange={(e) => setPassword2(e.target.value)}
            required
          />
        </div>
        {message && <div className="alert alert-warning">{message}</div>}
        <button type="submit" className="btn btn-success" disabled={loading}>
          {loading ? 'Memproses...' : 'Daftar'}
        </button>
      </form>
    </div>
  );
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/signup/page.tsx --
// app/account/signup/page.tsx
'use client'

import React, { useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { mutate } from 'swr'

import { signUp, redirectToProvider, AuthProcess } from '../../../lib/allauth'
import { withAnonymous } from '../../../auth/AuthContext'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'
import { useRequest } from '../../../lib/helpers/useRequest'
import { useAuthConfig } from '../../../lib/hooks/useAuthConfig'
import { waitForSessionCookie } from '../../../utils/cookies'

type Provider = { id: string; name?: string }

function SignupPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const next = searchParams.get('next') || '/account'

  // Ambil konfigurasi via SWR
  const { data: rawConfig, error: configError, isLoading: loadingConfig } = useAuthConfig()

  const isSignupOpen = rawConfig?.data?.account?.is_open_for_signup ?? false
  const socialProviders = rawConfig?.data?.socialaccount?.providers ?? []

  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const { trigger: doSignup, error: signupError, loading: loadingSignup } = useRequest(signUp)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    const resp = await doSignup({ email, password })
    if (resp?.meta?.is_authenticated) {
      await mutate('/auth/session')
      await waitForSessionCookie()
      router.push(next)
    }
  }

  if (loadingConfig) {
    return <div className="container mt-5">Memuat konfigurasi…</div>
  }
  if (configError) {
    return <div className="container mt-5 text-danger">Gagal memuat konfigurasi.</div>
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 500 }}>
      <h2 className="mb-3">Daftar Akun</h2>

      {!isSignupOpen ? (
        <div className="alert alert-warning">
          <p className="mb-1">Pendaftaran akun baru ditutup.</p>
          <p className="mb-0">
            Ajukan permintaan undangan di{' '}
            <Link href="/account/invitation" className="text-primary">
              halaman undangan
            </Link>.
          </p>
        </div>
      ) : (
        <>
          <p>
            Sudah punya akun? <Link href="/account/login">Login di sini</Link>
          </p>

          {signupError && <div className="alert alert-danger">{signupError}</div>}

          <form onSubmit={handleSubmit} className="mb-4">
            <div className="mb-3">
              <label htmlFor="email" className="form-label">
                Email
              </label>
              <input
                id="email"
                type="email"
                className="form-control"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loadingSignup}
              />
            </div>

            <div className="mb-3">
              <label htmlFor="password" className="form-label">
                Password
              </label>
              <input
                id="password"
                type="password"
                className="form-control"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loadingSignup}
              />
            </div>

            <button type="submit" className="btn btn-primary" disabled={loadingSignup}>
              {loadingSignup ? 'Mendaftar…' : 'Daftar'}
            </button>
          </form>

          {socialProviders.length > 0 && (
            <div>
              <h5>Atau daftar dengan:</h5>
              <ul className="list-unstyled">
                {socialProviders.map((provider: Provider) => (
                  <li key={provider.id} className="mb-2">
                    <button
                      onClick={() =>
                        redirectToProvider(provider.id, '/account/provider/callback', AuthProcess.LOGIN)
                      }
                      className="btn btn-outline-secondary w-100"
                    >
                      Daftar dengan {provider.name ?? provider.id}
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </>
      )}
    </div>
  )
}

const AnonymousSignup = withAnonymous(SignupPage)

export default function SignupPageWrapper() {
  return (
    <ClientOnly>
      <AnonymousSignup />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/provider/page.tsx --
// app/account/provider/page.tsx
'use client'

import React, { useState } from 'react'
import { withAuth, useConfig } from '../../../auth/AuthContext'
import {
  disconnectProviderAccount,
  redirectToProvider,
  AuthProcess,
  ProviderAccount,
} from '../../../lib/allauth'
import Button from '../../../components/Button'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'
import { useRequest } from '../../../lib/helpers/useRequest'
import { useProviderAccounts } from '../../../lib/hooks/useProviderAccounts'

function ProvidersPage() {
  const config = useConfig()
  const {
    data,
    mutate,
    isLoading: loadingAccounts,
    error: fetchError,
  } = useProviderAccounts()

  const accounts: ProviderAccount[] = data?.data ?? []
  const socialProviders = config?.socialaccount?.providers ?? []

  // ✅ pakai loadingId dari hook
  const {
    trigger: disconnect,
    error: disconnectError,
    loadingId,
  } = useRequest(disconnectProviderAccount)

  const [disconnectingId, setDisconnectingId] = useState<string | null>(null)

  const handleDisconnect = async (account: ProviderAccount) => {
    setDisconnectingId(account.uid)
    const res = await disconnect(account.provider.id, account.uid)
    if (res?.status === 200) mutate()
    setDisconnectingId(null)
  }

  return (
    <div className="container mt-5">
      <h2 className="mb-4">Akun Sosial yang Terhubung</h2>

      {/* ✅ Status akun terhubung */}
      {loadingAccounts && <p className="text-muted">⏳ Memuat akun sosial…</p>}
      {fetchError && (
        <div className="alert alert-danger">
          Gagal memuat akun sosial: {String(fetchError)}
        </div>
      )}

      <div className="table-responsive mb-4">
        <table className="table table-bordered">
          <thead>
            <tr>
              <th>UID</th>
              <th>Akun</th>
              <th>Provider</th>
              <th>Aksi</th>
            </tr>
          </thead>
          <tbody>
            {accounts.map((account) => (
              <tr key={account.uid}>
                <td>{account.uid}</td>
                <td>{account.display}</td>
                <td>{account.provider.name}</td>
                <td>
                  <Button
                    onClick={() => handleDisconnect(account)}
                    disabled={loadingId !== null && disconnectingId === account.uid}
                  >
                    {loadingId !== null && disconnectingId === account.uid
                      ? 'Memutuskan…'
                      : 'Disconnect'}
                  </Button>
                </td>
              </tr>
            ))}
            {accounts.length === 0 && !loadingAccounts && (
              <tr>
                <td colSpan={4} className="text-center text-muted">
                  Tidak ada akun sosial yang terhubung.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {disconnectError && (
        <div className="alert alert-danger">
          Gagal memutuskan akun: {String(disconnectError)}
        </div>
      )}

      {/* ✅ Bagian daftar provider sosial */}
      <div className="mt-4">
        <h4>Hubungkan Akun Sosial Baru</h4>

        {!config && (
          <p className="text-muted">⏳ Memuat daftar provider…</p>
        )}

        {config && socialProviders.length === 0 && (
          <div className="alert alert-info">
            Tidak ada provider sosial yang tersedia saat ini.
          </div>
        )}

        {socialProviders.length > 0 && (
          <ul className="list-unstyled">
            {socialProviders.map((provider) => (
              <li key={provider.id} className="mb-2">
                <button
                  onClick={() =>
                    redirectToProvider(
                      provider.id,
                      '/account/provider/callback',
                      AuthProcess.CONNECT
                    )
                  }
                  className="btn btn-outline-secondary w-100"
                >
                  Hubungkan dengan {provider.name ?? provider.id}
                </button>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  )
}

const ProtectedProvidersPage = withAuth(ProvidersPage)

export default function SecuredProvidersPage() {
  return (
    <ClientOnly>
      <ProtectedProvidersPage />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/provider/signup/page.tsx --
// app/account/provider/signup/page.tsx
'use client'

import React, { useEffect } from 'react'
import { useRouter } from 'next/navigation'

export default function ProviderSignupRedirect() {
  const router = useRouter()

  useEffect(() => {
    router.replace('/account/signup')
  }, [router])

  return (
    <div className="container mt-5 text-center">
      <p>Mengalihkan ke halaman signup…</p>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/account/provider/callback/page.tsx --
// app/account/provider/callback/page.tsx
'use client'

import React, { useEffect, useMemo, useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { useAuth } from '../../../../auth/AuthContext'
import { getAuth, AuthResponse } from '../../../../lib/allauth'
import { pathForPendingFlow } from '../../../../auth/routing'
import { useRequest } from '../../../../lib/helpers/useRequest'
import { mutate } from 'swr'

export default function ProviderCallbackPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { flows, isAuthenticated } = useAuth()

  const [error, setError] = useState<string | null>(null)

  const { trigger: fetchAuth, loading } = useRequest(getAuth)

  const fallbackURL = useMemo(() => {
    if (isAuthenticated) return '/account'
    return pathForPendingFlow({ data: { flows } } as AuthResponse) || '/account/login'
  }, [isAuthenticated, flows])

  useEffect(() => {
    const errorParam = searchParams.get('error')
    if (errorParam) {
      setError(decodeURIComponent(errorParam))
      return
    }

    const finalizeLogin = async () => {
      const res = await fetchAuth()
      if (!res) return setError('Gagal mengambil data sesi dari server.')

      await mutate('/auth/session')

      const flow = res.data?.flows?.find(f => f.id === 'provider_signup' && f.is_pending)
      if (flow) {
        router.replace('/account/signup')
      } else {
        router.replace(fallbackURL)
      }
    }

    finalizeLogin()
  }, [searchParams, fetchAuth, fallbackURL, router])

  if (error) {
    return (
      <div className="container mt-5">
        <h1>Login Sosial Gagal</h1>
        <div className="alert alert-danger">{error}</div>
        <Link href={fallbackURL} className="btn btn-secondary">Kembali</Link>
      </div>
    )
  }

  return (
    <div className="container mt-5">
      <h1>Menyelesaikan login…</h1>
      <p>Sedang menghubungkan akun Anda. Harap tunggu sebentar.</p>
      {loading && <p><em>Memuat data sesi…</em></p>}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/not-found.tsx --
import React from "react"
import Link from "next/link"

export default function AdminNotFound() {
  return (
    <div className="container py-5 text-center">
      <h1 className="h4 mb-3">Halaman Admin Tidak Ditemukan</h1>
      <p className="text-muted">Periksa kembali URL yang Anda akses.</p>
      <Link href="/admin" className="btn btn-outline-secondary mt-3">
        ← Kembali ke Dashboard Admin
      </Link>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/metadata.ts --
// app/admin/metadata.ts
import type { Metadata } from "next"

export const adminMetadata: Metadata = {
  title: "Admin | OEM-X",
  description: "Halaman admin OEM-X.",
  robots: { index: false, follow: false }, // 🚫 jangan diindeks Google
}

----------------------------------------


-- /nextjs_oem_frontend/app/admin/layout.tsx --
// src/app/admin/layout.tsx
import React from "react"
import { adminMetadata } from "./metadata"
import AdminClientWrapper from "./AdminClientWrapper"

export const metadata = adminMetadata

export default function AdminLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="container py-4">
      <AdminClientWrapper>{children}</AdminClientWrapper>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/AdminClientWrapper.tsx --
// src/app/admin/AdminClientWrapper.tsx
"use client"

import React from "react"
import dynamic from "next/dynamic"

const BootstrapInit = dynamic(() => import("../../components/BootstrapInit"), {
  ssr: false,
})

export default function AdminClientWrapper({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <>
      {children}
      <BootstrapInit />
    </>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/hooks/useUsers.ts --
"use client"

import useSWR from "swr"
import { request } from "../../../lib/allauth"

export interface User {
  id: number
  email: string
  role: string
}

export function useUsers() {
  const { data, error, isLoading, mutate } = useSWR<User[]>(
    "/accounts/users-roles/",
    (url: string) => request<User[]>("GET", url)
  )

  return {
    users: data ?? [],
    isLoading,
    isError: !!error,
    mutate,
  }
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/invitations/page.tsx --
// app/admin/invitations/page.tsx
'use client';

import React, { useState } from 'react';
import useSWR from 'swr';
import { withAuth } from '../../../auth/AuthContext';
import { useRequest } from '../../../lib/helpers/useRequest';
import {
  listEmailRequests,
  listInvitations,
  createInvitation,
  deleteInvitation,
  deleteEmailRequest,
  resendInvitation,
} from '../../../lib/allauth';

// Types
type EmailRequest = { id: number; email: string };
type Invitation = {
  id: number;
  email: string;
  token: string;
  invited_by: string;
  expires_at: string;
};

// SWR fetchers
const fetchEmailRequests = async (): Promise<EmailRequest[]> => {
  const res = await listEmailRequests();
  return (res as any).results || (res as any);
};

const fetchInvitations = async (): Promise<Invitation[]> => {
  const res = await listInvitations();
  return (res as any).results || (res as any);
};

// Helper buat copy link
const INVITATION_PATH = '/account/invitation/';
const copyInvitationLink = (token: string) => {
  const link = `${window.location.origin}${INVITATION_PATH}${token}`;
  navigator.clipboard.writeText(link).then(() => {
    alert(`Link undangan sudah disalin:\n${link}`);
  });
};

function AdminInvitationsPage() {
  const [manualEmail, setManualEmail] = useState('');

  const { data: emailRequests, mutate: mutateEmailReqs } = useSWR<EmailRequest[]>(
    '/invitations/email-requests',
    fetchEmailRequests
  );
  const { data: invitations, mutate: mutateInvitations } = useSWR<Invitation[]>(
    '/invitations/list',
    fetchInvitations
  );

  // Actions
  const { trigger: sendInvitation, loadingId: sendingId } = useRequest(
    async (email: string, requestId?: number) => {
      const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString();
      await createInvitation({ email, expires_at: expiresAt });
      await mutateEmailReqs();
      await mutateInvitations();
    },
    { idIndex: 1 }
  );

  const { trigger: resend, loadingId: resendingId } = useRequest(
    async (id: number) => {
      await resendInvitation(id);
      await mutateInvitations();
    },
    { idIndex: 0 }
  );

  const { trigger: removeRequest, loadingId: removingReqId } = useRequest(
    async (id: number) => {
      if (confirm('Hapus permintaan email ini?')) {
        await deleteEmailRequest(id);
        await mutateEmailReqs();
      }
    },
    { idIndex: 0 }
  );

  const { trigger: removeInvitation, loadingId: removingInvId } = useRequest(
    async (id: number) => {
      if (confirm('Hapus undangan ini?')) {
        await deleteInvitation(id);
        await mutateInvitations();
      }
    },
    { idIndex: 0 }
  );

  const { trigger: sendManual, loadingId: manualLoading } = useRequest(
    async (email: string) => {
      const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString();
      await createInvitation({ email, expires_at: expiresAt });
      await mutateInvitations();
    },
    { idIndex: 0 }
  );

  if (!emailRequests || !invitations) return <p>Loading...</p>;

  return (
    <div className="container mt-5">
      <h1 className="mb-4">Dashboard Undangan (Admin)</h1>

      {/* Form manual */}
      <section className="mb-5">
        <h2>Kirim Undangan Manual</h2>
        <form
          className="d-flex gap-2"
          onSubmit={(e) => {
            e.preventDefault();
            if (manualEmail) {
              sendManual(manualEmail);
              setManualEmail('');
            }
          }}
        >
          <input
            type="email"
            className="form-control"
            placeholder="Masukkan email"
            value={manualEmail}
            onChange={(e) => setManualEmail(e.target.value)}
            required
          />
          <button className="btn btn-primary" disabled={manualLoading !== null}>
            {manualLoading ? 'Mengirim...' : 'Kirim'}
          </button>
        </form>
      </section>

      {/* Email Requests */}
      <section className="mb-5">
        <h2>Email Requests</h2>
        {emailRequests.length === 0 && <p>Tidak ada permintaan.</p>}
        <ul className="list-group">
          {emailRequests.map((req) => (
            <li
              key={req.id}
              className="list-group-item d-flex justify-content-between align-items-center"
            >
              {req.email}
              <div>
                <button
                  className="btn btn-sm btn-success me-2"
                  disabled={sendingId === req.id}
                  onClick={() => sendInvitation(req.email, req.id)}
                >
                  {sendingId === req.id ? 'Mengirim...' : 'Kirim Undangan'}
                </button>
                <button
                  className="btn btn-sm btn-danger"
                  disabled={removingReqId === req.id}
                  onClick={() => removeRequest(req.id)}
                >
                  {removingReqId === req.id ? 'Menghapus...' : 'Hapus'}
                </button>
              </div>
            </li>
          ))}
        </ul>
      </section>

      {/* Invitations */}
      <section>
        <h2>Invitations</h2>
        {invitations.length === 0 && <p>Tidak ada undangan aktif.</p>}
        <ul className="list-group">
          {invitations.map((inv) => (
            <li
              key={inv.id}
              className="list-group-item d-flex justify-content-between align-items-center"
            >
              <span>
                {inv.email} - Expires:{' '}
                {new Intl.DateTimeFormat('id-ID', {
                  dateStyle: 'medium',
                  timeStyle: 'short',
                }).format(new Date(inv.expires_at))}
              </span>
              <div>
                <button
                  className="btn btn-sm btn-secondary me-2"
                  onClick={() => copyInvitationLink(inv.token)}
                >
                  Salin Link
                </button>
                <button
                  className="btn btn-sm btn-warning me-2"
                  disabled={resendingId === inv.id}
                  onClick={() => resend(inv.id)}
                >
                  {resendingId === inv.id ? 'Mengirim...' : 'Kirim Ulang'}
                </button>
                <button
                  className="btn btn-sm btn-danger"
                  disabled={removingInvId === inv.id}
                  onClick={() => removeInvitation(inv.id)}
                >
                  {removingInvId === inv.id ? 'Menghapus...' : 'Hapus'}
                </button>
              </div>
            </li>
          ))}
        </ul>
      </section>
    </div>
  );
}

export default withAuth(AdminInvitationsPage);


----------------------------------------


-- /nextjs_oem_frontend/app/admin/users/roles/page.tsx --
"use client"

import { useUsers } from "../../hooks/useUsers"
import { request } from "../../../../lib/allauth"
import { useState } from "react"
import React from "react"

const roles = ["customer", "staff", "manager", "admin"]

export default function UserListPage() {
  const { users, isLoading, isError, mutate } = useUsers()
  const [savingId, setSavingId] = useState<number | null>(null)

  if (isError) return <div className="alert alert-danger">Gagal memuat user.</div>
  if (isLoading) return <div className="text-center p-4">Memuat...</div>

  async function handleRoleChange(userId: number, newRole: string) {
    setSavingId(userId)
    try {
      await request("PATCH", `/accounts/users-roles/${userId}/`, { role: newRole })
      await mutate() // refresh list user
    } catch (err: any) {
      console.error("Gagal update role:", err)
      alert(err?.data?.detail || "Gagal mengubah role")
    } finally {
      setSavingId(null)
    }
  }

  return (
    <div className="container py-4">
      <h1 className="mb-4">User Roles Management</h1>
      <table className="table table-bordered align-middle">
        <thead className="table-light">
          <tr>
            <th>ID</th>
            <th>Email</th>
            <th>Role</th>
            <th>Aksi</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id}>
              <td>{user.id}</td>
              <td>{user.email}</td>
              <td>
                <select
                  className="form-select"
                  value={user.role}
                  onChange={(e) => handleRoleChange(user.id, e.target.value)}
                  disabled={savingId === user.id}
                >
                  {roles.map((r) => (
                    <option key={r} value={r}>
                      {r}
                    </option>
                  ))}
                </select>
              </td>
              <td>
                {savingId === user.id ? (
                  <span className="text-muted">Menyimpan...</span>
                ) : (
                  <button
                    className="btn btn-sm btn-primary"
                    onClick={() => handleRoleChange(user.id, user.role)}
                  >
                    Simpan
                  </button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/users/status/page.tsx --
"use client"

import { useState } from "react"
import useSWR from "swr"
import { request } from "../../../../lib/allauth"
import React from "react"

interface User {
  id: number
  email: string
  role: string
  is_active: boolean
  is_staff: boolean
  is_superuser: boolean
}

export default function UserPermissionPage() {
  const { data: users, mutate } = useSWR<User[]>("/accounts/user-status/", url =>
    request<User[]>("GET", url)
  )
  const [saving, setSaving] = useState<number | null>(null)

  if (!users) return <div>Loading...</div>

  async function toggleFlag(user: User, field: keyof User) {
    setSaving(user.id)
    await request("PATCH", `/accounts/user-status/${user.id}/`, {
      [field]: !user[field],
    })
    await mutate()
    setSaving(null)
  }

  return (
    <div className="container py-4">
      <h1 className="mb-4">User Status Management</h1>
      <div className="table-responsive">
        <table className="table table-bordered table-hover align-middle">
          <thead className="table-light">
            <tr>
              <th>Email</th>
              <th>Role</th>
              <th>Active</th>
              <th>Staff</th>
              <th>Superuser</th>
            </tr>
          </thead>
          <tbody>
            {users.map(u => (
              <tr key={u.id}>
                <td>{u.email}</td>
                <td>{u.role}</td>
                <td className="text-center">
                  <input
                    type="checkbox"
                    checked={u.is_active}
                    disabled={saving === u.id}
                    onChange={() => toggleFlag(u, "is_active")}
                  />
                </td>
                <td className="text-center">
                  <input
                    type="checkbox"
                    checked={u.is_staff}
                    disabled={saving === u.id}
                    onChange={() => toggleFlag(u, "is_staff")}
                  />
                </td>
                <td className="text-center">
                  <input
                    type="checkbox"
                    checked={u.is_superuser}
                    disabled={saving === u.id}
                    onChange={() => toggleFlag(u, "is_superuser")}
                  />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/blog/page.tsx --
// app/admin/blog/page.tsx
import BlogList from "../../../blog/components/BlogList"
import Link from "next/link"
import React from "react"

export default function BlogPage() {
  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h1 className="h3">My Blogs</h1>
        <Link href="/admin/blog/new" className="btn btn-primary">+ New Blog</Link>
      </div>
      <BlogList />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/blog/[id]/[slug]/page.tsx --
// app/admin/blog/[id]/[slug]/page.tsx
"use client"

import { useParams } from "next/navigation"
import PostList from "../../../../../blog/components/PostList"
import React from "react"
import Link from "next/link"

export default function BlogDetailPage() {
  const params = useParams()
  const id = params?.id as string
  const slug = params?.slug as string

  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h1 className="h3 mb-3">Blog Detail: {slug}</h1>
        <Link href={`/admin/blog`} className="btn btn-outline-secondary">
          ← Back to Blog
        </Link>
      </div>
      <PostList blogId={id} slug={slug} />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/blog/[id]/[slug]/memberships/page.tsx --
// app/admin/blog/[id]/[slug]/memberships/page.tsx
"use client"

import React from "react"
import MembershipTable from "../../../../../../blog/components/MembershipTable"
import { useParams } from "next/navigation"
import Link from "next/link"

export default function MembershipPage() {
  const params = useParams()
  const id = params?.id as string
  const slug = params?.slug as string

  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h1 className="h3 mb-0">Manage Memberships</h1>
        <Link href={`/admin/blog/${id}/${slug}`} className="btn btn-outline-secondary">
          ← Back to Blog
        </Link>
      </div>
      <MembershipTable />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/blog/[id]/[slug]/posts/new/page.tsx --
// app/admin/blog/[id]/[slug]/posts/new/page.tsx
"use client"

import React from "react"
import { useRouter, useParams } from "next/navigation"
import PostForm from "../../../../../../../blog/components/PostForm"
import type { Post } from "../../../../../../../blog/types"

export default function NewPostPage() {
  const { id, slug } = useParams()
  const blogId = id as string
  const bSlug = slug as string
  const router = useRouter()

  return (
    <div className="container py-4">
      <h5 className="h6 mb-2">Blog Detail: {bSlug}</h5>
      <h1 className="h3 mb-3">Create Post</h1>
      <PostForm
        blogId={blogId}
        bSlug={bSlug}
        onSuccess={(post: Post) => router.push(`/admin/blog/${blogId}/${bSlug}/posts/${post.id}`)}
      />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/blog/[id]/[slug]/posts/[postId]/page.tsx --
// app/admin/blog/[id]/[slug]/posts/[postId]/page.tsx
"use client"

import React from "react"
import { useParams, useRouter } from "next/navigation"
import useSWR from "swr"
import PostForm from "../../../../../../../blog/components/PostForm"
import { request } from "../../../../../../../lib/allauth"
import type { Post } from "../../../../../../../blog/types"

export default function EditPostPage() {
  const { id, slug, postId } = useParams()
  const blogId = id as string
  const bSlug = slug as string
  const router = useRouter()

  const { data, error, isLoading } = useSWR<Post>(
    postId ? `/blog/posts/${postId}/` : null,
    (url: string) => request<Post>("GET", url)
  )

  async function handleDelete() {
    if (!confirm("Yakin hapus post ini?")) return
    await request("DELETE", `/blog/posts/${postId}/`)
    router.push(`/blog/${blogId}/${bSlug}`)
  }

  if (isLoading) return <div className="container py-4">Loading...</div>
  if (error) return <div className="container py-4">Gagal memuat data.</div>
  if (!data) return null

  return (
    <div className="container py-4">
      <h5 className="h6 mb-2">Blog Detail: {bSlug}</h5>
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h1 className="h3">Edit Post</h1>
        <div className="d-flex gap-2">
          <button className="btn btn-outline-danger" onClick={handleDelete}>
            Delete
          </button>
          <a href={`/admin/blog/${blogId}/${bSlug}`} className="btn btn-outline-secondary">Back</a>
        </div>
      </div>

      <PostForm
        blogId={blogId}
        bSlug={bSlug}
        initial={data}
        method="PATCH"
        onSuccess={(post) => router.push(`/admin/blog/${blogId}/${bSlug}/posts/${post.id}`)}
      />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/blog/[id]/[slug]/posts/[postId]/view/page.tsx --
// app/admin/blog/[id]/[slug]/posts/[postId]/view/page.tsx
"use client"

import React from "react"
import { useParams, useRouter } from "next/navigation"
import useSWR from "swr"
import { request } from "../../../../../../../../lib/allauth"
import type { Post } from "../../../../../../../../blog/types"
import Link from "next/link"

import PostCover from "./PostCover"
import PostContentViewer from "./PostContentViewer"

// =============================
// SWR fetcher
// =============================
const fetchPost = (url: string) => request<Post>("GET", url)

interface ViewPostPageProps {
  fallbackData: Post // optional pre-fetched data
}

export default function ViewPostPage({ fallbackData }: ViewPostPageProps) {
  const { id, slug, postId } = useParams()
  const blogId = id as string
  const bSlug = slug as string
  const router = useRouter()

  // =============================
  // SWR fetch
  // =============================
  const { data, error, isLoading } = useSWR<Post>(
    postId ? `/blog/posts/${postId}/` : null,
    fetchPost,
    { fallbackData }
  )

  if (isLoading) return <div className="container py-4">Loading...</div>
  if (error) return <div className="container py-4 text-danger">Gagal memuat data.</div>
  if (!data) return <div className="container py-4">Post tidak ditemukan.</div>

  // =============================
  // Parse content JSON aman
  // =============================
  let nodes: any[] = []
  if (data.content) {
    try {
      nodes = JSON.parse(data.content as unknown as string)
    } catch (e) {
      console.error("Invalid content JSON", e)
    }
  }

  return (
    <div className="container py-4">
      <h1 className="mb-4">{data.title}</h1>

      {data.cover_image && (
        <PostCover src={data.cover_image} alt={data.title || "Cover image"} />
      )}

      <div className="d-flex justify-content-between align-items-center mb-3">
        <div className="btn-group">
          <Link
            href={`/admin/blog/${blogId}/${bSlug}/posts/${postId}`}
            className="btn btn-sm btn-primary"
          >
            Edit
          </Link>
          <button className="btn btn-sm btn-secondary" onClick={() => router.back()}>
            Back
          </button>
        </div>
      </div>

      <PostContentViewer nodes={nodes} fallbackAlt={data.title || undefined} />

      <hr />
      <p className="text-muted small">
        Created: {new Date(data.created_at).toLocaleString()} <br />
        Updated: {new Date(data.updated_at).toLocaleString()}
      </p>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/blog/[id]/[slug]/posts/[postId]/view/PostCover.tsx --
// app/admin/blog/[id]/[slug]/posts/[postId]/view/PostCover.tsx
"use client"

import React from "react"

interface PostCoverProps {
  src?: string | null
  alt?: string
}

export default function PostCover({ src, alt }: PostCoverProps) {
  if (!src) return null

  return (
    <div className="mb-4 text-center">
      <img
        src={src}
        alt={alt || "Cover image"}
        className="img-fluid rounded shadow-sm"
        style={{ maxHeight: 420, objectFit: "cover", width: "100%" }}
      />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/blog/[id]/[slug]/posts/[postId]/view/PostContentViewer.tsx --
// app/admin/blog/[id]/[slug]/posts/[postId]/view/PostContentViewer.tsx
"use client"

import React from "react"
import { Descendant } from "slate"
import { renderNode } from "../../../../../../../../components/wysiwyg/renderers"

interface PostContentViewerProps {
  nodes: Descendant[]
  fallbackAlt?: string
}

export default function PostContentViewer({ nodes, fallbackAlt }: PostContentViewerProps) {
  if (!nodes || nodes.length === 0) return <p>No content</p>

  return (
    <div className="post-content">
      {nodes.map((node, i) => renderNode(node, i, fallbackAlt))}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/blog/[id]/[slug]/edit/page.tsx --
// app/admin/blog/[id]/[slug]/edit/page.tsx
"use client"

import React from "react"
import useSWR from "swr"
import { useParams, useRouter } from "next/navigation"
import BlogForm from "../../../../../../blog/components/BlogForm"
import { request } from "../../../../../../lib/allauth"
import type { Blog } from "../../../../../../blog/types"

export default function EditBlogPage() {
  const router = useRouter()
  const { id, slug } = useParams()
  const blogId = id as string
  const bSlug = slug as string

  const { data, error, isLoading } = useSWR<Blog>(
    blogId ? `/blog/blogs/${blogId}/` : null,
    (url: string) => request<Blog>("GET", url)
  )

  async function handleDelete() {
    if (!confirm("Yakin hapus blog ini? Aksi tidak bisa dibatalkan.")) return
    await request("DELETE", `/blog/blogs/${blogId}/`)
    router.push("/admin/blog")
  }

  if (isLoading) return <div className="container py-4">Loading...</div>
  if (error) return <div className="container py-4">Gagal memuat data.</div>
  if (!data) return null

  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h1 className="h3">Edit Blog</h1>
        <div className="d-flex gap-2">
          <button className="btn btn-outline-danger" onClick={handleDelete}>
            Delete
          </button>
          <a href={`/admin/blog/${blogId}/${bSlug}`} className="btn btn-outline-secondary">Back</a>
        </div>
      </div>

      <BlogForm
        initial={data}
        method="PATCH"
        onSuccess={(blog) => router.push(`/admin/blog/${blog.id}/${blog.slug}`)}
      />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/admin/blog/new/page.tsx --
// app/admin/blog/new/page.tsx
"use client"

import React from "react"
import { useRouter } from "next/navigation"
import BlogForm from "../../../../blog/components/BlogForm"
import type { Blog } from "../../../../blog/types"

export default function NewBlogPage() {
  const router = useRouter()
  return (
    <div className="container py-4">
      <h1 className="h3 mb-3">Create Blog</h1>
      <BlogForm onSuccess={(blog: Blog) => router.push(`/admin/blog/${blog.id}/${blog.slug}`)} />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/not-found.tsx --
// app/blog/not-found.tsx
import React from "react"
import type { Metadata } from "next"
import Link from "next/link"

export const metadata: Metadata = {
  title: "Blog tidak ditemukan",
  description: "Konten yang kamu cari di blog tidak tersedia.",
  robots: { index: false, follow: false }, // 🚫 noindex global untuk semua 404 blog
}

export default function BlogNotFound() {
  return (
    <div className="container py-5 text-center">
      <h1 className="display-6 fw-bold mb-3">Blog tidak ditemukan 📝</h1>
      <p className="text-muted mb-4">
        Halaman atau artikel yang kamu cari tidak tersedia.
      </p>
      <Link href="/blog" className="btn btn-outline-primary">
        ← Kembali ke Blog
      </Link>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/metadata.ts --
// app/blog/metadata.ts
import type { Metadata } from "next"

export const blogMetadata: Metadata = {
  title: "Blog | OEM-X",
  description:
    "Jelajahi kumpulan blog publik di OEM-X. Temukan artikel terbaru yang dipublikasikan.",
  robots: {
    index: true,  // ✅ blog publik boleh diindeks
    follow: true,
  },
  openGraph: {
    title: "Blog | OEM-X",
    description:
      "Jelajahi kumpulan blog publik di OEM-X. Temukan artikel terbaru yang dipublikasikan.",
    type: "website",
    url: "https://oem-x.my.id/blog",
    images: [
      {
        url: "https://oem-x.my.id/next.svg",
        width: 1200,
        height: 630,
        alt: "OEM-X Blog",
      },
    ],
  },
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/page.tsx --
// app/blog/page.tsx
import React from "react"
import Link from "next/link"
import type { Metadata } from "next"
import { request } from "../../lib/allauth"

export default async function BlogListPage() {
  const res = await request<any>("GET", "/blog/public/blogs/")
  const blogs = Array.isArray(res) ? res : res?.results ?? []

  if (!blogs || blogs.length === 0) {
    return (
      <div className="container py-5 text-center">
        <h1 className="h3 mb-3">Daftar Blog</h1>
        <p className="text-muted">Belum ada blog yang tersedia.</p>
      </div>
    )
  }

  return (
    <div className="container py-5" style={{ maxWidth: "1000px" }}>
      <h1 className="display-6 fw-bold mb-4 text-center">Daftar Blog</h1>
      <div className="row g-4">
        {blogs.map((b: any) => (
          <div className="col-md-6 col-lg-4" key={b.id}>
            <div className="card h-100 shadow-sm border-0">
              <div className="card-body d-flex flex-column">
                <h5 className="card-title mb-2">
                  <Link
                    href={`/blog/${b.slug}`}
                    className="stretched-link text-decoration-none text-dark"
                  >
                    {b.title}
                  </Link>
                </h5>
                {b.description && (
                  <p className="card-text text-muted small">
                    {b.description.length > 120
                      ? b.description.slice(0, 120) + "..."
                      : b.description}
                  </p>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}

// ✅ Tambahan Metadata untuk SEO
export async function generateMetadata(): Promise<Metadata> {
  let blogs: any[] = []
  try {
    const res = await request<any>("GET", "/blog/public/blogs/")
    blogs = Array.isArray(res) ? res : res?.results ?? []
  } catch {
    blogs = []
  }

  const latest = blogs[0]

  return {
    title: "Daftar Blog | OEM-X",
    description:
      latest?.description?.slice(0, 150) ||
      "Jelajahi kumpulan blog publik di OEM-X. Temukan artikel terbaru yang dipublikasikan.",
    openGraph: {
      title: "Daftar Blog | OEM-X",
      description:
        latest?.description?.slice(0, 150) ||
        "Jelajahi kumpulan blog publik di OEM-X. Temukan artikel terbaru yang dipublikasikan.",
      type: "website",
      url: "https://oem-x.my.id/blog",
      images: [
        {
          url: "https://oem-x.my.id/next.svg",
          width: 1200,
          height: 630,
          alt: "OEM-X Blog",
        },
      ],
    },
  }
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/layout.tsx --
// app/blog/layout.tsx
import React from "react"
import { blogMetadata } from "./metadata"

export const metadata = blogMetadata

export default function BlogLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <>{children}</>
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/index/page.tsx --
// src/app/blog/home/page.tsx
import React from "react"
import Link from "next/link"
import { request } from "../../../lib/allauth"
import { renderPlainNode } from "../../../components/wysiwyg/renderers"
import { Descendant } from "slate"
import type { Metadata } from "next"

export default async function BlogIndexPage() {
  const res = await request<any>("GET", "/blog/public/posts/")
  const posts = Array.isArray(res) ? res : res?.results ?? []

  if (!posts || posts.length === 0) {
    return (
      <div className="container py-5 text-center">
        <h1 className="h3 mb-3">Beranda Blog</h1>
        <p className="text-muted">Belum ada posting yang dipublikasikan.</p>
      </div>
    )
  }

  return (
    <div className="container py-5" style={{ maxWidth: "1000px" }}>
      <h1 className="display-6 fw-bold mb-4 text-center">Semua Artikel Terbaru</h1>
      <div className="row g-4">
        {posts.map((p: any) => {
          const content: Descendant[] =
            typeof p.content === "string" ? JSON.parse(p.content) : p.content
          const excerptNodes = content.slice(0, 2)

          return (
            <div className="col-md-6 col-lg-4" key={p.id}>
              <div className="card h-100 shadow-sm border-0">
                <div className="card-body d-flex flex-column">
                  <h5 className="card-title">
                    <Link
                      href={`/blog/${p.blog}/${p.slug}`}
                      className="stretched-link text-decoration-none text-dark"
                    >
                      {p.title}
                    </Link>
                  </h5>
                  <p className="card-subtitle mb-2 text-muted small">
                    {new Date(p.published_at).toLocaleDateString("id-ID", {
                      day: "numeric",
                      month: "long",
                      year: "numeric",
                    })}
                  </p>
                  <div
                    className="card-text text-truncate"
                    style={{ maxHeight: "4.5rem", overflow: "hidden" }}
                  >
                    {excerptNodes.map((node, i) => renderPlainNode(node, i))}
                  </div>
                </div>
              </div>
            </div>
          )
        })}
      </div>
    </div>
  )
}

// ✅ SEO Metadata
export const metadata: Metadata = {
  title: "Beranda Blog | OEM-X",
  description: "Kumpulan semua artikel terbaru dari berbagai blog di OEM-X.",
  openGraph: {
    title: "Beranda Blog | OEM-X",
    description: "Kumpulan semua artikel terbaru dari berbagai blog di OEM-X.",
    type: "website",
    url: "https://oem-x.my.id/blog/home",
    images: [
      {
        url: "https://oem-x.my.id/next.svg",
        width: 1200,
        height: 630,
        alt: "OEM-X Blog",
      },
    ],
  },
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/[slug]/metadata.ts --
// app/blog/[slug]/metadata.ts
import type { Metadata } from "next"

export const blogDetailMetadata: Metadata = {
  title: "Detail Blog | OEM-X",
  description: "Artikel dan konten dari blog tertentu di OEM-X.",
  robots: {
    index: true,  // ✅ default diindeks, nanti bisa override di generateMetadata()
    follow: true,
  },
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/[slug]/page.tsx --
// app/blog/[slug]/page.tsx
import React from "react"
import Link from "next/link"
import { notFound } from "next/navigation"
import { request } from "../../../lib/allauth"
import { renderPlainNode } from "../../../components/wysiwyg/renderers"
import { Descendant } from "slate"
import type { Metadata } from "next"

export default async function BlogPublicPage(
  props: { params: Promise<{ slug: string }> }
) {
  const { slug } = await props.params

  const res = await request<any>("GET", `/blog/public/posts/?blog=${slug}`)
  const posts = Array.isArray(res) ? res : res?.results ?? []

  if (!posts || posts.length === 0) {
    notFound() // 🚫 auto redirect ke app/blog/not-found.tsx
  }

  return (
    <div className="container py-5" style={{ maxWidth: "1000px" }}>
      <h1 className="display-6 fw-bold mb-4 text-center">Blog: {slug}</h1>
      <div className="row g-4">
        {posts.map((p: any) => {
          const content: Descendant[] =
            typeof p.content === "string" ? JSON.parse(p.content) : p.content
          const excerptNodes = content.slice(0, 2)

          return (
            <div className="col-md-6 col-lg-4" key={p.id}>
              <div className="card h-100 shadow-sm border-0">
                <div className="card-body d-flex flex-column">
                  <h5 className="card-title">
                    <Link
                      href={`/blog/${slug}/${p.slug}`}
                      className="stretched-link text-decoration-none text-dark"
                    >
                      {p.title}
                    </Link>
                  </h5>
                  <p className="card-subtitle mb-2 text-muted small">
                    {new Date(p.published_at).toLocaleDateString("id-ID", {
                      day: "numeric",
                      month: "long",
                      year: "numeric",
                    })}
                  </p>
                  <div
                    className="card-text text-truncate"
                    style={{ maxHeight: "4.5rem", overflow: "hidden" }}
                  >
                    {excerptNodes.map((node, i) => renderPlainNode(node, i))}
                  </div>
                </div>
              </div>
            </div>
          )
        })}
      </div>
    </div>
  )
}

// ✅ Metadata SEO
export async function generateMetadata(
  props: { params: Promise<{ slug: string }> }
): Promise<Metadata> {
  const { slug } = await props.params

  let posts: any[] = []
  try {
    const res = await request<any>("GET", `/blog/public/posts/?blog=${slug}`)
    posts = Array.isArray(res) ? res : res?.results ?? []
  } catch {
    posts = []
  }

  if (!posts || posts.length === 0) {
    // ❌ noindex di sini dihapus → ditangani oleh not-found.tsx
    return {}
  }

  const latest = posts[0]
  const title = `Blog ${slug} | OEM-X`
  const description =
    latest?.content
      ? (typeof latest.content === "string"
        ? JSON.parse(latest.content)
        : latest.content
      )
        .map((node: any) => ("text" in node ? node.text : ""))
        .join(" ")
        .slice(0, 150)
      : `Kumpulan artikel terbaru dari blog ${slug}.`

  const image = "https://oem-x.my.id/next.svg"

  return {
    title,
    description,
    openGraph: {
      title,
      description,
      type: "website",
      url: `https://oem-x.my.id/blog/${slug}`,
      images: [{ url: image, width: 1200, height: 630, alt: "OEM-X Blog" }],
    },
    twitter: {
      card: "summary_large_image",
      title,
      description,
      images: [image],
    },
  }
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/[slug]/layout.tsx --
// app/blog/[slug]/layout.tsx
import React from "react"
import { blogDetailMetadata } from "./metadata"

export const metadata = blogDetailMetadata

export default function BlogDetailLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <>{children}</>
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/[slug]/[postSlug]/metadata.ts --
// app/blog/[slug]/[postSlug]/metadata.ts
import type { Metadata } from "next"

export const blogPostMetadata: Metadata = {
  title: "Artikel Blog | OEM-X",
  description: "Baca artikel menarik di OEM-X Blog.",
  robots: {
    index: true,  // ✅ default diindeks, kalau post not found → generateMetadata override ke noindex
    follow: true,
  },
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/[slug]/[postSlug]/page.tsx --
// src/app/blog/[slug]/[postSlug]/page.tsx
import React from "react"
import Link from "next/link"
import { notFound } from "next/navigation"
import { request } from "../../../../lib/allauth"
import { ImageViewer } from "../../../../components/wysiwyg/ImageViewer"
import { Descendant, Text } from "slate"

// ----- Utility untuk render read-only Slate content -----
function renderNode(node: Descendant, key: number, fallbackAlt?: string): React.ReactNode {
  // Text node
  if (Text.isText(node)) {
    let children: React.ReactNode = node.text
    if (node.bold) children = <strong>{children}</strong>
    if (node.italic) children = <em>{children}</em>
    if (node.underline) children = <u>{children}</u>
    if (node.code) children = <code>{children}</code>
    return <span key={key}>{children}</span>
  }

  // Children
  const children = node.children.map((n, i) => renderNode(n, i, fallbackAlt))

  // Style align
  const style: React.CSSProperties = {}
  if ("align" in node && node.align) style.textAlign = node.align as any

  // Element types
  switch (node.type) {
    case "heading-one":
      return <h1 key={key} style={style}>{children}</h1>
    case "heading-two":
      return <h2 key={key} style={style}>{children}</h2>
    case "block-quote":
      return <blockquote key={key} className="blockquote" style={style}>{children}</blockquote>
    case "blockquote-footer":
      return <footer key={key} className="blockquote-footer" style={style}>{children}</footer>
    case "numbered-list":
      return <ol key={key} style={style}>{children}</ol>
    case "bulleted-list":
      return <ul key={key} style={style}>{children}</ul>
    case "list-item":
      return <li key={key} style={style}>{children}</li>
    case "code-block":
      return (
        <pre key={key} style={{ ...style, background: "#f8f9fa", padding: "0.75rem", borderRadius: "0.25rem", overflowX: "auto" }}>
          <code>{children}</code>
        </pre>
      )
    case "image":
      return (
        <ImageViewer
          key={key}
          url={(node as any).url}
          alt={(node as any).alt || fallbackAlt}
          width={(node as any).width}
          height={(node as any).height}
          align={(node as any).align}
          wrap={(node as any).wrap}
        />
      )
    default:
      return <p key={key} style={style}>{children}</p>
  }
}

// Flatten Slate content untuk metadata/deskripsi
function flattenSlateText(nodes: Descendant[]): string {
  return nodes
    .map((node: any) => {
      if ("text" in node) return node.text
      if (Array.isArray(node.children)) return flattenSlateText(node.children)
      return ""
    })
    .join(" ")
    .trim()
}

// ----- Page Component -----
export default async function BlogPostPage({ params: rawParams }: any) {
  const params = await rawParams
  const { slug, postSlug } = params

  const res = await request<any>(
    "GET",
    `/blog/public/posts/?blog=${slug}&slug=${postSlug}`
  )
  const posts = Array.isArray(res) ? res : res?.results ?? []
  const post = posts[0]

  if (!post) notFound()

  const content: Descendant[] =
    post.content && typeof post.content === "string"
      ? JSON.parse(post.content)
      : Array.isArray(post.content)
        ? post.content
        : []

  return (
    <div className="container py-5" style={{ maxWidth: "900px" }}>
      <h1 className="display-5 fw-bold mb-3">{post.title}</h1>

      <div className="text-muted mb-4">
        <small>
          Dipublikasikan{" "}
          {new Date(post.published_at).toLocaleDateString("id-ID", {
            day: "numeric",
            month: "long",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
          })}{" "}
          oleh <strong>{post.author_email}</strong>
        </small>
      </div>

      {/* Cover Image */}
      {post.cover_image && (
        <div className="mb-4 text-center">
          <img
            src={post.cover_image}
            alt={post.title}
            className="img-fluid rounded w-100 w-xl-75 w-xxl-50"
            style={{
              maxHeight: "75vh",
              objectFit: "contain",
              backgroundColor: "#000",
              margin: "0 auto",
              display: "block",
            }}
          />
        </div>
      )}

      <article className="fs-5 lh-lg">
        {content.map((node, i) => renderNode(node, i, post.title))}
      </article>

      <hr className="my-5" />

      <div className="d-flex justify-content-between align-items-center">
        <Link href={`/blog/${slug}`} className="btn btn-outline-secondary">
          ← Kembali ke Blog
        </Link>
        <Link href={`/`} className="btn btn-outline-primary">
          🏠 Halaman Utama
        </Link>
        <div className="text-muted small">
          Bagikan artikel ini jika bermanfaat ✨
        </div>
      </div>
    </div>
  )
}

// ----- Metadata -----
export async function generateMetadata({ params: rawParams }: any) {
  const params = await rawParams
  const { slug, postSlug } = params

  const res = await request<any>(
    "GET",
    `/blog/public/posts/?blog=${slug}&slug=${postSlug}`
  )
  const posts = Array.isArray(res) ? res : res?.results ?? []
  const post = posts[0]

  if (!post) return { title: "Artikel Tidak Ditemukan" }

  const content: Descendant[] =
    post.content && typeof post.content === "string"
      ? JSON.parse(post.content)
      : Array.isArray(post.content)
        ? post.content
        : []

  const postContent = flattenSlateText(content).slice(0, 200)

  return {
    title: post.title,
    description: postContent || "Artikel di OEM-X Blog",
    alternates: { canonical: `https://oem-x.my.id/blog/${slug}/${postSlug}` },
    openGraph: {
      title: post.title,
      description: postContent || "",
      url: `https://oem-x.my.id/blog/${slug}/${postSlug}`,
      type: "article",
      images: [{ url: post.cover_image || "https://oem-x.my.id/next.svg", width: 1200, height: 630, alt: post.title }],
    },
    twitter: {
      card: "summary_large_image",
      title: post.title,
      description: postContent || "",
      images: [post.cover_image || "https://oem-x.my.id/next.svg"],
    },
  }
}


----------------------------------------


-- /nextjs_oem_frontend/app/blog/[slug]/[postSlug]/layout.tsx --
// app/blog/[slug]/[postSlug]/layout.tsx
import React from "react"
import { blogPostMetadata } from "./metadata"

export const metadata = blogPostMetadata

export default function BlogPostLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <>{children}</>
}


----------------------------------------

