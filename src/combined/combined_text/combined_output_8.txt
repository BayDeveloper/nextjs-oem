
-- /nextjs_oem_frontend/app/account/password/change/page.tsx --
// app/account/password/change/page.tsx
'use client'

import dynamic from 'next/dynamic'

// ⛔️ Hindari SSR agar tidak terjadi hydration mismatch
const ChangePasswordClient = dynamic(() => import('./ChangePasswordClient'), {
  ssr: false,
})

export default ChangePasswordClient


----------------------------------------


-- /nextjs_oem_frontend/app/account/password/change/ChangePasswordClient.tsx --
// app/account/password/change/ChangePasswordClient.tsx
'use client'

import React, { useEffect, useState } from 'react'
import { useAuth, withAuth, withReauth } from '../../../../auth/AuthContext'
import { ClientOnly } from '../../../../lib/helpers/ClientOnly'
import { changePassword } from '../../../../lib/allauth'
import { useRequest } from '../../../../lib/helpers/useRequest'
import { mutate } from 'swr'

function ChangePasswordPage() {
  const { user } = useAuth()
  const [currentPassword, setCurrentPassword] = useState('')
  const [newPassword, setNewPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [success, setSuccess] = useState<string | null>(null)
  const [justChanged, setJustChanged] = useState(false)

  const { trigger, error, loading } = useRequest(changePassword)

  const hasUsablePassword = !!user?.has_usable_password

  useEffect(() => {
    if (justChanged) {
      const timer = setTimeout(() => {
        setSuccess(null)
      }, 2500)
      return () => clearTimeout(timer)
    }
  }, [justChanged])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setSuccess(null)

    if (newPassword.length < 8) {
      return alert('Password baru minimal 8 karakter.')
    }

    if (newPassword !== confirmPassword) {
      return alert('Konfirmasi password tidak cocok.')
    }

    const res = await trigger({
      current_password: hasUsablePassword ? currentPassword : '',
      new_password: newPassword,
    })

    if (res?.status === 200) {
      await mutate('/auth/session') // ✅ refresh metode auth terbaru
      setSuccess('Password berhasil diubah.')
      setCurrentPassword('')
      setNewPassword('')
      setConfirmPassword('')
      setJustChanged(true)
    }
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 480 }}>
      <h2>Ubah Password</h2>
      <form onSubmit={handleSubmit}>
        {hasUsablePassword && (
          <div className="mb-3">
            <label htmlFor="currentPassword" className="form-label">Password Saat Ini</label>
            <input
              type="password"
              id="currentPassword"
              className="form-control"
              value={currentPassword}
              onChange={(e) => setCurrentPassword(e.target.value)}
              required
              disabled={loading}
            />
          </div>
        )}

        <div className="mb-3">
          <label htmlFor="newPassword" className="form-label">Password Baru</label>
          <input
            type="password"
            id="newPassword"
            className="form-control"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
            disabled={loading}
          />
        </div>

        <div className="mb-3">
          <label htmlFor="confirmPassword" className="form-label">Konfirmasi Password Baru</label>
          <input
            type="password"
            id="confirmPassword"
            className="form-control"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
            disabled={loading}
          />
        </div>

        {error && <div className="alert alert-danger">{error}</div>}
        {success && <div className="alert alert-success">{success}</div>}

        <button type="submit" className="btn btn-primary" disabled={loading}>
          {loading ? 'Menyimpan...' : 'Simpan'}
        </button>
      </form>
    </div>
  )
}

// 💡 Fallback loading UI
const Fallback = (
  <div className="container mt-5" style={{ maxWidth: 480 }}>
    <h2>Ubah Password</h2>
    <form>
      <div className="mb-3">
        <label className="form-label placeholder-glow">Password Saat Ini</label>
        <div className="form-control placeholder-glow" />
      </div>

      <div className="mb-3">
        <label className="form-label placeholder-glow">Password Baru</label>
        <div className="form-control placeholder-glow" />
      </div>

      <div className="mb-3">
        <label className="form-label placeholder-glow">Konfirmasi Password Baru</label>
        <div className="form-control placeholder-glow" />
      </div>

      <div className="d-grid">
        <button className="btn btn-primary disabled placeholder-glow">
          Menyimpan...
        </button>
      </div>
    </form>
  </div>
)

// ✅ Gunakan HOC + ClientOnly agar aman dari SSR mismatch
const ProtectedChangePassword = withAuth(
  withReauth(ChangePasswordPage, '/account/reauthenticate', Fallback),
  '/account/login',
  Fallback
)

export default function SecureChangePassword() {
  return (
    <ClientOnly>
      <ProtectedChangePassword />
    </ClientOnly>
  )
}


----------------------------------------

