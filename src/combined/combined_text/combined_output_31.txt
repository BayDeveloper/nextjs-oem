
-- /nextjs_oem_frontend/components/wysiwyg/renderers.tsx --
import React from "react";
import { Descendant, Text } from "slate";
import { RenderElementProps, RenderLeafProps } from "slate-react";
import { ImageElement } from "./ImageElement";
import { ImageViewerEditorLike } from "./ImageViewerEditorLike";
import type { ImageElementNode } from "./custom-types";

export const EMPTY_VALUE: Descendant[] = [
  { type: "paragraph", children: [{ text: "" }] },
];

// =============================
// Editor Rendering (Editable)
// =============================
export function renderLeaf({ attributes, children, leaf }: RenderLeafProps) {
  if (leaf.bold) children = <strong>{children}</strong>;
  if (leaf.code) children = <code>{children}</code>;
  if (leaf.italic) children = <em>{children}</em>;
  if (leaf.underline) children = <u>{children}</u>;
  return <span {...attributes}>{children}</span>;
}

export function renderElement({
  attributes,
  children,
  element,
}: RenderElementProps) {
  const style: React.CSSProperties = {};
  if ("align" in element && element.align) style.textAlign = element.align as any;

  switch (element.type) {
    case "heading-one":
      return <h1 style={style} {...attributes}>{children}</h1>;
    case "heading-two":
      return <h2 style={style} {...attributes}>{children}</h2>;
    case "block-quote":
      return <blockquote className="blockquote" style={style} {...attributes}>{children}</blockquote>;
    case "blockquote-footer":
      return <footer className="blockquote-footer" style={style} {...attributes}>{children}</footer>;
    case "numbered-list":
      return <ol style={style} {...attributes}>{children}</ol>;
    case "bulleted-list":
      return <ul style={style} {...attributes}>{children}</ul>;
    case "list-item":
      return <li style={style} {...attributes}>{children}</li>;
    case "code-block":
      return (
        <pre
          style={{
            ...style,
            background: "#f8f9fa",
            padding: "0.75rem",
            borderRadius: "0.25rem",
            overflowX: "auto",
          }}
          {...attributes}
        >
          <code>{children}</code>
        </pre>
      );
    case "image":
      return (
        <figure
          style={{
            textAlign: (element as any).align ?? "center",
            margin: "1em 0",
          }}
          {...attributes}
        >
          <ImageElement
            element={element as ImageElementNode}
            attributes={attributes}
            isEditing
          >
            {children}
          </ImageElement>
        </figure>
      );
    case "caption":
      return (
        <figcaption
          style={{
            fontSize: "0.9em",
            color: "#6c757d",
            textAlign: "center",
            marginTop: "0.5em",
            marginBottom: "1em",
          }}
          {...attributes}
        >
          {children}
        </figcaption>
      );
    default:
      return <p style={style} {...attributes}>{children}</p>;
  }
}

// =============================
// Viewer Rendering (Read-only)
// =============================
export function renderNode(
  node: Descendant,
  key: number,
  fallbackAlt?: string
): React.ReactNode {
  if (Text.isText(node)) {
    let children: React.ReactNode = node.text;
    if (node.bold) children = <strong>{children}</strong>;
    if (node.italic) children = <em>{children}</em>;
    if (node.underline) children = <u>{children}</u>;
    if (node.code) children = <code>{children}</code>;
    return <span key={key}>{children}</span>;
  }

  const childrenNodes = node.children.map((n, i) =>
    renderNode(n, i, fallbackAlt)
  );
  const style: React.CSSProperties = {};
  if ("align" in node && node.align) style.textAlign = node.align as any;

  switch (node.type) {
    case "heading-one":
      return <h1 key={key} style={style}>{childrenNodes}</h1>;
    case "heading-two":
      return <h2 key={key} style={style}>{childrenNodes}</h2>;
    case "block-quote":
      return <blockquote key={key} className="blockquote" style={style}>{childrenNodes}</blockquote>;
    case "blockquote-footer":
      return <footer key={key} className="blockquote-footer" style={style}>{childrenNodes}</footer>;
    case "numbered-list":
      return <ol key={key} style={style}>{childrenNodes}</ol>;
    case "bulleted-list":
      return <ul key={key} style={style}>{childrenNodes}</ul>;
    case "list-item":
      return <li key={key} style={style}>{childrenNodes}</li>;
    case "code-block":
      return (
        <pre
          key={key}
          style={{
            ...style,
            background: "#f8f9fa",
            padding: "0.75rem",
            borderRadius: "0.25rem",
            overflowX: "auto",
          }}
        >
          <code>{childrenNodes}</code>
        </pre>
      );
    case "image": {
      const imgNode = node as ImageElementNode;
      const captionNode = node.children.find((c: any) => c.type === "caption");

      return (
        <figure key={key} style={{ textAlign: imgNode.align ?? "center", margin: "1em 0" }}>
          <ImageViewerEditorLike
            url={imgNode.url}
            alt={imgNode.alt || fallbackAlt}
            width={imgNode.width}
            height={imgNode.height}
            align={imgNode.align || "center"}
          />
          {captionNode && (
            <figcaption
              style={{
                fontSize: "0.9em",
                color: "#6c757d",
                textAlign: "center",
                marginTop: "0.5em",
                marginBottom: "1em",
              }}
            >
              {renderNode(captionNode as Descendant, 0, fallbackAlt)}
            </figcaption>
          )}
        </figure>
      );
    }
    case "caption":
      // Jangan render caption terpisah (sudah di-handle dalam image)
      return null;
    default:
      return <p key={key} style={style}>{childrenNodes}</p>;
  }
}


----------------------------------------

