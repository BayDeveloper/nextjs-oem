
-- /nextjs_oem_frontend/blog/components/MembershipTable.tsx --
"use client"

import React from "react"
import { useParams } from "next/navigation"
import AddMembershipForm from "./AddMembershipForm"
import { useMemberships } from "../hooks/useMemberships"
import BlogRoleSelect from "./BlogRoleSelect"
import { request } from "../../lib/allauth"

function RoleBadge({ role }: { role: string }) {
  const colors: Record<string, string> = {
    admin: "badge bg-danger",
    editor: "badge bg-primary",
    author: "badge bg-success",
    reader: "badge bg-secondary",
  }
  return <span className={colors[role] || "badge bg-light"}>{role}</span>
}

export default function MembershipTable() {
  const { id } = useParams()
  const blogId = id as string
  const { memberships, isLoading, isError, mutate } = useMemberships(blogId)

  async function handleRoleChange(membershipId: number, newRole: string) {
    await request("PATCH", `/blog/memberships/${membershipId}/`, { role: newRole })
    mutate()
  }

  async function handleRemove(membershipId: number) {
    await request("DELETE", `/blog/memberships/${membershipId}/`)
    mutate()
  }

  if (isLoading) return <p>Loading memberships...</p>
  if (isError) return <p className="text-danger">Gagal memuat membership</p>

  return (
    <div>
      <AddMembershipForm blogId={blogId} onAdded={mutate} />

      <table className="table table-hover mt-3">
        <thead className="table-light">
          <tr>
            <th>Email</th>
            <th>Role</th>
            <th>Added At</th>
            <th>Aksi</th>
          </tr>
        </thead>
        <tbody>
          {memberships.map((m) => (
            <tr key={m.id}>
              <td>{m.user_email}</td>
              <td>
                <RoleBadge role={m.role} />
              </td>
              <td>{new Date(m.added_at).toLocaleString("id-ID", {
                dateStyle: "medium",
                timeStyle: "short",
              })}</td>
              <td>
                <div className="d-flex gap-2">
                  <BlogRoleSelect
                    value={m.role}
                    onChange={(val) => handleRoleChange(m.id, val)}
                  />
                  <button
                    className="btn btn-sm btn-outline-danger"
                    onClick={() => handleRemove(m.id)}
                  >
                    Hapus
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/blog/components/BlogForm.tsx --
// blog/components/BlogForm.tsx
"use client"

import React, { useState } from "react"
import { request } from "../../lib/allauth"
import type { Blog } from "../types"

type Props = {
  initial?: Partial<Blog>
  onSuccess?: (blog: Blog) => void
  method?: "POST" | "PATCH" | "PUT"
}

export default function BlogForm({ initial, onSuccess, method }: Props) {
  const [title, setTitle] = useState(initial?.title ?? "")
  const [description, setDescription] = useState(initial?.description ?? "")
  const [submitting, setSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    setSubmitting(true)
    setError(null)
    try {
      let blog: Blog
      if (initial?.id) {
        blog = await request<Blog>(
          method ?? "PATCH",
          `/blog/blogs/${initial.id}/`,
          { title, description }
        )
      } else {
        blog = await request<Blog>(
          "POST",
          "/blog/blogs/",
          { title, description }
        )
      }
      onSuccess?.(blog)
    } catch (err: any) {
      const msg = err?.detail || err?.message || "Gagal menyimpan blog."
      setError(typeof msg === "string" ? msg : JSON.stringify(msg))
    } finally {
      setSubmitting(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="card">
      <div className="card-body">
        <div className="mb-3">
          <label className="form-label">Title</label>
          <input
            className="form-control"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
            maxLength={255}
          />
        </div>

        <div className="mb-3">
          <label className="form-label">Description</label>
          <textarea
            className="form-control"
            rows={4}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
        </div>

        {error && <div className="alert alert-danger">{error}</div>}

        <div className="d-flex gap-2">
          <button className="btn btn-primary" type="submit" disabled={submitting}>
            {submitting ? "Saving..." : "Save"}
          </button>
          {initial?.id && (
            <a href={`/admin/blog/${initial.id}/${initial.slug}/`} className="btn btn-outline-secondary">
              Cancel
            </a>
          )}
        </div>
      </div>
    </form>
  )
}


----------------------------------------

