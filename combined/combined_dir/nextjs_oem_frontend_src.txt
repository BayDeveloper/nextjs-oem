
-- /nextjs_oem_frontend/src/utils/cookies.ts --
'use client'

export async function waitForSessionCookie(timeout = 1000): Promise<boolean> {
  let waited = 0
  while (!document.cookie.includes('sessionid') && waited < timeout) {
    await new Promise((res) => setTimeout(res, 50))
    waited += 50
  }
  return document.cookie.includes('sessionid')
}


----------------------------------------


-- /nextjs_oem_frontend/src/utils/useRecentlyReauthenticated.ts --
import { useAuth } from '../auth/AuthContext'

export function useRecentlyReauthenticated(): boolean {
  const { user, methods, lastReauthenticatedAt } = useAuth()

  // ✅ Bypass reauth kalau user memang tidak punya password
  if (user && user.has_usable_password === false) {
    return true
  }

  const FIVE_MINUTES = 5 * 60 * 1000
  const reauthenticated = methods?.some(m => m.reauthenticated) || false

  if (reauthenticated) return true
  if (!lastReauthenticatedAt) return false

  return Date.now() - new Date(lastReauthenticatedAt).getTime() < FIVE_MINUTES
}


----------------------------------------


-- /nextjs_oem_frontend/src/utils/isConfigReady.ts --
import { ConfigType } from '../lib/allauth'

export function isConfigReady(config: ConfigType | null | undefined): boolean {
  return !!(
    config &&
    typeof config === 'object' &&
    Object.keys(config).length > 0 &&
    config.account?.authentication_method
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/utils/reauth.ts --
// utils/reauth.ts
import { useAuth } from "../auth/AuthContext"

export function useRecentlyReauthenticated(): boolean {
  const { user, methods, lastReauthenticatedAt } = useAuth()

  // ✅ Bypass reauth kalau user memang tidak punya password
  if (user && user.has_usable_password === false) {
    return true
  }

  const FIVE_MINUTES = 5 * 60 * 1000
  const reauthenticated = methods?.some((m) => m.reauthenticated) || false

  if (reauthenticated) return true
  if (!lastReauthenticatedAt) return false

  return Date.now() - new Date(lastReauthenticatedAt).getTime() < FIVE_MINUTES
}



----------------------------------------


-- /nextjs_oem_frontend/src/utils/upload.ts --
// utils/upload.ts
import { request } from "../lib/allauth"

export async function uploadImage(file: File): Promise<string> {
  const formData = new FormData()
  formData.append("file", file)

  const data = await request<{ url: string }>(
    "POST",
    "/blog/uploads/image/",
    formData
  )

  return data.url
}


----------------------------------------


-- /nextjs_oem_frontend/src/lib/django.ts --
// lib/django.ts
export function getCSRFToken(): string | null {
  if (typeof document === 'undefined') return null

  const getCookie = (name: string): string | null => {
    const cookies = document.cookie.split(';')
    for (const cookie of cookies) {
      const trimmed = cookie.trim()
      if (trimmed.startsWith(`${name}=`)) {
        return decodeURIComponent(trimmed.substring(name.length + 1))
      }
    }
    return null
  }

  return getCookie('csrftoken')
}



----------------------------------------


-- /nextjs_oem_frontend/src/lib/allauth.ts --
// lib/allauth.ts
import { getCSRFToken } from './django'

export const Client = Object.freeze({
  BROWSER: 'browser' as const
})

export const settings = {
  client: Client.BROWSER,
  baseUrl: `https://backend.oem-x.my.id/_allauth/${Client.BROWSER}/v1`,
  withCredentials: true
}

const ACCEPT_JSON = {
  accept: 'application/json'
}

export const AuthProcess = Object.freeze({
  LOGIN: 'login',
  CONNECT: 'connect',
})

export const URLs = Object.freeze({
  CSRF: '/auth/csrf',
  CONFIG: '/config',
  SESSION: '/auth/session',
  LOGIN: '/auth/login',
  LOGOUT: '/auth/session',
  SIGNUP: '/auth/signup',
  REAUTHENTICATE: '/auth/reauthenticate',
  VERIFY_EMAIL: '/auth/email/verify',
  REQUEST_PASSWORD_RESET: '/auth/password/request',
  RESET_PASSWORD: '/auth/password/reset',
  PROVIDER_SIGNUP: '/auth/provider/signup',
  REDIRECT_TO_PROVIDER: '/auth/provider/redirect',
  PROVIDER_TOKEN: '/auth/provider/token',
  CHANGE_PASSWORD: '/account/password/change',
  // Auth: Sessions
  SESSIONS: '/auth/sessions',
  EMAIL: '/account/email',
  PROVIDERS: '/account/providers',

  // Invitations
  // Email signup requests
  EMAIL_REQUEST: '/invitations/email-requests/',
  EMAIL_REQUESTS_ADMIN: '/invitations/email-requests/admin/',
  EMAIL_REQUEST_UPDATE: (id: number) => `/invitations/email-requests/admin/${id}/`,
  EMAIL_REQUEST_DELETE: (id: number) => `/invitations/email-requests/admin/${id}/delete/`,

  // Invitations
  LIST_INVITATIONS: '/invitations/',
  CREATE_INVITATION: '/invitations/create/',
  RETRIEVE_INVITATION: (id: number) => `/invitations/${id}/`,
  UPDATE_INVITATION: (id: number) => `/invitations/${id}/update/`,
  DELETE_INVITATION: (id: number) => `/invitations/${id}/delete/`,
  RESEND_INVITATION: (id: number) => `/invitations/${id}/resend/`,
  VALIDATE_TOKEN: '/invitations/validate-token/',
  USE_INVITATION: (id: number) => `/invitations/${id}/use/`,

  // Invitation reminders
  LIST_REMINDERS: '/invitations/reminders/',
  SUBMIT_REMINDER: '/invitations/reminders/submit/',

  // Invitation SIGNUP
  SIGNUP_INVITATION: '/invitations/signup',
} as const)

export const Flows = Object.freeze({
  LOGIN: 'login',
  LOGIN_BY_CODE: 'login_by_code',
  MFA_AUTHENTICATE: 'mfa_authenticate',
  MFA_REAUTHENTICATE: 'mfa_reauthenticate',
  MFA_TRUST: 'mfa_trust',
  MFA_WEBAUTHN_SIGNUP: 'mfa_signup_webauthn',
  PASSWORD_RESET_BY_CODE: 'password_reset_by_code',
  PROVIDER_REDIRECT: 'provider_redirect',
  PROVIDER_SIGNUP: 'provider_signup',
  REAUTHENTICATE: 'reauthenticate',
  SIGNUP: 'signup',
  VERIFY_EMAIL: 'verify_email',
})

export const AuthenticatorType = Object.freeze({
  TOTP: 'totp',
  RECOVERY_CODES: 'recovery_codes',
  WEBAUTHN: 'webauthn'
})

export interface ConfigResponse {
  status: number
  data: {
    account?: {
      authentication_method?: string
      is_open_for_signup?: boolean
      email_verification?: string
      email_verification_by_code_enabled?: boolean
      [key: string]: unknown
    }
    socialaccount?: {
      providers?: {
        id: string
        name?: string
        [key: string]: unknown
      }[]
    }
    [key: string]: unknown
  }
}


export interface AuthResponse {
  status: number
  meta?: {
    is_authenticated?: boolean
    session_token?: string
    access_token?: string
    [key: string]: unknown
  }
  user?: Record<string, unknown>
  detail?: string
  errors?: Record<string, string[]>
  data?: {
    user?: Record<string, unknown>
    flows?: Flow[]
    methods?: Method[]
    [key: string]: unknown
  }
  [key: string]: unknown
}

interface Flow {
  id: string
  providers?: string[]
  [key: string]: unknown
}

interface Method {
  method: string
  at: number
  reauthenticated?: boolean
  [key: string]: unknown
}

export async function getAuthSSR(sessionid: string): Promise<AuthResponse> {
  const base = process.env.BACKEND_BASE_URL || 'https://backend.oem-x.my.id'
  const resp = await fetch(`${base}/_allauth/browser/v1/auth/session`, {
    headers: { Cookie: `sessionid=${sessionid}` },
    cache: 'no-store',
  })
  return await resp.json()
}

export async function getConfigSSR() {
  const base = process.env.BACKEND_BASE_URL || 'https://backend.oem-x.my.id'
  const res = await fetch(`${base}/_allauth/browser/v1/config`, {
    headers: {
      Accept: 'application/json',
    },
    cache: 'no-store',
  })
  return res.json()
}

function buildHeaders(path: string, extraHeaders: Record<string, string> = {}): Record<string, string> {
  const headers: Record<string, string> = {
    ...ACCEPT_JSON,
    ...extraHeaders
  }

  if (path !== URLs.CSRF && path !== URLs.CONFIG && typeof window !== 'undefined') {
    const csrf = getCSRFToken()
    if (csrf) headers['X-CSRFToken'] = csrf
  }

  return headers
}

export async function fetchCSRFToken(): Promise<void> {
  await fetch(`${settings.baseUrl}${URLs.CSRF}`, {
    method: 'GET',
    credentials: 'include',
    mode: 'cors',
  })
}

export async function request<T = AuthResponse>(
  method: string,
  path: string,
  data?: unknown,
  extraHeaders: Record<string, string> = {}
): Promise<T> {
  const headers: Record<string, string> = buildHeaders(path, extraHeaders)

  // CSRF injection (seperti sebelumnya)
  if (typeof window !== "undefined" && method !== "GET") {
    let csrf = getCSRFToken()
    if (!csrf) {
      console.info("[request] csrftoken belum ada, fetching...")
      try {
        await fetchCSRFToken()
        csrf = getCSRFToken()
        if (!csrf) throw new Error("csrf fetch succeeded but token still missing")
      } catch (err) {
        console.error("[request] Gagal fetch CSRF token:", err)
        throw new Error("Tidak bisa mendapatkan CSRF token.")
      }
    }
    headers["X-CSRFToken"] = csrf
  }

  const options: RequestInit = {
    method,
    headers,
    credentials: "include",
  }

  if (data !== undefined) {
    if (typeof FormData !== "undefined" && data instanceof FormData) {
      // ✅ kalau FormData, langsung assign
      options.body = data
      // penting: jangan set Content-Type manual
    } else {
      options.body = JSON.stringify(data)
      headers["Content-Type"] = "application/json"
    }
  }

  try {
    const res = await fetch(settings.baseUrl + path, options)

    if (res.status === 204) {
      return {} as T
    }

    let json: any = null
    try {
      json = await res.json()
    } catch (e) {
      if (res.ok) {
        return {} as T
      }
      throw new Error("Server response not valid JSON.")
    }

    if (!res.ok) {
      const error = new Error(json?.detail || "Terjadi kesalahan.") as Error & {
        status?: number
        data?: unknown
      }
      error.status = res.status
      error.data = json
      throw error
    }

    return json as T
  } catch (err: unknown) {
    if (typeof err === "object" && err !== null && "status" in err) {
      throw err
    }
    throw new Error("Gagal terhubung ke server atau respons tidak valid.")
  }
}

export async function getConfig(): Promise<ConfigResponse> {
  return request('GET', URLs.CONFIG)
}

export interface ConfigType {
  account?: Record<string, unknown>
  socialaccount?: {
    providers?: { id: string; name?: string }[]
  }
  usersessions?: Record<string, unknown>
  [key: string]: unknown
}

export async function fetchConfig(): Promise<ConfigType | null> {
  const res = await getConfig()
  console.log('[fetchConfig] called at:', new Date().toISOString())
  console.log('[fetchConfig] raw result:', res)
  return res.data ?? null
}

export async function getAuth(): Promise<AuthResponse> {
  return request('GET', URLs.SESSION)
}

export async function login(data: Record<string, unknown>): Promise<AuthResponse> {
  return request('POST', URLs.LOGIN, data)
}

export async function logout(): Promise<AuthResponse> {
  return request('DELETE', URLs.LOGOUT)
}

export async function signUp(data: Record<string, unknown>): Promise<AuthResponse> {
  return request('POST', URLs.SIGNUP, data)
}

export async function changePassword(data: {
  current_password: string
  new_password: string
}): Promise<AuthResponse> {
  return request('POST', URLs.CHANGE_PASSWORD, data)
}

export async function reauthenticate(data: Record<string, unknown>): Promise<AuthResponse> {
  return request('POST', URLs.REAUTHENTICATE, data)
}

export async function requestPasswordReset(email: string): Promise<AuthResponse> {
  return request('POST', URLs.REQUEST_PASSWORD_RESET, { email })
}

export async function resetPassword(data: Record<string, unknown>): Promise<AuthResponse> {
  return request('POST', URLs.RESET_PASSWORD, data)
}

export async function verifyEmail(key: string): Promise<AuthResponse> {
  return request('POST', URLs.VERIFY_EMAIL, { key })
}

export async function getEmailVerification(key: string): Promise<AuthResponse> {
  return request('GET', `${URLs.VERIFY_EMAIL}?key=${encodeURIComponent(key)}`, undefined, // backticks
    { 'X-Email-Verification-Key': key }
  );
}

export function requestEmailVerificationUnauthenticated(params: { email: string }): Promise<AuthResponse> {
  return request(
    'POST',
    '/auth/email/verify/resend',
    { email: params.email }
  )
  // Response {"status": 409} because this endpoint flow with code ("allauth openapi documentation") not link, need adjust backend ("future")
}

export function sendEmailVerification(params: { email: string }): Promise<AuthResponse> {
  return request(
    'POST', // ⬅️ Ganti jadi PUT
    '/auth/resend-verification/',
    {
      email: params.email,
    }
  )
}

export function redirectToProvider(providerId: string, callbackURL: string, process: string = AuthProcess.LOGIN): void {
  if (typeof window === 'undefined') return

  const form = document.createElement('form')
  form.method = 'POST'
  form.action = `${settings.baseUrl}${URLs.REDIRECT_TO_PROVIDER}`

  const inputs = {
    provider: providerId,
    process,
    callback_url: window.location.origin + callbackURL,
    csrfmiddlewaretoken: getCSRFToken() || '',
  }

  for (const [name, value] of Object.entries(inputs)) {
    const input = document.createElement('input')
    input.type = 'hidden'
    input.name = name
    input.value = value
    form.appendChild(input)
  }

  document.body.appendChild(form)
  form.submit()
}

export type SessionInfo = {
  id: string
  created_at: number
  ip: string
  user_agent: string
  last_seen_at?: string
  is_current: boolean
}

export async function getSessions(): Promise<{ status: number; data: SessionInfo[] }> {
  return await request('GET', URLs.SESSIONS)
}

export type SessionType = {
  id: string
  created_at: number
  ip: string
  user_agent: string
  last_seen_at?: string
  is_current: boolean
}

export async function endSessions(ids: string[]): Promise<AuthResponse> {
  return await request('DELETE', URLs.SESSIONS, { sessions: ids })
}

// Digunakan oleh endpoint /account/email
export interface EmailAddress {
  email: string
  verified: boolean
  primary: boolean
}

export async function getEmailAddresses(): Promise<{ status: number; data: EmailAddress[] }> {
  return await request('GET', URLs.EMAIL)
}

export async function addEmail(email: string): Promise<{ status: number; data: EmailAddress[] }> {
  return await request('POST', URLs.EMAIL, { email })
}

export async function requestEmailVerification(email: string): Promise<{ status: number }> {
  return await request('PUT', URLs.EMAIL, { email })
}

export async function deleteEmail(email: string): Promise<{ status: number; data: EmailAddress[] }> {
  return await request('DELETE', URLs.EMAIL, { email })
}

export async function markEmailAsPrimary(email: string): Promise<{ status: number; data: EmailAddress[] }> {
  return await request('PATCH', URLs.EMAIL, { email, primary: true })
}

// 🔹 Struktur data yang dikirim untuk signup provider
export interface ProviderSignupData {
  provider: string
  access_token?: string
  code?: string
  id_token?: string
  [key: string]: unknown
}

export interface ProviderAccount {
  uid: string
  display: string
  provider: {
    id: string
    name: string
  }
}

// ✅ Response khusus provider API (tidak extend AuthResponse)
export interface ProviderAccountResponse {
  status: number
  detail?: string
  errors?: Record<string, string[]>
  data?: ProviderAccount[]
}

// Fungsi-fungsi API sosial
export async function providerSignup(
  data: ProviderSignupData
): Promise<ProviderAccountResponse> {
  return await request<ProviderAccountResponse>('POST', URLs.PROVIDER_SIGNUP, data)
}

export async function getProviderAccounts(): Promise<ProviderAccountResponse> {
  return await request<ProviderAccountResponse>('GET', URLs.PROVIDERS)
}

export async function disconnectProviderAccount(
  providerId: string,
  accountUid: string
): Promise<ProviderAccountResponse> {
  return await request<ProviderAccountResponse>('DELETE', URLs.PROVIDERS, {
    provider: providerId,
    account: accountUid,
  })
}

// Untuk invitation only
// Email signup request
export function submitEmailRequest(email: string) {
  return request('POST', URLs.EMAIL_REQUEST, { email });
}

export async function listEmailRequests() {
  const res = await request('GET', URLs.EMAIL_REQUESTS_ADMIN);
  return res.results || res;
}
export function updateEmailRequest(id: number, data: any) {
  return request('PATCH', URLs.EMAIL_REQUEST_UPDATE(id), data);
}
export function deleteEmailRequest(id: number) {
  return request('DELETE', URLs.EMAIL_REQUEST_DELETE(id));
}

// Invitations CRUD
export function listInvitations() {
  return request('GET', URLs.LIST_INVITATIONS);
}

export function createInvitation(data: { email: string; invited_by?: string, expires_at: string }) {
  return request('POST', URLs.CREATE_INVITATION, data);
}
export function retrieveInvitation(id: number) {
  return request('GET', URLs.RETRIEVE_INVITATION(id));
}
export function updateInvitation(id: number, data: any) {
  return request('PATCH', URLs.UPDATE_INVITATION(id), data);
}
export function deleteInvitation(id: number) {
  return request('DELETE', URLs.DELETE_INVITATION(id));
}
export function resendInvitation(id: number) {
  return request('POST', URLs.RESEND_INVITATION(id));
}

export function validateToken(token: string) {
  return request('POST', URLs.VALIDATE_TOKEN, { token });
}
export function useInvitation(id: number) {
  return request('POST', URLs.USE_INVITATION(id));
}

// Reminders
export function listReminders() {
  return request('GET', URLs.LIST_REMINDERS);
}
export function submitReminder(email: string) {
  return request('POST', URLs.SUBMIT_REMINDER, { email });
}

// Register With Invitation
export function registerWithInvitation(data: {
  email: string;
  password1: string;
  password2: string;
  token: string;
}) {
  // endpoint django-allauth headless ketika SIGNUP_DISABLED=False,
  // atau custom CustomRegisterView ketika SIGNUP_DISABLED=True
  return request('POST', URLs.SIGNUP_INVITATION, data);
}


----------------------------------------


-- /nextjs_oem_frontend/src/lib/hooks/useSessions.ts --
// lib/hooks/useSessions.ts
import useSWR from 'swr'
import { getSessions } from '../allauth'

export function useSessions() {
  return useSWR('/auth/sessions', async () => await getSessions(), {
    revalidateOnFocus: true
  })
}


----------------------------------------


-- /nextjs_oem_frontend/src/lib/hooks/useAuthConfig.ts --
// lib/hooks/useAuthConfig.ts
import useSWR from 'swr'
import { getConfig, ConfigResponse } from '../allauth'

export function useAuthConfig() {
  return useSWR<ConfigResponse>('/auth/config', getConfig, {
    revalidateOnFocus: false,
    dedupingInterval: 5 * 60 * 1000,
  })
}


----------------------------------------


-- /nextjs_oem_frontend/src/lib/hooks/useInvitation.ts --
// src/lib/hooks/useInvitation.ts
import { useState, useCallback } from 'react';
import * as API from '../../lib/allauth';

export interface InvitationValidationResponse {
  id: number;
  email: string;
  token: string;
  expires_at: string;
  used: boolean;
  [key: string]: any;
}

export function useInvitation() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const sendEmailRequest = useCallback(async (email: string) => {
    setLoading(true);
    setError(null);
    try {
      return await API.submitEmailRequest(email);
    } catch (e: any) {
      setError(e.data?.detail || e.message);
      return undefined;
    } finally {
      setLoading(false);
    }
  }, []);

  const validateToken = useCallback(async (token: string): Promise<InvitationValidationResponse | undefined> => {
    setLoading(true);
    setError(null);
    try {
      return await API.validateToken(token);
    } catch (e: any) {
      setError(e.data?.detail || e.message);
      return undefined;
    } finally {
      setLoading(false);
    }
  }, []);

  // 2) Signup dengan invitation
  const signupWithToken = useCallback(async ({
    email, password1, password2, token
  }: {
    email: string;
    password1: string;
    password2: string;
    token: string;
  }) => {
    setLoading(true); setError(null);
    try {
      // a) Panggil endpoint headless signup
      const signupResp = await API.registerWithInvitation({ email, password1, password2, token });
      // b) Jika signup berhasil, tandai token sebagai used
      if (signupResp && signupResp.detail) {
        await API.useInvitation(signupResp.id);   // atau panggil useInvitation(validateResp.id)
      }
      return signupResp;
    } catch (e: any) {
      setError(e.data?.detail || e.message);
      return undefined;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    loading,
    error,
    sendEmailRequest,
    validateToken,
    signupWithToken,
  };
}


----------------------------------------


-- /nextjs_oem_frontend/src/lib/hooks/useProviderAccounts.ts --
// lib/hooks/useProviderAccounts.ts
import useSWR from 'swr'
import { getProviderAccounts } from '../allauth'

export function useProviderAccounts() {
  return useSWR('/account/provider', getProviderAccounts)
}


----------------------------------------


-- /nextjs_oem_frontend/src/lib/hooks/useEmailAddresses.ts --
// lib/hooks/useEmailAddresses.ts
import useSWR from 'swr'
import { getEmailAddresses } from '../allauth'

export function useEmailAddresses() {
  return useSWR('/auth/email', getEmailAddresses)
}


----------------------------------------


-- /nextjs_oem_frontend/src/lib/helpers/ClientOnly.tsx --
// lib/helpers/ClientOnly.tsx
'use client'

import React, { useEffect, useState } from 'react'

export function ClientOnly({ children }: { children: React.ReactNode }) {
  const [hasMounted, setHasMounted] = useState(false)

  useEffect(() => {
    setHasMounted(true)
  }, [])

  if (!hasMounted) return null
  return <>{children}</>
}


----------------------------------------


-- /nextjs_oem_frontend/src/lib/helpers/withSafeRender.tsx --
// === src/lib/helpers/withSafeRender.tsx ===
'use client'

import React, { JSX } from 'react'

/**
 * HOC untuk menunda render komponen sampai kondisi isReady() terpenuhi.
 * @param Component Komponen React yang ingin dibungkus.
 * @param isReady   Fungsi yang mengembalikan boolean; render hanya ketika true.
 * @param Fallback  Konten yang dirender sementara isReady() masih false.
 */
export function withSafeRender<T extends JSX.IntrinsicAttributes>(
  Component: React.ComponentType<T>,
  isReady: () => boolean,
  Fallback: React.ReactNode = <p>Memuat...</p>
) {
  return function WrappedComponent(props: T) {
    // Jika belum siap, tampilkan fallback
    if (!isReady()) {
      return <>{Fallback} </>
    }
    // Setelah siap, render komponen utama
    return <Component {...props} />
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/lib/helpers/useRequest.ts --
// lib/helpers/useRequest.ts
import { useState, useCallback } from 'react';

type RequestFn<T, A extends unknown[]> = (...args: A) => Promise<T>;

// K: tipe ID bisa number atau string tergantung kebutuhan
export function useRequest<
  T,
  A extends unknown[] = unknown[],
  K extends number | string = number
>(
  fn: RequestFn<T, A>,
  options?: { idIndex?: number } // index argumen yang mengandung ID
) {
  const [error, setError] = useState<string | null>(null);
  const [loadingId, setLoadingId] = useState<K | null>(null);

  const trigger = useCallback(
    async (...args: A): Promise<T | null> => {
      setError(null);

      // Tangkap ID dari argumen kalau ada
      if (typeof options?.idIndex === 'number') {
        const maybeId = args[options.idIndex] as K;
        if (maybeId !== undefined) {
          setLoadingId(maybeId);
        }
      } else {
        // fallback: pakai 'GLOBAL' sebagai indikator loading umum
        setLoadingId('GLOBAL' as K);
      }

      try {
        const resp = await fn(...args);
        return resp;
      } catch (err) {
        const e = err as { message?: string; data?: { detail?: string } };
        const msg =
          e?.data?.detail ||
          e?.message ||
          'Terjadi kesalahan. Coba lagi nanti.';
        setError(msg);
        return null;
      } finally {
        setLoadingId(null);
      }
    },
    [fn, options?.idIndex]
  );

  return { trigger, error, loadingId };
}


----------------------------------------


-- /nextjs_oem_frontend/src/auth/useLogout.ts --
'use client'

import { useCallback, useState, useEffect } from 'react'
import { fetchCSRFToken, logout } from '../lib/allauth'
import { useAuth } from './AuthContext'
import { useRouter } from 'next/navigation'
import { mutate } from 'swr'

type LogoutError = {
  status?: number
  [key: string]: unknown
}

export function useLogout(redirectTo: string = '/account/login') {
  const [logoutRequested, setLogoutRequested] = useState(false)
  const { isAuthenticated, loading } = useAuth()
  const router = useRouter()

  const triggerLogout = useCallback(async () => {
    try {
      await fetchCSRFToken()
      await logout()
    } catch (err: unknown) {
      const error = err as LogoutError
      if (error.status !== 401) {
        console.error('Logout error:', error)
      }
    } finally {
      await mutate('/auth/session', null, false)
      setLogoutRequested(true)
    }
  }, [])

  useEffect(() => {
    if (!loading && !isAuthenticated && logoutRequested) {
      router.replace(redirectTo)
    }
  }, [loading, isAuthenticated, logoutRequested, router, redirectTo])

  return { triggerLogout, logoutRequested }
}


----------------------------------------


-- /nextjs_oem_frontend/src/auth/useCSRF.ts --
// src/auth/useCSRF.ts
"use client";

import useSWR from "swr";

// Gunakan fetcher default dari SWRConfig
export function useCSRF() {
  return useSWR(
    "/_allauth/browser/v1/auth/csrf",
    (url: string) => fetch(url, { credentials: "include" }),  // hanya perlu fetch saja
    {
      revalidateOnFocus: false,
      dedupingInterval: 5 * 60 * 1000,  // satu kali fetch tiap 5 menit
    }
  );
}


----------------------------------------


-- /nextjs_oem_frontend/src/auth/routing.ts --
// auth/routing.ts
import { AuthenticatorType, AuthResponse, Flows } from "../lib/allauth";

const flow2path: Record<string, string> = {
  [Flows.LOGIN]: '/account/login',
  [Flows.LOGIN_BY_CODE]: '/account/login/code/confirm',
  [Flows.SIGNUP]: '/account/signup',
  [Flows.VERIFY_EMAIL]: '/account/verify-email',
  [Flows.PASSWORD_RESET_BY_CODE]: '/account/password/reset/confirm',
  [Flows.PROVIDER_SIGNUP]: '/account/provider/signup',
  [Flows.REAUTHENTICATE]: '/account/reauthenticate',
  [Flows.MFA_TRUST]: '/account/2fa/trust',
  [`${Flows.MFA_AUTHENTICATE}:${AuthenticatorType.TOTP}`]: '/account/authenticate/totp',
  [`${Flows.MFA_AUTHENTICATE}:${AuthenticatorType.RECOVERY_CODES}`]: '/account/authenticate/recovery-codes',
  [`${Flows.MFA_AUTHENTICATE}:${AuthenticatorType.WEBAUTHN}`]: '/account/authenticate/webauthn',
  [`${Flows.MFA_REAUTHENTICATE}:${AuthenticatorType.TOTP}`]: '/account/reauthenticate/totp',
  [`${Flows.MFA_REAUTHENTICATE}:${AuthenticatorType.RECOVERY_CODES}`]: '/account/reauthenticate/recovery-codes',
  [`${Flows.MFA_REAUTHENTICATE}:${AuthenticatorType.WEBAUTHN}`]: '/account/reauthenticate/webauthn',
  [Flows.MFA_WEBAUTHN_SIGNUP]: '/account/signup/passkey/create',
}

type FlowType = {
  id: string
  types?: string[]
  is_pending?: boolean
}

export function pathForFlow(flow: FlowType, typ?: string): string {
  let key = flow.id
  if (typeof flow.types !== 'undefined') {
    typ = typ ?? flow.types[0]
    key = `${key}:${typ}`
  }
  const path = flow2path[key] ?? flow2path[flow.id]
  if (!path) {
    throw new Error(`Unknown path for flow: ${flow.id}`)
  }
  return path
}

export function pathForPendingFlow(auth?: AuthResponse | null): string | null {
  const flow = auth?.data?.flows?.find((f): f is FlowType => !!f?.is_pending)
  return flow ? pathForFlow(flow, undefined) : null
}


----------------------------------------


-- /nextjs_oem_frontend/src/auth/csrfMiddleware.ts --
// src/auth/csrfMiddleware.ts
import { Middleware } from "swr";
import { getCSRFToken } from "../lib/django";

// Middleware SWR untuk inject CSRF secara transparan
export const csrfMiddleware: Middleware = (useSWRNext) => {
  return (key, fetcher, config) => {
    if (!fetcher) {
      throw new Error("csrfMiddleware requires a fetcher");
    }

    const fetcherWithCSRF: typeof fetcher = async (url, init?) => {
      // Hanya fetch CSRF jika token belum ada
      let token = getCSRFToken();
      if (!token) {
        await fetch("https://backend.oem-x.my.id/_allauth/browser/v1/auth/csrf", {
          credentials: "include",
        });
        token = getCSRFToken(); // ambil ulang
      }

      const headers = {
        ...(init?.headers ?? {}),
        "X-CSRFToken": token ?? "",
      };

      return fetcher(url, {
        ...init,
        headers,
        credentials: "include",
      } as any);
    };

    return useSWRNext(key, fetcherWithCSRF, config);
  };
};


----------------------------------------


-- /nextjs_oem_frontend/src/auth/AuthContext.tsx --
"use client"

import React, {
  createContext,
  useContext,
  ReactNode,
  JSX,
  useEffect,
} from 'react'
import useSWR from 'swr'
import { useRouter, useSearchParams, usePathname } from 'next/navigation'
import { ConfigType, fetchCSRFToken, fetchConfig, getAuth } from '../lib/allauth'
import { useRecentlyReauthenticated } from '../utils/reauth'

interface Flow {
  id: string
  is_pending?: boolean
  types?: string[]
  providers?: string[]
  [key: string]: unknown
}

interface Method {
  method: string
  at: number
  reauthenticated?: boolean
  [key: string]: unknown
}

export interface AuthContextType {
  isAuthenticated: boolean
  user: Record<string, unknown> | null
  flows: Flow[]
  providers: string[]
  methods: Method[]
  tokens: {
    session_token?: string
    access_token?: string
  }
  loading: boolean
  lastReauthenticatedAt: string | null
}

const defaultAuth: AuthContextType = {
  isAuthenticated: false,
  user: null,
  flows: [],
  providers: [],
  methods: [],
  tokens: {},
  loading: true,
  lastReauthenticatedAt: null,
}

const AuthContext = createContext<AuthContextType>(defaultAuth)
const ConfigContext = createContext<ConfigType | null>(null)

interface AuthProviderProps {
  children: ReactNode
  initialAuth?: AuthContextType
  initialConfig?: ConfigType | null
}

const fetchAuth = async (): Promise<AuthContextType> => {
  await fetchCSRFToken()
  const resp = await getAuth()

  if (resp.status === 401 || !resp.meta?.is_authenticated) {
    console.warn('[fetchAuth] Tidak terautentikasi')
    return defaultAuth
  }

  const data = resp.data ?? {}
  const meta = resp.meta ?? {}

  console.log('[fetchAuth] response:', resp)

  const flows = (data.flows ?? []) as Flow[]
  const providers =
    flows.find((f) => f.id === 'provider_redirect')?.providers ?? []

  return {
    isAuthenticated: meta.is_authenticated ?? false,
    user: data.user ?? null,
    flows,
    providers,
    methods: (data.methods ?? []) as Method[],
    tokens: {
      session_token: meta.session_token,
      access_token: meta.access_token,
    },
    loading: false,
    lastReauthenticatedAt: typeof meta.last_reauthenticated_at === 'string'
      ? meta.last_reauthenticated_at
      : null,
  }
}

export function AuthProvider({
  children,
  initialAuth,
  initialConfig,
}: AuthProviderProps) {
  const {
    data: auth = initialAuth ?? defaultAuth,
    isLoading: authLoading,
  } = useSWR<AuthContextType>('/auth/session', fetchAuth, {
    fallbackData: initialAuth,
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    dedupingInterval: 60000,
    revalidateOnMount: false,
    revalidateIfStale: false,
  })

  const {
    data: config,
    isLoading: configLoading,
    error: configError,
  } = useSWR<ConfigType | null>('/auth/config', fetchConfig, {
    fallbackData: initialConfig ?? null,
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    revalidateIfStale: false,
    revalidateOnMount: false,
    dedupingInterval: 300000,
  })

  useEffect(() => {
    if (configError) {
      console.error('[AuthContext] Gagal memuat config:', configError)
      console.log('[AuthProvider] config result:', config)
    }
  }, [configError, config])

  if (authLoading || configLoading) {
    return <div className="text-center p-5">Memuat konfigurasi auth...</div>
  }

  const value: AuthContextType = {
    ...auth,
    loading: authLoading,
  }

  return (
    <AuthContext.Provider value={value}>
      <ConfigContext.Provider value={config ?? null}>
        {children}
      </ConfigContext.Provider>
    </AuthContext.Provider>
  )
}

export function useAuth(): AuthContextType {
  return useContext(AuthContext)
}

export function useConfig(): ConfigType | null {
  return useContext(ConfigContext)
}

export function useAuthenticatedRoute(redirectTo = '/account/login') {
  const { isAuthenticated, loading } = useAuth()
  useEffect(() => {
    if (!loading && !isAuthenticated) {
      const next = window.location.pathname + window.location.search
      window.location.href = `${redirectTo}?next=${encodeURIComponent(next)}`
    }
  }, [loading, isAuthenticated, redirectTo])
}

export function useAnonymousRoute(redirectTo = '/') {
  const { isAuthenticated, loading } = useAuth()
  const router = useRouter()
  const params = useSearchParams()

  useEffect(() => {
    if (!loading && isAuthenticated) {
      const next = params.get('next')
      router.replace(next ?? redirectTo)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [loading, isAuthenticated, params, router])
}

interface WithAuthOptions {
  redirectTo?: string; // default: '/account/login'
  role?: string;       // opsional, untuk cek role
}

export function withAuth<T extends JSX.IntrinsicAttributes>(
  Component: React.ComponentType<T>,
  options?: WithAuthOptions,
  Fallback: React.ReactNode = <div>Memuat...</div>
) {
  const redirectTo = options?.redirectTo || '/account/login';

  return function Wrapped(props: T) {
    const { isAuthenticated, loading, user } = useAuth();
    const params = useSearchParams();
    const pathname = usePathname();

    useEffect(() => {
      if (!loading) {
        // Belum login
        if (!isAuthenticated) {
          const next = params.get('next') || pathname;
          window.location.href = `${redirectTo}?next=${encodeURIComponent(next)}`;
        }
        // Sudah login tapi role tidak sesuai
        else if (options?.role && user?.role !== options.role) {
          window.location.href = '/403'; // halaman forbidden
        }
      }
    }, [loading, isAuthenticated, user, params, pathname]);

    // Tampilkan fallback saat loading
    if (loading) return <>{Fallback}</>;

    // Kalau user belum login atau role tidak cocok, jangan render apa-apa
    if (!isAuthenticated || (options?.role && user?.role !== options.role)) {
      return null;
    }

    // Kalau lolos semua cek, render komponen
    return <Component {...props} />;
  };
}


export function withAnonymous<T extends JSX.IntrinsicAttributes>(
  Component: React.ComponentType<T>,
  redirectTo = '/account'
) {
  return function Wrapped(props: T) {
    const { isAuthenticated, loading } = useAuth()
    const params = useSearchParams()
    const router = useRouter()

    useEffect(() => {
      if (!loading && isAuthenticated) {
        const next = params.get('next')
        router.replace(next ?? redirectTo)
      }
    }, [loading, isAuthenticated, params, router])

    if (loading || isAuthenticated) return null
    return <Component {...props} />
  }
}

export function withReauth<T extends JSX.IntrinsicAttributes>(
  Component: React.ComponentType<T>,
  redirectTo = '/account/reauthenticate',
  Fallback: React.ReactNode = <div>Memuat halaman aman...</div>
) {
  return function Wrapped(props: T) {
    const { isAuthenticated, loading } = useAuth()
    const router = useRouter()
    const pathname = usePathname()
    const searchParams = useSearchParams()

    const isValidReauth = useRecentlyReauthenticated()

    const isOnReauthPage = pathname.startsWith(redirectTo)

    // Buat URL lengkap termasuk query string (jika ada)
    const currentPath =
      pathname + (searchParams.toString() ? `?${searchParams.toString()}` : '')

    useEffect(() => {
      // ✅ Jika user login tapi belum reauth (dan bukan di halaman reauth), redirect
      if (!loading && isAuthenticated && !isValidReauth && !isOnReauthPage) {
        const next = searchParams.get('next') || currentPath
        router.replace(`${redirectTo}?next=${encodeURIComponent(next)}`)
      }
    }, [
      loading,
      isAuthenticated,
      isValidReauth,
      isOnReauthPage,
      searchParams,
      currentPath,
      router,
    ])

    // ⏳ Tampilkan fallback jika belum siap
    if (loading || !isAuthenticated || (!isValidReauth && !isOnReauthPage)) {
      return <>{Fallback}</>
    }

    return <Component {...props} />
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/page.module.css --
.page {
  --gray-rgb: 0, 0, 0;
  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);

  --button-primary-hover: #383838;
  --button-secondary-hover: #f2f2f2;

  display: grid;
  grid-template-rows: 20px 1fr 20px;
  align-items: center;
  justify-items: center;
  min-height: 100svh;
  padding: 80px;
  gap: 64px;
  font-family: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  .page {
    --gray-rgb: 255, 255, 255;
    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);

    --button-primary-hover: #ccc;
    --button-secondary-hover: #1a1a1a;
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 32px;
  grid-row-start: 2;
}

.main ol {
  font-family: var(--font-geist-mono);
  padding-left: 0;
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: -0.01em;
  list-style-position: inside;
}

.main li:not(:last-of-type) {
  margin-bottom: 8px;
}

.main code {
  font-family: inherit;
  background: var(--gray-alpha-100);
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
}

.ctas {
  display: flex;
  gap: 16px;
}

.ctas a {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  border: 1px solid transparent;
  transition:
    background 0.2s,
    color 0.2s,
    border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
}

a.primary {
  background: var(--foreground);
  color: var(--background);
  gap: 8px;
}

a.secondary {
  border-color: var(--gray-alpha-200);
  min-width: 158px;
}

.footer {
  grid-row-start: 3;
  display: flex;
  gap: 24px;
}

.footer a {
  display: flex;
  align-items: center;
  gap: 8px;
}

.footer img {
  flex-shrink: 0;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  a.primary:hover {
    background: var(--button-primary-hover);
    border-color: transparent;
  }

  a.secondary:hover {
    background: var(--button-secondary-hover);
    border-color: transparent;
  }

  .footer a:hover {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
}

@media (max-width: 600px) {
  .page {
    padding: 32px;
    padding-bottom: 80px;
  }

  .main {
    align-items: center;
  }

  .main ol {
    text-align: center;
  }

  .ctas {
    flex-direction: column;
  }

  .ctas a {
    font-size: 14px;
    height: 40px;
    padding: 0 16px;
  }

  a.secondary {
    min-width: auto;
  }

  .footer {
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
}

@media (prefers-color-scheme: dark) {
  .logo {
    filter: invert();
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/page.tsx --
// src/app/page.tsx
import type { Metadata } from "next"
import HomeClient from "./HomeClient"
import React from "react"

export const metadata: Metadata = {
  title: "OEM-X Blog | Artikel Terbaru",
  description: "Kumpulan artikel terbaru dari semua blog di OEM-X.",
  openGraph: {
    title: "OEM-X Blog | Artikel Terbaru",
    description: "Kumpulan artikel terbaru dari semua blog di OEM-X.",
    url: "https://oem-x.my.id/",
    type: "website",
    images: [
      {
        url: "https://oem-x.my.id/next.svg",
        width: 1200,
        height: 630,
        alt: "OEM-X Blog",
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: "OEM-X Blog | Artikel Terbaru",
    description: "Kumpulan artikel terbaru dari semua blog di OEM-X.",
    images: ["https://oem-x.my.id/next.svg"],
  },
}

export default function HomePage() {
  return <HomeClient />
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/HomeClient.tsx --
"use client"

import React, { useEffect, useState } from "react"
import Link from "next/link"
import { request } from "../lib/allauth"
import { renderPlainNode } from "../components/wysiwyg/renderers"
import { Descendant } from "slate"

type Blog = {
  id: number
  slug: string
  title: string
}

type Post = {
  id: number
  slug: string
  title: string
  blog: string
  published_at: string
  content: string | Descendant[]
}

export default function HomeClient() {
  const [blogs, setBlogs] = useState<Blog[]>([])
  const [posts, setPosts] = useState<Post[]>([])
  const [selectedBlog, setSelectedBlog] = useState<string>("")
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    async function fetchBlogs() {
      try {
        const res = await request<any>("GET", "/blog/public/blogs/")
        setBlogs(res?.results ?? res ?? [])
      } catch (e) {
        console.error("Gagal load blogs:", e)
        setBlogs([])
      }
    }
    fetchBlogs()
  }, [])

  useEffect(() => {
    async function fetchPosts() {
      setLoading(true)
      try {
        const url = selectedBlog
          ? `/blog/public/posts/?blog=${encodeURIComponent(selectedBlog)}`
          : "/blog/public/posts/"
        const res = await request<any>("GET", url)
        setPosts(res?.results ?? res ?? [])
      } catch (e) {
        console.error("Gagal load posts:", e)
      } finally {
        setLoading(false)
      }
    }
    fetchPosts()
  }, [selectedBlog])

  return (
    <div className="container py-5" style={{ maxWidth: "1000px" }}>
      <h1 className="display-6 fw-bold mb-4 text-center">Artikel Terbaru</h1>

      <div className="mb-4 text-center">
        <select
          className="form-select w-auto d-inline-block"
          value={selectedBlog}
          onChange={(e) => setSelectedBlog(e.target.value)}
        >
          <option value="">Semua Blog</option>
          {blogs.map((b) => (
            <option key={b.id} value={b.slug}>
              {b.title}
            </option>
          ))}
        </select>
      </div>

      {loading ? (
        <div className="text-center">Memuat posting...</div>
      ) : posts.length === 0 ? (
        <p className="text-muted text-center">Tidak ada posting.</p>
      ) : (
        <div className="row g-4">
          {posts.map((p) => {
            const content: Descendant[] =
              typeof p.content === "string" ? JSON.parse(p.content) : p.content
            const excerptNodes = content.slice(0, 2)

            return (
              <div className="col-md-6 col-lg-4" key={p.id}>
                <div className="card h-100 shadow-sm border-0">
                  <div className="card-body d-flex flex-column">
                    <h5 className="card-title">
                      <Link href={`/blog/${p.blog}/${p.slug}`}>
                        {p.title}
                      </Link>
                    </h5>
                    <p className="card-subtitle mb-2 text-muted small">
                      {new Date(p.published_at).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </p>
                    <div
                      className="card-text text-truncate"
                      style={{ maxHeight: "4.5rem", overflow: "hidden" }}
                    >
                      {excerptNodes.map((node, i) =>
                        renderPlainNode(node, i)
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      )}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/layout.tsx --
// === src/app/layout.tsx ===
import React from 'react'
import { cookies } from 'next/headers'
import { AuthProvider, AuthContextType } from '../auth/AuthContext'
import NavbarWrapper from '../components/NavbarWrapper'
import 'bootstrap/dist/css/bootstrap.min.css'
import "bootstrap-icons/font/bootstrap-icons.css";
import './globals.css'
import { ConfigType, getAuthSSR, getConfigSSR } from '../lib/allauth'
import { SWRConfig } from 'swr'
import AppWrapper from '../components/AppWrapper'

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const cookieHeader = await cookies()
  const sessionid = cookieHeader.get('sessionid')?.value || null

  let initialAuth: AuthContextType | undefined = undefined

  let initialConfig: ConfigType | null = null

  try {
    if (sessionid) {
      console.log('[RootLayout] Ada sessionid, ambil auth + config')

      const [authRes, configRaw] = await Promise.all([
        getAuthSSR(sessionid),
        getConfigSSR(),
      ])

      const data = authRes.data ?? {}
      const meta = authRes.meta ?? {}

      type Flow = {
        id: string
        providers?: string[]
        [key: string]: unknown
      }

      const flows: Flow[] = data.flows ?? []
      const providerFlow = flows.find((f) => f.id === 'provider_redirect')
      const providers = providerFlow?.providers ?? []

      initialAuth = {
        isAuthenticated: meta.is_authenticated ?? false,
        user: data.user ?? null,
        flows,
        providers,
        methods: data.methods ?? [],
        tokens: {
          session_token: meta.session_token,
          access_token: meta.access_token,
        },
        loading: false,
        lastReauthenticatedAt: typeof meta.last_reauthenticated_at === 'string'
          ? meta.last_reauthenticated_at
          : null,
      }

      initialConfig = configRaw?.data ?? configRaw ?? null
    } else {
      console.log('[RootLayout] Tidak ada sessionid, hanya ambil config')
      const configRaw = await getConfigSSR()
      initialConfig = configRaw?.data ?? configRaw ?? null
    }
  } catch (err) {
    console.error('[RootLayout] Gagal ambil auth/config:', err)
  }

  return (
    <html lang="en">
      <body>
        <SWRConfig value={{
          fallback: {
            '/auth/session': initialAuth,
            '/auth/config': initialConfig,
          }
        }}>
          <AppWrapper>
            <AuthProvider initialAuth={initialAuth} initialConfig={initialConfig}>
              <NavbarWrapper />
              {children}
            </AuthProvider>
          </AppWrapper>
        </SWRConfig>
      </body>
    </html>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/calculator/page.tsx --
'use client'

import React, { useState, useCallback } from 'react'
import APICard, { APIResponse } from '../../components/APICard'
import {
  settings,
} from '../../lib/allauth'

export default function CalculatorPage() {
  const [x, setX] = useState<string>('')
  const [y, setY] = useState<string>('')
  const [drfResponse, setDrfResponse] = useState<APIResponse>({ status: 0, data: '' })
  const [ninjaResponse, setNinjaResponse] = useState<APIResponse>({ status: 0, data: '' })
  const [loading, setLoading] = useState(false)

  const fetchResult = useCallback(
    async (
      url: string,
      x: string,
      y: string,
      setResponse: React.Dispatch<React.SetStateAction<APIResponse>>
    ) => {
      const query = new URLSearchParams({ x, y }).toString()
      const options: RequestInit = { headers: {} }

      if (settings.withCredentials) {
        options.credentials = 'include'
      }

      try {
        const res = await fetch(`${url}?${query}`, options)
        const data = await res.json()
        setResponse({ status: res.status, data })
      } catch (err: unknown) {
        const message =
          err instanceof Error ? err.message : 'Terjadi kesalahan tak dikenal'
        setResponse({ status: 'Error', data: message })
      }
    },
    []
  )

  const onCalculate = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault()
      if (isNaN(Number(x)) || isNaN(Number(y))) {
        alert('Masukkan angka yang valid untuk x dan y.')
        return
      }

      let origin: string
      try {
        origin = new URL(settings.baseUrl).origin
      } catch {
        alert(`Base URL tidak valid: ${settings.baseUrl}`)
        return
      }

      setLoading(true)
      await Promise.all([
        fetchResult(`${origin}/drf/api/add/`, x, y, setDrfResponse),
        fetchResult(`${origin}/ninja/api/add`, x, y, setNinjaResponse),
      ])
      setLoading(false)
    },
    [x, y, fetchResult]
  )

  return (
    <div className="container mt-5">
      <h2 className="mb-4">Calculator</h2>
      <form onSubmit={onCalculate}>
        <fieldset disabled={loading}>
          <div className="mb-3">
            <label htmlFor="inputX" className="form-label">
              𝓍
            </label>
            <input
              id="inputX"
              type="number"
              className="form-control"
              value={x}
              onChange={(e) => setX(e.target.value)}
              required
            />
          </div>
          <div className="mb-3">
            <label htmlFor="inputY" className="form-label">
              𝓎
            </label>
            <input
              id="inputY"
              type="number"
              className="form-control"
              value={y}
              onChange={(e) => setY(e.target.value)}
              required
            />
          </div>
          <button type="submit" className="btn btn-primary">
            {loading ? 'Calculating…' : 'Add these inputs'}
          </button>
        </fieldset>
      </form>

      <div className="row mt-5">
        <div className="col-md-6 mb-4">
          <APICard
            title="Ninja"
            docs="/ninja/api/docs"
            response={ninjaResponse}
          />
        </div>
        <div className="col-md-6 mb-4">
          <APICard
            title="Django REST Framework"
            docs="/drf/api/schema/redoc/"
            response={drfResponse}
          />
        </div>
      </div>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/metadata.ts --
// src/app/account/metadata.ts
import type { Metadata } from "next"

export const accountMetadata: Metadata = {
  title: "Akun | OEM-X",
  description: "Kelola akun Anda di OEM-X.",
  robots: {
    index: false, // 🚫 jangan diindeks Google
    follow: false, // 🚫 jangan ikuti link di halaman ini
  },
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/page.tsx --
// src/app/account/page.tsx
'use client'

import React from 'react'
import { withAuth } from '../../auth/AuthContext'
import { ClientOnly } from '../../lib/helpers/ClientOnly'
import { AccountContent } from './content'

const ProtectedAccount = withAuth(AccountContent)

export default function AccountPage() {
  return (
    <ClientOnly>
      <ProtectedAccount />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/content.tsx --
// src/app/account/content.tsx
'use client'

import React from 'react'
import { useAuth } from '../../auth/AuthContext'
import { useLogout } from '../../auth/useLogout'

export function AccountContent() {
  const { user, loading } = useAuth()
  const { triggerLogout } = useLogout()

  if (loading) {
    return <p className="container mt-5 text-center">⏳ Memuat data akun…</p>
  }
  if (!user) {
    return (
      <p className="container mt-5 text-center text-danger">
        ❌ Gagal memuat akun.
      </p>
    )
  }

  // ✅ casting aman tanpa interface
  const id = String(user.id ?? '')
  const email = String(user.email ?? '')
  const display = String(user.display ?? email ?? 'Pengguna')
  const role = String(user.role ?? '')
  const hasPassword = Boolean(user.has_usable_password)

  return (
    <div className="container mt-5">
      <h2 className="mb-3">👋 Halo, {display}!</h2>
      <p>Selamat datang di dashboard akun Anda.</p>

      <div className="mt-4">
        <h5 className="mb-3">📌 Informasi Akun</h5>
        <ul className="list-group mb-4">
          <li className="list-group-item">
            <strong>ID:</strong> {id}
          </li>
          <li className="list-group-item">
            <strong>Email:</strong> {email}
          </li>
          {role && (
            <li className="list-group-item">
              <strong>Role:</strong> {role}
            </li>
          )}
          <li className="list-group-item">
            <strong>Password aktif:</strong> {hasPassword ? '✅ Ya' : '❌ Tidak'}
          </li>
        </ul>
      </div>

      <button
        onClick={triggerLogout}
        className="btn btn-outline-danger"
      >
        🚪 Logout
      </button>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/layout.tsx --
// app/account/layout.tsx
import React from "react"
import { accountMetadata } from "./metadata"

export const metadata = accountMetadata

export default function AccountLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="container py-5" style={{ maxWidth: "800px" }}>
      {children}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/reauthenticate/page.tsx --
// src/app/account/reauthenticate/page.tsx
'use client'

import React from 'react'
import { withAuth } from '../../../auth/AuthContext'
import { ReauthenticateContent } from './content'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'

const Fallback = (
  <div className="container mt-5" style={{ maxWidth: 480 }}>
    <h2>Verifikasi Ulang</h2>
    <form>{/* Placeholder */}</form>
  </div>
)

function ReauthenticatePage() {
  const Protected = withAuth(ReauthenticateContent, '/account/login', Fallback)
  return <ClientOnly>{<Protected />}</ClientOnly>
}

export default ReauthenticatePage



----------------------------------------


-- /nextjs_oem_frontend/src/app/account/reauthenticate/content.tsx --
'use client'

import React, { useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { reauthenticate } from '../../../lib/allauth'
import { useRequest } from '../../../lib/helpers/useRequest'
import { mutate } from 'swr'

export function ReauthenticateContent() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const next = searchParams.get('next') || '/'

  const [password, setPassword] = useState('')
  const { trigger: doReauth, error, loading } = useRequest(reauthenticate)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    const resp = await doReauth({ password })

    if (!resp?.meta?.is_authenticated) return

    // Revalidasi session auth agar fresh
    await mutate('/auth/session')

    // Redirect ke tujuan semula
    router.replace(next)
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 480 }}>
      <h2>Verifikasi Ulang</h2>
      <p>
        Demi keamanan, masukkan ulang password Anda untuk melanjutkan.
      </p>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label htmlFor="password" className="form-label">Password</label>
          <input
            id="password"
            type="password"
            className="form-control"
            value={password}
            onChange={e => setPassword(e.target.value)}
            disabled={loading}
            required
            autoComplete="current-password"
          />
        </div>

        {error && <div className="alert alert-danger">{error}</div>}

        <button type="submit" className="btn btn-primary" disabled={loading || !password}>
          {loading ? 'Memverifikasi...' : 'Lanjutkan'}
        </button>
      </form>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/password/change/page.tsx --
// app/account/password/change/page.tsx
'use client'

import dynamic from 'next/dynamic'

// ⛔️ Hindari SSR agar tidak terjadi hydration mismatch
const ChangePasswordClient = dynamic(() => import('./ChangePasswordClient'), {
  ssr: false,
})

export default ChangePasswordClient


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/password/change/ChangePasswordClient.tsx --
// app/account/password/change/ChangePasswordClient.tsx
'use client'

import React, { useEffect, useState } from 'react'
import { useAuth, withAuth, withReauth } from '../../../../auth/AuthContext'
import { ClientOnly } from '../../../../lib/helpers/ClientOnly'
import { changePassword } from '../../../../lib/allauth'
import { useRequest } from '../../../../lib/helpers/useRequest'
import { mutate } from 'swr'

function ChangePasswordPage() {
  const { user } = useAuth()
  const [currentPassword, setCurrentPassword] = useState('')
  const [newPassword, setNewPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [success, setSuccess] = useState<string | null>(null)
  const [justChanged, setJustChanged] = useState(false)

  const { trigger, error, loading } = useRequest(changePassword)

  const hasUsablePassword = !!user?.has_usable_password

  useEffect(() => {
    if (justChanged) {
      const timer = setTimeout(() => {
        setSuccess(null)
      }, 2500)
      return () => clearTimeout(timer)
    }
  }, [justChanged])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setSuccess(null)

    if (newPassword.length < 8) {
      return alert('Password baru minimal 8 karakter.')
    }

    if (newPassword !== confirmPassword) {
      return alert('Konfirmasi password tidak cocok.')
    }

    const res = await trigger({
      current_password: hasUsablePassword ? currentPassword : '',
      new_password: newPassword,
    })

    if (res?.status === 200) {
      await mutate('/auth/session') // ✅ refresh metode auth terbaru
      setSuccess('Password berhasil diubah.')
      setCurrentPassword('')
      setNewPassword('')
      setConfirmPassword('')
      setJustChanged(true)
    }
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 480 }}>
      <h2>Ubah Password</h2>
      <form onSubmit={handleSubmit}>
        {hasUsablePassword && (
          <div className="mb-3">
            <label htmlFor="currentPassword" className="form-label">Password Saat Ini</label>
            <input
              type="password"
              id="currentPassword"
              className="form-control"
              value={currentPassword}
              onChange={(e) => setCurrentPassword(e.target.value)}
              required
              disabled={loading}
            />
          </div>
        )}

        <div className="mb-3">
          <label htmlFor="newPassword" className="form-label">Password Baru</label>
          <input
            type="password"
            id="newPassword"
            className="form-control"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
            disabled={loading}
          />
        </div>

        <div className="mb-3">
          <label htmlFor="confirmPassword" className="form-label">Konfirmasi Password Baru</label>
          <input
            type="password"
            id="confirmPassword"
            className="form-control"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
            disabled={loading}
          />
        </div>

        {error && <div className="alert alert-danger">{error}</div>}
        {success && <div className="alert alert-success">{success}</div>}

        <button type="submit" className="btn btn-primary" disabled={loading}>
          {loading ? 'Menyimpan...' : 'Simpan'}
        </button>
      </form>
    </div>
  )
}

// 💡 Fallback loading UI
const Fallback = (
  <div className="container mt-5" style={{ maxWidth: 480 }}>
    <h2>Ubah Password</h2>
    <form>
      <div className="mb-3">
        <label className="form-label placeholder-glow">Password Saat Ini</label>
        <div className="form-control placeholder-glow" />
      </div>

      <div className="mb-3">
        <label className="form-label placeholder-glow">Password Baru</label>
        <div className="form-control placeholder-glow" />
      </div>

      <div className="mb-3">
        <label className="form-label placeholder-glow">Konfirmasi Password Baru</label>
        <div className="form-control placeholder-glow" />
      </div>

      <div className="d-grid">
        <button className="btn btn-primary disabled placeholder-glow">
          Menyimpan...
        </button>
      </div>
    </form>
  </div>
)

// ✅ Gunakan HOC + ClientOnly agar aman dari SSR mismatch
const ProtectedChangePassword = withAuth(
  withReauth(ChangePasswordPage, '/account/reauthenticate', Fallback),
  '/account/login',
  Fallback
)

export default function SecureChangePassword() {
  return (
    <ClientOnly>
      <ProtectedChangePassword />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/email/page.tsx --
// app/account/email/page.tsx
'use client'

import React, { useState, useMemo } from 'react'
import { withAuth, useConfig } from '../../../auth/AuthContext'
import {
  addEmail,
  deleteEmail,
  markEmailAsPrimary,
  requestEmailVerification,
  EmailAddress
} from '../../../lib/allauth'
import { useRequest } from '../../../lib/helpers/useRequest'
import Button from '../../../components/Button'
import { useRouter } from 'next/navigation'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'
import { useEmailAddresses } from '../../../lib/hooks/useEmailAddresses'

function ChangeEmailPage() {
  const config = useConfig()
  const router = useRouter()
  const [email, setEmail] = useState('')

  const { data, isLoading: loadingEmails, mutate } = useEmailAddresses()
  const emails: EmailAddress[] = data?.data ?? []

  const { trigger: add, loading: adding, error: addError } = useRequest(addEmail)
  const { trigger: resend, loading: resending } = useRequest(requestEmailVerification)
  const { trigger: del, loading: deleting } = useRequest(deleteEmail)
  const { trigger: setPrimary, loading: patching } = useRequest(markEmailAsPrimary)

  const isBusy = useMemo(() => adding || resending || deleting || patching, [
    adding, resending, deleting, patching
  ])

  const handleAdd = async () => {
    const res = await add(email)
    if (res?.status === 200) {
      mutate() // reload email list
      setEmail('')
      if (config?.account?.email_verification_by_code_enabled) {
        router.replace('/account/verify-email')
      }
    }
  }

  const handleVerify = async (email: string) => {
    const res = await resend(email)
    if (res?.status === 200 && config?.account?.email_verification_by_code_enabled) {
      router.replace('/account/verify-email')
    }
  }

  const handleDelete = async (email: string) => {
    const res = await del(email)
    if (res?.status === 200) {
      mutate()
    }
  }

  const handleSetPrimary = async (email: string) => {
    const res = await setPrimary(email)
    if (res?.status === 200) {
      mutate()
    }
  }

  return (
    <div className="container mt-5">
      <h2 className="mb-4">Kelola Email</h2>

      {loadingEmails ? (
        <p>Sedang memuat daftar email...</p>
      ) : (
        <div className="table-responsive">
          <table className="table table-bordered">
            <thead>
              <tr>
                <th>Email</th>
                <th>Terverifikasi</th>
                <th>Utama</th>
                <th>Aksi</th>
              </tr>
            </thead>
            <tbody>
              {emails.map((ea) => (
                <tr key={ea.email}>
                  <td>{ea.email}</td>
                  <td>{ea.verified ? '✅' : '❌'}</td>
                  <td>
                    <input
                      type="radio"
                      onChange={() => handleSetPrimary(ea.email)}
                      checked={ea.primary}
                      disabled={isBusy}
                    />
                  </td>
                  <td>
                    {!ea.verified && (
                      <Button onClick={() => handleVerify(ea.email)} disabled={isBusy}>Resend</Button>
                    )}{' '}
                    {!ea.primary && (
                      <Button onClick={() => handleDelete(ea.email)} disabled={isBusy}>Remove</Button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      <h4 className="mt-4">Tambah Email</h4>

      {addError && <div className="alert alert-danger">{addError}</div>}

      <div className="mb-3">
        <label htmlFor="new-email" className="form-label">Email Baru</label>
        <input
          id="new-email"
          type="email"
          className="form-control"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          disabled={adding}
          required
        />
      </div>

      <Button disabled={adding || !email} onClick={handleAdd}>
        Tambah
      </Button>
    </div>
  )
}

const ProtectedChangeEmail = withAuth(ChangeEmailPage)

export default function SecuredChangeEmail() {
  return (
    <ClientOnly>
      <ProtectedChangeEmail />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/sessions/page.tsx --
// app/account/sessions/page.tsx
'use client'

import React, { useMemo } from 'react'
import { withAuth, useConfig } from '../../../auth/AuthContext'
import {
  endSessions,
  SessionType
} from '../../../lib/allauth'
import { useRequest } from '../../../lib/helpers/useRequest'
import Button from '../../../components/Button'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'
import { useSessions } from '../../../lib/hooks/useSessions'

function SessionsPage() {
  const config = useConfig()
  const { data, isLoading: fetching, mutate } = useSessions()
  const sessions: SessionType[] = data?.data ?? []

  const { trigger: doLogout, loading: loggingOut } = useRequest(endSessions)

  const handleLogout = async (target: SessionType[]) => {
    const resp = await doLogout(target.map((s) => s.id))
    if (resp?.status === 200) mutate()
  }

  const otherSessions = useMemo(
    () => sessions.filter((s) => !s.is_current),
    [sessions]
  )

  return (
    <div className="container mt-5">
      <h2 className="mb-4">Sesi Aktif</h2>

      {fetching ? (
        <div className="text-center my-4">
          <div className="spinner-border text-primary" role="status" />
          <p className="mt-2">Memuat sesi aktif...</p>
        </div>
      ) : (
        <>
          <div className="table-responsive">
            <table className="table table-bordered">
              <thead>
                <tr>
                  <th>Waktu Masuk</th>
                  <th>IP Address</th>
                  <th>Browser</th>
                  {Boolean(config?.usersessions?.track_activity) && <th>Terakhir Aktif</th>}
                  <th>Sesi Ini</th>
                  <th>Aksi</th>
                </tr>
              </thead>
              <tbody>
                {sessions.map((session) => (
                  <tr key={session.id}>
                    <td>{new Date(session.created_at * 1000).toLocaleString()}</td>
                    <td>{session.ip}</td>
                    <td>{session.user_agent}</td>
                    {Boolean(config?.usersessions?.track_activity) && (
                      <td>{session.last_seen_at ?? '-'}</td>
                    )}
                    <td>{session.is_current ? '⭐' : ''}</td>
                    <td>
                      {!session.is_current && (
                        <Button onClick={() => handleLogout([session])} disabled={loggingOut || fetching}>
                          Logout
                        </Button>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {sessions.length === 0 && (
            <p className="text-muted text-center mt-3">
              Tidak ada sesi aktif yang ditemukan.
            </p>
          )}

          <Button
            className="btn btn-danger mt-3"
            disabled={otherSessions.length <= 0 || loggingOut || fetching}
            onClick={() => handleLogout(otherSessions)}
          >
            Logout dari Sesi Lain
          </Button>
        </>
      )}
    </div>
  )
}

const ProtectedSessions = withAuth(SessionsPage)

export default function SecuredSessions() {
  return (
    <ClientOnly>
      <ProtectedSessions />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/login/page.tsx --
// app/account/login/page.tsx
'use client'

import React, { useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { mutate } from 'swr'

import { login, redirectToProvider, AuthProcess } from '../../../lib/allauth'
import { withAnonymous } from '../../../auth/AuthContext'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'
import { useAuthConfig } from '../../../lib/hooks/useAuthConfig'
import type { Provider } from '../../../types'

function LoginPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const next = searchParams.get('next') || '/account'

  const { data: config, error: configError, isLoading: loadingConfig } = useAuthConfig()

  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState<string | null>(null)
  const [loading, setLoading] = useState(false)

  const authMethod = config?.data?.account?.authentication_method ?? 'email'
  const isSignupOpen = config?.data?.account?.is_open_for_signup ?? true
  const socialProviders = config?.data?.socialaccount?.providers ?? []

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError(null)
    setLoading(true)

    console.log('[Login] Mulai proses login dengan email:', email)

    try {
      const res = await login({ email, password })

      console.log('[Login] Respons login:', res)

      if (res.meta?.is_authenticated) {
        console.log('[Login] Berhasil login, redirect ke:', next)
        await mutate('/auth/session')
        router.push(next)
        return
      }

      // Jika response tidak melempar error, tapi juga tidak authenticated
      console.warn('[Login] Tidak berhasil login, response tidak melempar error tapi tidak authenticated')
      setError(res.detail || 'Login gagal.')
    } catch (e: unknown) {
      console.error('[Login] Error saat login:', e)

      if (typeof e === 'object' && e !== null && 'status' in e && 'data' in e) {
        const err = e as { status: number; data?: any }
        const flows = err.data?.data?.flows

        if (
          err.status === 401 &&
          Array.isArray(flows) &&
          flows.some((f: any) => f.id === 'verify_email' && f.is_pending)
        ) {
          console.log('[Login] Email belum diverifikasi, redirect ke /account/verify-email')
          router.push('/account/verify-email')
          return
        }

        setError(err.data?.detail || 'Login gagal.')
      } else if (e instanceof Error) {
        setError(e.message)
      } else {
        setError('Terjadi kesalahan tak dikenal.')
      }
    } finally {
      console.log('[Login] Proses login selesai.')
      setLoading(false)
    }
  }


  if (loadingConfig) {
    return <div className="container mt-5">Memuat konfigurasi login…</div>
  }
  if (configError) {
    return <div className="container mt-5 text-danger">Gagal memuat konfigurasi login.</div>
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 500 }}>
      <h2 className="mb-3">Login</h2>

      {isSignupOpen && (
        <p>
          Belum punya akun? <Link href="/account/signup">Daftar di sini</Link>
        </p>
      )}

      {error && <div className="alert alert-danger">{error}</div>}

      {authMethod === 'email' && (
        <form onSubmit={handleSubmit} className="mb-4">
          <div className="mb-3">
            <label htmlFor="email" className="form-label">Email</label>
            <input
              id="email"
              type="email"
              className="form-control"
              value={email}
              onChange={e => setEmail(e.target.value)}
              disabled={loading}
              required
            />
          </div>
          <div className="mb-3">
            <label htmlFor="password" className="form-label">Password</label>
            <input
              id="password"
              type="password"
              className="form-control"
              value={password}
              onChange={e => setPassword(e.target.value)}
              disabled={loading}
              required
            />
            <div className="form-text">
              <Link href="/account/password/reset">Lupa password?</Link>
            </div>
          </div>
          <button type="submit" className="btn btn-primary" disabled={loading}>
            {loading ? 'Logging in…' : 'Login'}
          </button>
        </form>
      )}

      {socialProviders.length > 0 && (
        <div>
          <h5>Atau login dengan:</h5>
          <ul className="list-unstyled">
            {socialProviders.map((provider: Provider) => (
              <li key={provider.id} className="mb-2">
                <button
                  onClick={() =>
                    redirectToProvider(provider.id, '/account/provider/callback', AuthProcess.LOGIN)
                  }
                  className="btn btn-outline-secondary w-100"
                >
                  Login dengan {provider.name ?? provider.id}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  )
}

const LoginWithAnonymous = withAnonymous(LoginPage)
export default function LoginClientWrapper() {
  return (
    <ClientOnly>
      <LoginWithAnonymous />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/verify-email/page.tsx --
// app/account/verify-email/page.tsx
'use client'

import React from 'react'
import Link from 'next/link'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'

export default function VerifyEmailPage() {
  return (
    <ClientOnly>
      <div className="container mt-5" style={{ maxWidth: 500 }}>
        <h2 className="mb-4">Verifikasi Email</h2>
        <p>
          Kami telah mengirimkan link verifikasi ke alamat email Anda.
          Silakan cek kotak masuk (dan folder spam) untuk menemukannya.
        </p>
        <p>
          Jika Anda belum menerima email dalam beberapa menit, Anda dapat{' '}
          <Link href="/account/verify-email/request" className="text-primary">
            meminta kirim ulang
          </Link>.
        </p>
        <p className="mt-4">
          Setelah mengeklik link verifikasi, Anda dapat{' '}
          <Link href="/account/login" className="text-primary">
            masuk ke akun Anda
          </Link>.
        </p>
      </div>
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/verify-email/request/page.tsx --
// app/account/verify-email/request/page.tsx
'use client'

import React, { useState } from 'react'
import { ClientOnly } from '../../../../lib/helpers/ClientOnly'
import { useRequest } from '../../../../lib/helpers/useRequest'
import { requestEmailVerificationUnauthenticated } from '../../../../lib/allauth'

function RequestEmailVerificationPage() {
  const [email, setEmail] = useState<string>('')
  const [success, setSuccess] = useState<string | null>(null)
  const [httpStatus, setHttpStatus] = useState<number | null>(null)

  const { trigger: sendRequest, error, loading } = useRequest(requestEmailVerificationUnauthenticated)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setSuccess(null)
    setHttpStatus(null)

    try {
      const resp = await sendRequest({ email })
      if (resp?.status === 200) {
        setSuccess('Email verifikasi telah dikirim. Silakan periksa kotak masuk Anda.')
      }
    } catch (err: any) {
      setHttpStatus(err?.status ?? null)
    }
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 500 }}>
      <h2 className="mb-4">Permintaan Verifikasi Email</h2>

      {success && <div className="alert alert-success">{success}</div>}

      {httpStatus === 403 && (
        <div className="alert alert-warning">
          Terlalu banyak permintaan. Coba lagi nanti.
        </div>
      )}

      {httpStatus === 400 && (
        <div className="alert alert-danger">
          Email tidak valid atau tidak ditemukan.
        </div>
      )}

      {httpStatus !== 400 && httpStatus !== 403 && error && (
        <div className="alert alert-danger">{error}</div>
      )}

      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label htmlFor="email" className="form-label">Alamat Email</label>
          <input
            id="email"
            type="email"
            className="form-control"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            disabled={loading}
          />
        </div>

        <button type="submit" className="btn btn-primary" disabled={loading}>
          {loading ? 'Mengirim…' : 'Kirim Verifikasi'}
        </button>
      </form>
    </div>
  )
}

export default function RequestWrapper() {
  return (
    <ClientOnly>
      <RequestEmailVerificationPage />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/verify-email/[key]/page.tsx --
// app/account/verify-email/[key]/page.tsx
'use client'

import React, { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { AuthResponse, getEmailVerification, verifyEmail } from '../../../../lib/allauth'
import Button from '../../../../components/Button'

type Status = 'pending' | 'success' | 'error'

export default function VerifyEmailPage() {
  const params = useParams()
  const router = useRouter()

  const rawKey = Array.isArray(params.key) ? params.key[0] : params.key
  const key = typeof rawKey === 'string' ? decodeURIComponent(rawKey) : ''

  const [verification, setVerification] = useState<AuthResponse | null>(null)
  const [status, setStatus] = useState<Status>('pending')
  const [message, setMessage] = useState('')
  const [fetching, setFetching] = useState(false)

  useEffect(() => {
    console.log(`load key ${key}`)
    if (!key || key.length < 8) {
      setVerification({ status: 400, data: {} })
      return
    }

    getEmailVerification(key)
      .then((resp) => {
        setVerification(resp)
      })
      .catch((e: unknown) => {
        const error = e as { status?: number }
        console.error('Gagal memuat informasi verifikasi:', error)
        // Hanya log error selain 400 dan 404
        if (error?.status && ![400, 404].includes(error.status)) {
          console.error('Gagal memuat informasi verifikasi:', error)
        }

        setVerification({ status: error?.status || 400, data: {} })
      })
  }, [key])


  const submit = async () => {
    setFetching(true)
    try {
      const res = await verifyEmail(key)
      if (res?.status === 200 || res?.status === 401) {
        setStatus('success')
        setMessage('Email berhasil diverifikasi!')
        setTimeout(() => router.push('/account/email'), 2000)
      } else {
        const errList = Array.isArray(res?.data?.errors) ? res.data.errors : []
        const reason =
          errList.length > 0
            ? `${errList[0].message} (kode: ${errList[0].code})`
            : res?.data?.detail || `Status ${res?.status || '??'}`

        setStatus('error')
        setMessage(`Gagal memverifikasi email: ${reason}`)

        // Hanya log kesalahan berat
        if (!res?.status || res.status >= 500) {
          console.error('Detail error:', res)
        }
      }
    } catch (e) {
      if (e.status === 401) {
        setStatus('success')
        setMessage('Email berhasil diverifikasi!')
        setTimeout(() => router.push('/account/email'), 2000)
      }
      else {
        console.error('Exception saat verifikasi:', e)
        setStatus('error')
        setMessage('Terjadi kesalahan saat memverifikasi email.')
      }
    } finally {
      setFetching(false)
    }
  }

  if (!verification) {
    return (
      <div className="container mt-5">
        <p>Memuat informasi verifikasi email...</p>
      </div>
    )
  }

  const data = verification.data

  return (
    <div className="container mt-5">
      <h1>Verifikasi Email</h1>

      {status === 'success' && (
        <div className="alert alert-success" role="alert">
          {message}
        </div>
      )}

      {status === 'error' && (
        <div className="alert alert-danger" role="alert">
          {message}
          <br />
          <Button className="mt-3" onClick={() => router.replace('/account/email')}>
            Kembali ke Pengaturan Email
          </Button>
        </div>
      )}

      {status === 'pending' && verification.status === 200 && (
        <>
          <p>
            Konfirmasi bahwa{' '}
            <a href={`mailto:${String(data?.email)}`}>{String(data?.email)}</a> adalah email milik{' '}
            <strong>{String((data?.user as Record<string, unknown>)?.str ?? 'pengguna ini')}</strong>.
          </p>
          <Button onClick={submit} disabled={fetching}>
            {fetching ? 'Memverifikasi...' : 'Verifikasi Email'}
          </Button>
        </>
      )}

      {status === 'pending' && verification.status !== 200 && (
        <div className="alert alert-warning" role="alert">
          Link verifikasi tidak valid atau email sudah diverifikasi sebelumnya.
        </div>
      )}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/verify-email/resend/page.tsx --
// app/account/verify-email/resend/page.tsx
'use client'

import React, { useState } from 'react'
import { useAuth } from '../../../../auth/AuthContext'
import { ClientOnly } from '../../../../lib/helpers/ClientOnly'
import { useRequest } from '../../../../lib/helpers/useRequest'
import { sendEmailVerification } from '../../../../lib/allauth'

function ResendEmailVerificationPage() {
  const { user } = useAuth()
  const [success, setSuccess] = useState<string | null>(null)
  const [httpStatus, setHttpStatus] = useState<number | null>(null)

  const initialEmail = typeof user?.email === 'string' ? user.email : ''
  const [email, setEmail] = useState<string>(initialEmail)

  const { trigger: resendEmail, error, loading } = useRequest(sendEmailVerification)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setSuccess(null)
    setHttpStatus(null)

    try {
      const resp = await resendEmail({ email })
      if (resp?.status === 200) {
        setSuccess('Email verifikasi telah dikirim. Silakan periksa kotak masuk Anda.')
      }
    } catch (err: any) {
      setHttpStatus(err?.status ?? null)
    }
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 500 }}>
      <h2 className="mb-4">Kirim Ulang Verifikasi Email</h2>

      {success && <div className="alert alert-success">{success}</div>}
      {httpStatus === 403 && (
        <div className="alert alert-warning">
          Terlalu banyak permintaan. Silakan coba lagi nanti.
        </div>
      )}
      {httpStatus === 400 && (
        <div className="alert alert-danger">
          Email tidak valid atau tidak ditemukan.
        </div>
      )}
      {httpStatus !== 400 && httpStatus !== 403 && error && (
        <div className="alert alert-danger">{error}</div>
      )}

      <form onSubmit={handleSubmit}>
        {initialEmail ? (
          <p>
            Email Anda: <strong>{initialEmail}</strong>
          </p>
        ) : (
          <div className="mb-3">
            <label htmlFor="email" className="form-label">Email</label>
            <input
              id="email"
              type="email"
              className="form-control"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              disabled={loading}
            />
          </div>
        )}

        <button type="submit" className="btn btn-primary" disabled={loading}>
          {loading ? 'Mengirim…' : 'Kirim Verifikasi'}
        </button>
      </form>
    </div>
  )
}

export default function ResendWrapper() {
  return (
    <ClientOnly>
      <ResendEmailVerificationPage />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/invitation/page.tsx --
// app/account/invitation/page.tsx
'use client';

import React, { useState } from 'react';
import { useInvitation } from '../../../lib/hooks/useInvitation';

export default function InvitationRequestPage() {
  const { loading, error, sendEmailRequest } = useInvitation();
  const [email, setEmail] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSuccessMessage('');
    const resp = await sendEmailRequest(email);
    if (resp?.detail) {
      setSuccessMessage(resp.detail);
    }
  };

  return (
    <div className="container mt-5">
      <h1 className="mb-4">Ajukan Permintaan Undangan</h1>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label htmlFor="email" className="form-label">Email Anda</label>
          <input
            type="email"
            id="email"
            className="form-control"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        {error && <div className="alert alert-danger">{error}</div>}
        {successMessage && <div className="alert alert-success">{successMessage}</div>}
        <button type="submit" className="btn btn-primary" disabled={loading}>
          {loading ? 'Mengirim...' : 'Kirim Permintaan Undangan'}
        </button>
      </form>
    </div>
  );
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/invitation/[token]/page.tsx --
// app/account/invitation/[token]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useInvitation } from '../../../../lib/hooks/useInvitation';

export default function InvitationSignupPage() {
  const { token } = useParams();
  const router = useRouter();
  const { loading, error, validateToken, signupWithToken } = useInvitation();

  const [email, setEmail] = useState('');
  const [password1, setPassword1] = useState('');
  const [password2, setPassword2] = useState('');
  const [tokenValid, setTokenValid] = useState<boolean | null>(null);
  const [message, setMessage] = useState('');

  useEffect(() => {
    if (!token) {
      setTokenValid(false);
      setMessage('Token tidak ditemukan');
      return;
    }
    (async () => {
      const resp = await validateToken(token as string);
      if (resp && resp.id) {
        setTokenValid(true);
        setEmail((resp as any).email || '');
      } else {
        setTokenValid(false);
        setMessage(error || (resp as any)?.detail || 'Token tidak valid atau kadaluarsa');
      }
    })();
  }, [token, validateToken, error]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setMessage('');

    if (password1 !== password2) {
      setMessage('Password dan konfirmasi harus sama');
      return;
    }

    try {
      const resp: any = await signupWithToken({
        email,
        password1,
        password2,
        token: token as string,
      });

      if (resp && (resp as any).success) {
        // Kalau backend kasih pesan verifikasi email
        if (resp.detail?.toLowerCase().includes('verification')) {
          router.push('/account/verify-email');
        } else {
          router.push('/account');
        }
      } else {
        setMessage(resp?.detail || error || 'Pendaftaran gagal');
      }
    } catch (err: any) {
      setMessage(err?.data?.detail || err.message || 'Pendaftaran gagal');
    }
  };

  if (tokenValid === null) {
    return <p>Memverifikasi token...</p>;
  }

  if (!tokenValid) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">{message}</div>
      </div>
    );
  }

  return (
    <div className="container mt-5">
      <h1 className="mb-4">Daftar dengan Undangan</h1>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label htmlFor="email" className="form-label">Email</label>
          <input
            type="email"
            id="email"
            className="form-control"
            value={email}
            readOnly
          />
        </div>
        <div className="mb-3">
          <label htmlFor="password1" className="form-label">Password</label>
          <input
            type="password"
            id="password1"
            className="form-control"
            value={password1}
            onChange={(e) => setPassword1(e.target.value)}
            required
          />
        </div>
        <div className="mb-3">
          <label htmlFor="password2" className="form-label">Konfirmasi Password</label>
          <input
            type="password"
            id="password2"
            className="form-control"
            value={password2}
            onChange={(e) => setPassword2(e.target.value)}
            required
          />
        </div>
        {message && <div className="alert alert-warning">{message}</div>}
        <button type="submit" className="btn btn-success" disabled={loading}>
          {loading ? 'Memproses...' : 'Daftar'}
        </button>
      </form>
    </div>
  );
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/signup/page.tsx --
// app/account/signup/page.tsx
'use client'

import React, { useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { mutate } from 'swr'

import { signUp, redirectToProvider, AuthProcess } from '../../../lib/allauth'
import { withAnonymous } from '../../../auth/AuthContext'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'
import { useRequest } from '../../../lib/helpers/useRequest'
import { useAuthConfig } from '../../../lib/hooks/useAuthConfig'
import { waitForSessionCookie } from '../../../utils/cookies'

type Provider = { id: string; name?: string }

function SignupPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const next = searchParams.get('next') || '/account'

  // Ambil konfigurasi via SWR
  const { data: rawConfig, error: configError, isLoading: loadingConfig } = useAuthConfig()

  const isSignupOpen = rawConfig?.data?.account?.is_open_for_signup ?? false
  const socialProviders = rawConfig?.data?.socialaccount?.providers ?? []

  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const { trigger: doSignup, error: signupError, loading: loadingSignup } = useRequest(signUp)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    const resp = await doSignup({ email, password })
    if (resp?.meta?.is_authenticated) {
      await mutate('/auth/session')
      await waitForSessionCookie()
      router.push(next)
    }
  }

  if (loadingConfig) {
    return <div className="container mt-5">Memuat konfigurasi…</div>
  }
  if (configError) {
    return <div className="container mt-5 text-danger">Gagal memuat konfigurasi.</div>
  }

  return (
    <div className="container mt-5" style={{ maxWidth: 500 }}>
      <h2 className="mb-3">Daftar Akun</h2>

      {!isSignupOpen ? (
        <div className="alert alert-warning">
          <p className="mb-1">Pendaftaran akun baru ditutup.</p>
          <p className="mb-0">
            Ajukan permintaan undangan di{' '}
            <Link href="/account/invitation" className="text-primary">
              halaman undangan
            </Link>.
          </p>
        </div>
      ) : (
        <>
          <p>
            Sudah punya akun? <Link href="/account/login">Login di sini</Link>
          </p>

          {signupError && <div className="alert alert-danger">{signupError}</div>}

          <form onSubmit={handleSubmit} className="mb-4">
            <div className="mb-3">
              <label htmlFor="email" className="form-label">
                Email
              </label>
              <input
                id="email"
                type="email"
                className="form-control"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loadingSignup}
              />
            </div>

            <div className="mb-3">
              <label htmlFor="password" className="form-label">
                Password
              </label>
              <input
                id="password"
                type="password"
                className="form-control"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loadingSignup}
              />
            </div>

            <button type="submit" className="btn btn-primary" disabled={loadingSignup}>
              {loadingSignup ? 'Mendaftar…' : 'Daftar'}
            </button>
          </form>

          {socialProviders.length > 0 && (
            <div>
              <h5>Atau daftar dengan:</h5>
              <ul className="list-unstyled">
                {socialProviders.map((provider: Provider) => (
                  <li key={provider.id} className="mb-2">
                    <button
                      onClick={() =>
                        redirectToProvider(provider.id, '/account/provider/callback', AuthProcess.LOGIN)
                      }
                      className="btn btn-outline-secondary w-100"
                    >
                      Daftar dengan {provider.name ?? provider.id}
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </>
      )}
    </div>
  )
}

const AnonymousSignup = withAnonymous(SignupPage)

export default function SignupPageWrapper() {
  return (
    <ClientOnly>
      <AnonymousSignup />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/provider/page.tsx --
// app/account/provider/page.tsx
'use client'

import React, { useState } from 'react'
import { withAuth, useConfig } from '../../../auth/AuthContext'
import {
  disconnectProviderAccount,
  redirectToProvider,
  AuthProcess,
  ProviderAccount,
} from '../../../lib/allauth'
import Button from '../../../components/Button'
import { ClientOnly } from '../../../lib/helpers/ClientOnly'
import { useRequest } from '../../../lib/helpers/useRequest'
import { useProviderAccounts } from '../../../lib/hooks/useProviderAccounts'

function ProvidersPage() {
  const config = useConfig()
  const {
    data,
    mutate,
    isLoading: loadingAccounts,
    error: fetchError,
  } = useProviderAccounts()

  const accounts: ProviderAccount[] = data?.data ?? []
  const socialProviders = config?.socialaccount?.providers ?? []

  // ✅ pakai loadingId dari hook
  const {
    trigger: disconnect,
    error: disconnectError,
    loadingId,
  } = useRequest(disconnectProviderAccount)

  const [disconnectingId, setDisconnectingId] = useState<string | null>(null)

  const handleDisconnect = async (account: ProviderAccount) => {
    setDisconnectingId(account.uid)
    const res = await disconnect(account.provider.id, account.uid)
    if (res?.status === 200) mutate()
    setDisconnectingId(null)
  }

  return (
    <div className="container mt-5">
      <h2 className="mb-4">Akun Sosial yang Terhubung</h2>

      {/* ✅ Status akun terhubung */}
      {loadingAccounts && <p className="text-muted">⏳ Memuat akun sosial…</p>}
      {fetchError && (
        <div className="alert alert-danger">
          Gagal memuat akun sosial: {String(fetchError)}
        </div>
      )}

      <div className="table-responsive mb-4">
        <table className="table table-bordered">
          <thead>
            <tr>
              <th>UID</th>
              <th>Akun</th>
              <th>Provider</th>
              <th>Aksi</th>
            </tr>
          </thead>
          <tbody>
            {accounts.map((account) => (
              <tr key={account.uid}>
                <td>{account.uid}</td>
                <td>{account.display}</td>
                <td>{account.provider.name}</td>
                <td>
                  <Button
                    onClick={() => handleDisconnect(account)}
                    disabled={loadingId !== null && disconnectingId === account.uid}
                  >
                    {loadingId !== null && disconnectingId === account.uid
                      ? 'Memutuskan…'
                      : 'Disconnect'}
                  </Button>
                </td>
              </tr>
            ))}
            {accounts.length === 0 && !loadingAccounts && (
              <tr>
                <td colSpan={4} className="text-center text-muted">
                  Tidak ada akun sosial yang terhubung.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {disconnectError && (
        <div className="alert alert-danger">
          Gagal memutuskan akun: {String(disconnectError)}
        </div>
      )}

      {/* ✅ Bagian daftar provider sosial */}
      <div className="mt-4">
        <h4>Hubungkan Akun Sosial Baru</h4>

        {!config && (
          <p className="text-muted">⏳ Memuat daftar provider…</p>
        )}

        {config && socialProviders.length === 0 && (
          <div className="alert alert-info">
            Tidak ada provider sosial yang tersedia saat ini.
          </div>
        )}

        {socialProviders.length > 0 && (
          <ul className="list-unstyled">
            {socialProviders.map((provider) => (
              <li key={provider.id} className="mb-2">
                <button
                  onClick={() =>
                    redirectToProvider(
                      provider.id,
                      '/account/provider/callback',
                      AuthProcess.CONNECT
                    )
                  }
                  className="btn btn-outline-secondary w-100"
                >
                  Hubungkan dengan {provider.name ?? provider.id}
                </button>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  )
}

const ProtectedProvidersPage = withAuth(ProvidersPage)

export default function SecuredProvidersPage() {
  return (
    <ClientOnly>
      <ProtectedProvidersPage />
    </ClientOnly>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/provider/signup/page.tsx --
// app/account/provider/signup/page.tsx
'use client'

import React, { useEffect } from 'react'
import { useRouter } from 'next/navigation'

export default function ProviderSignupRedirect() {
  const router = useRouter()

  useEffect(() => {
    router.replace('/account/signup')
  }, [router])

  return (
    <div className="container mt-5 text-center">
      <p>Mengalihkan ke halaman signup…</p>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/account/provider/callback/page.tsx --
// app/account/provider/callback/page.tsx
'use client'

import React, { useEffect, useMemo, useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { useAuth } from '../../../../auth/AuthContext'
import { getAuth, AuthResponse } from '../../../../lib/allauth'
import { pathForPendingFlow } from '../../../../auth/routing'
import { useRequest } from '../../../../lib/helpers/useRequest'
import { mutate } from 'swr'

export default function ProviderCallbackPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { flows, isAuthenticated } = useAuth()

  const [error, setError] = useState<string | null>(null)

  const { trigger: fetchAuth, loading } = useRequest(getAuth)

  const fallbackURL = useMemo(() => {
    if (isAuthenticated) return '/account'
    return pathForPendingFlow({ data: { flows } } as AuthResponse) || '/account/login'
  }, [isAuthenticated, flows])

  useEffect(() => {
    const errorParam = searchParams.get('error')
    if (errorParam) {
      setError(decodeURIComponent(errorParam))
      return
    }

    const finalizeLogin = async () => {
      const res = await fetchAuth()
      if (!res) return setError('Gagal mengambil data sesi dari server.')

      await mutate('/auth/session')

      const flow = res.data?.flows?.find(f => f.id === 'provider_signup' && f.is_pending)
      if (flow) {
        router.replace('/account/signup')
      } else {
        router.replace(fallbackURL)
      }
    }

    finalizeLogin()
  }, [searchParams, fetchAuth, fallbackURL, router])

  if (error) {
    return (
      <div className="container mt-5">
        <h1>Login Sosial Gagal</h1>
        <div className="alert alert-danger">{error}</div>
        <Link href={fallbackURL} className="btn btn-secondary">Kembali</Link>
      </div>
    )
  }

  return (
    <div className="container mt-5">
      <h1>Menyelesaikan login…</h1>
      <p>Sedang menghubungkan akun Anda. Harap tunggu sebentar.</p>
      {loading && <p><em>Memuat data sesi…</em></p>}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/not-found.tsx --
import React from "react"
import Link from "next/link"

export default function AdminNotFound() {
  return (
    <div className="container py-5 text-center">
      <h1 className="h4 mb-3">Halaman Admin Tidak Ditemukan</h1>
      <p className="text-muted">Periksa kembali URL yang Anda akses.</p>
      <Link href="/admin" className="btn btn-outline-secondary mt-3">
        ← Kembali ke Dashboard Admin
      </Link>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/metadata.ts --
// app/admin/metadata.ts
import type { Metadata } from "next"

export const adminMetadata: Metadata = {
  title: "Admin | OEM-X",
  description: "Halaman admin OEM-X.",
  robots: { index: false, follow: false }, // 🚫 jangan diindeks Google
}

----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/layout.tsx --
// src/app/admin/layout.tsx
import React from "react"
import { adminMetadata } from "./metadata"
import AdminClientWrapper from "./AdminClientWrapper"

export const metadata = adminMetadata

export default function AdminLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="container py-4">
      <AdminClientWrapper>{children}</AdminClientWrapper>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/AdminClientWrapper.tsx --
// src/app/admin/AdminClientWrapper.tsx
"use client"

import React from "react"
import dynamic from "next/dynamic"

const BootstrapInit = dynamic(() => import("../../components/BootstrapInit"), {
  ssr: false,
})

export default function AdminClientWrapper({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <>
      {children}
      <BootstrapInit />
    </>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/hooks/useUsers.ts --
"use client"

import useSWR from "swr"
import { request } from "../../../lib/allauth"

export interface User {
  id: number
  email: string
  role: string
}

export function useUsers() {
  const { data, error, isLoading, mutate } = useSWR<User[]>(
    "/accounts/users-roles/",
    (url: string) => request<User[]>("GET", url)
  )

  return {
    users: data ?? [],
    isLoading,
    isError: !!error,
    mutate,
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/invitations/page.tsx --
// app/admin/invitations/page.tsx
'use client';

import React, { useState } from 'react';
import useSWR from 'swr';
import { withAuth } from '../../../auth/AuthContext';
import { useRequest } from '../../../lib/helpers/useRequest';
import {
  listEmailRequests,
  listInvitations,
  createInvitation,
  deleteInvitation,
  deleteEmailRequest,
  resendInvitation,
} from '../../../lib/allauth';

// Types
type EmailRequest = { id: number; email: string };
type Invitation = {
  id: number;
  email: string;
  token: string;
  invited_by: string;
  expires_at: string;
};

// SWR fetchers
const fetchEmailRequests = async (): Promise<EmailRequest[]> => {
  const res = await listEmailRequests();
  return (res as any).results || (res as any);
};

const fetchInvitations = async (): Promise<Invitation[]> => {
  const res = await listInvitations();
  return (res as any).results || (res as any);
};

// Helper buat copy link
const INVITATION_PATH = '/account/invitation/';
const copyInvitationLink = (token: string) => {
  const link = `${window.location.origin}${INVITATION_PATH}${token}`;
  navigator.clipboard.writeText(link).then(() => {
    alert(`Link undangan sudah disalin:\n${link}`);
  });
};

function AdminInvitationsPage() {
  const [manualEmail, setManualEmail] = useState('');

  const { data: emailRequests, mutate: mutateEmailReqs } = useSWR<EmailRequest[]>(
    '/invitations/email-requests',
    fetchEmailRequests
  );
  const { data: invitations, mutate: mutateInvitations } = useSWR<Invitation[]>(
    '/invitations/list',
    fetchInvitations
  );

  // Actions
  const { trigger: sendInvitation, loadingId: sendingId } = useRequest(
    async (email: string, requestId?: number) => {
      const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString();
      await createInvitation({ email, expires_at: expiresAt });
      await mutateEmailReqs();
      await mutateInvitations();
    },
    { idIndex: 1 }
  );

  const { trigger: resend, loadingId: resendingId } = useRequest(
    async (id: number) => {
      await resendInvitation(id);
      await mutateInvitations();
    },
    { idIndex: 0 }
  );

  const { trigger: removeRequest, loadingId: removingReqId } = useRequest(
    async (id: number) => {
      if (confirm('Hapus permintaan email ini?')) {
        await deleteEmailRequest(id);
        await mutateEmailReqs();
      }
    },
    { idIndex: 0 }
  );

  const { trigger: removeInvitation, loadingId: removingInvId } = useRequest(
    async (id: number) => {
      if (confirm('Hapus undangan ini?')) {
        await deleteInvitation(id);
        await mutateInvitations();
      }
    },
    { idIndex: 0 }
  );

  const { trigger: sendManual, loadingId: manualLoading } = useRequest(
    async (email: string) => {
      const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString();
      await createInvitation({ email, expires_at: expiresAt });
      await mutateInvitations();
    },
    { idIndex: 0 }
  );

  if (!emailRequests || !invitations) return <p>Loading...</p>;

  return (
    <div className="container mt-5">
      <h1 className="mb-4">Dashboard Undangan (Admin)</h1>

      {/* Form manual */}
      <section className="mb-5">
        <h2>Kirim Undangan Manual</h2>
        <form
          className="d-flex gap-2"
          onSubmit={(e) => {
            e.preventDefault();
            if (manualEmail) {
              sendManual(manualEmail);
              setManualEmail('');
            }
          }}
        >
          <input
            type="email"
            className="form-control"
            placeholder="Masukkan email"
            value={manualEmail}
            onChange={(e) => setManualEmail(e.target.value)}
            required
          />
          <button className="btn btn-primary" disabled={manualLoading !== null}>
            {manualLoading ? 'Mengirim...' : 'Kirim'}
          </button>
        </form>
      </section>

      {/* Email Requests */}
      <section className="mb-5">
        <h2>Email Requests</h2>
        {emailRequests.length === 0 && <p>Tidak ada permintaan.</p>}
        <ul className="list-group">
          {emailRequests.map((req) => (
            <li
              key={req.id}
              className="list-group-item d-flex justify-content-between align-items-center"
            >
              {req.email}
              <div>
                <button
                  className="btn btn-sm btn-success me-2"
                  disabled={sendingId === req.id}
                  onClick={() => sendInvitation(req.email, req.id)}
                >
                  {sendingId === req.id ? 'Mengirim...' : 'Kirim Undangan'}
                </button>
                <button
                  className="btn btn-sm btn-danger"
                  disabled={removingReqId === req.id}
                  onClick={() => removeRequest(req.id)}
                >
                  {removingReqId === req.id ? 'Menghapus...' : 'Hapus'}
                </button>
              </div>
            </li>
          ))}
        </ul>
      </section>

      {/* Invitations */}
      <section>
        <h2>Invitations</h2>
        {invitations.length === 0 && <p>Tidak ada undangan aktif.</p>}
        <ul className="list-group">
          {invitations.map((inv) => (
            <li
              key={inv.id}
              className="list-group-item d-flex justify-content-between align-items-center"
            >
              <span>
                {inv.email} - Expires:{' '}
                {new Intl.DateTimeFormat('id-ID', {
                  dateStyle: 'medium',
                  timeStyle: 'short',
                }).format(new Date(inv.expires_at))}
              </span>
              <div>
                <button
                  className="btn btn-sm btn-secondary me-2"
                  onClick={() => copyInvitationLink(inv.token)}
                >
                  Salin Link
                </button>
                <button
                  className="btn btn-sm btn-warning me-2"
                  disabled={resendingId === inv.id}
                  onClick={() => resend(inv.id)}
                >
                  {resendingId === inv.id ? 'Mengirim...' : 'Kirim Ulang'}
                </button>
                <button
                  className="btn btn-sm btn-danger"
                  disabled={removingInvId === inv.id}
                  onClick={() => removeInvitation(inv.id)}
                >
                  {removingInvId === inv.id ? 'Menghapus...' : 'Hapus'}
                </button>
              </div>
            </li>
          ))}
        </ul>
      </section>
    </div>
  );
}

export default withAuth(AdminInvitationsPage);


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/users/roles/page.tsx --
"use client"

import { useUsers } from "../../hooks/useUsers"
import { request } from "../../../../lib/allauth"
import { useState } from "react"
import React from "react"

const roles = ["customer", "staff", "manager", "admin"]

export default function UserListPage() {
  const { users, isLoading, isError, mutate } = useUsers()
  const [savingId, setSavingId] = useState<number | null>(null)

  if (isError) return <div className="alert alert-danger">Gagal memuat user.</div>
  if (isLoading) return <div className="text-center p-4">Memuat...</div>

  async function handleRoleChange(userId: number, newRole: string) {
    setSavingId(userId)
    try {
      await request("PATCH", `/accounts/users-roles/${userId}/`, { role: newRole })
      await mutate() // refresh list user
    } catch (err: any) {
      console.error("Gagal update role:", err)
      alert(err?.data?.detail || "Gagal mengubah role")
    } finally {
      setSavingId(null)
    }
  }

  return (
    <div className="container py-4">
      <h1 className="mb-4">User Roles Management</h1>
      <table className="table table-bordered align-middle">
        <thead className="table-light">
          <tr>
            <th>ID</th>
            <th>Email</th>
            <th>Role</th>
            <th>Aksi</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id}>
              <td>{user.id}</td>
              <td>{user.email}</td>
              <td>
                <select
                  className="form-select"
                  value={user.role}
                  onChange={(e) => handleRoleChange(user.id, e.target.value)}
                  disabled={savingId === user.id}
                >
                  {roles.map((r) => (
                    <option key={r} value={r}>
                      {r}
                    </option>
                  ))}
                </select>
              </td>
              <td>
                {savingId === user.id ? (
                  <span className="text-muted">Menyimpan...</span>
                ) : (
                  <button
                    className="btn btn-sm btn-primary"
                    onClick={() => handleRoleChange(user.id, user.role)}
                  >
                    Simpan
                  </button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/users/status/page.tsx --
"use client"

import { useState } from "react"
import useSWR from "swr"
import { request } from "../../../../lib/allauth"
import React from "react"

interface User {
  id: number
  email: string
  role: string
  is_active: boolean
  is_staff: boolean
  is_superuser: boolean
}

export default function UserPermissionPage() {
  const { data: users, mutate } = useSWR<User[]>("/accounts/user-status/", url =>
    request<User[]>("GET", url)
  )
  const [saving, setSaving] = useState<number | null>(null)

  if (!users) return <div>Loading...</div>

  async function toggleFlag(user: User, field: keyof User) {
    setSaving(user.id)
    await request("PATCH", `/accounts/user-status/${user.id}/`, {
      [field]: !user[field],
    })
    await mutate()
    setSaving(null)
  }

  return (
    <div className="container py-4">
      <h1 className="mb-4">User Status Management</h1>
      <div className="table-responsive">
        <table className="table table-bordered table-hover align-middle">
          <thead className="table-light">
            <tr>
              <th>Email</th>
              <th>Role</th>
              <th>Active</th>
              <th>Staff</th>
              <th>Superuser</th>
            </tr>
          </thead>
          <tbody>
            {users.map(u => (
              <tr key={u.id}>
                <td>{u.email}</td>
                <td>{u.role}</td>
                <td className="text-center">
                  <input
                    type="checkbox"
                    checked={u.is_active}
                    disabled={saving === u.id}
                    onChange={() => toggleFlag(u, "is_active")}
                  />
                </td>
                <td className="text-center">
                  <input
                    type="checkbox"
                    checked={u.is_staff}
                    disabled={saving === u.id}
                    onChange={() => toggleFlag(u, "is_staff")}
                  />
                </td>
                <td className="text-center">
                  <input
                    type="checkbox"
                    checked={u.is_superuser}
                    disabled={saving === u.id}
                    onChange={() => toggleFlag(u, "is_superuser")}
                  />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/blog/page.tsx --
// app/admin/blog/page.tsx
import BlogList from "../../../blog/components/BlogList"
import Link from "next/link"
import React from "react"

export default function BlogPage() {
  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h1 className="h3">My Blogs</h1>
        <Link href="/admin/blog/new" className="btn btn-primary">+ New Blog</Link>
      </div>
      <BlogList />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/blog/[id]/[slug]/page.tsx --
// app/admin/blog/[id]/[slug]/page.tsx
"use client"

import { useParams } from "next/navigation"
import PostList from "../../../../../blog/components/PostList"
import React from "react"
import Link from "next/link"

export default function BlogDetailPage() {
  const params = useParams()
  const id = params?.id as string
  const slug = params?.slug as string

  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h1 className="h3 mb-3">Blog Detail: {slug}</h1>
        <Link href={`/admin/blog`} className="btn btn-outline-secondary">
          ← Back to Blog
        </Link>
      </div>
      <PostList blogId={id} slug={slug} />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/blog/[id]/[slug]/memberships/page.tsx --
// app/admin/blog/[id]/[slug]/memberships/page.tsx
"use client"

import React from "react"
import MembershipTable from "../../../../../../blog/components/MembershipTable"
import { useParams } from "next/navigation"
import Link from "next/link"

export default function MembershipPage() {
  const params = useParams()
  const id = params?.id as string
  const slug = params?.slug as string

  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h1 className="h3 mb-0">Manage Memberships</h1>
        <Link href={`/admin/blog/${id}/${slug}`} className="btn btn-outline-secondary">
          ← Back to Blog
        </Link>
      </div>
      <MembershipTable />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/blog/[id]/[slug]/posts/new/page.tsx --
// app/admin/blog/[id]/[slug]/posts/new/page.tsx
"use client"

import React from "react"
import { useRouter, useParams } from "next/navigation"
import PostForm from "../../../../../../../blog/components/PostForm"
import type { Post } from "../../../../../../../blog/types"

export default function NewPostPage() {
  const { id, slug } = useParams()
  const blogId = id as string
  const bSlug = slug as string
  const router = useRouter()

  return (
    <div className="container py-4">
      <h5 className="h6 mb-2">Blog Detail: {bSlug}</h5>
      <h1 className="h3 mb-3">Create Post</h1>
      <PostForm
        blogId={blogId}
        bSlug={bSlug}
        onSuccess={(post: Post) => router.push(`/admin/blog/${blogId}/${bSlug}/posts/${post.id}`)}
      />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/blog/[id]/[slug]/posts/[postId]/page.tsx --
// app/admin/blog/[id]/[slug]/posts/[postId]/page.tsx
"use client"

import React from "react"
import { useParams, useRouter } from "next/navigation"
import useSWR from "swr"
import PostForm from "../../../../../../../blog/components/PostForm"
import { request } from "../../../../../../../lib/allauth"
import type { Post } from "../../../../../../../blog/types"

export default function EditPostPage() {
  const { id, slug, postId } = useParams()
  const blogId = id as string
  const bSlug = slug as string
  const router = useRouter()

  const { data, error, isLoading } = useSWR<Post>(
    postId ? `/blog/posts/${postId}/` : null,
    (url: string) => request<Post>("GET", url)
  )

  async function handleDelete() {
    if (!confirm("Yakin hapus post ini?")) return
    await request("DELETE", `/blog/posts/${postId}/`)
    router.push(`/blog/${blogId}/${bSlug}`)
  }

  if (isLoading) return <div className="container py-4">Loading...</div>
  if (error) return <div className="container py-4">Gagal memuat data.</div>
  if (!data) return null

  return (
    <div className="container py-4">
      <h5 className="h6 mb-2">Blog Detail: {bSlug}</h5>
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h1 className="h3">Edit Post</h1>
        <div className="d-flex gap-2">
          <button className="btn btn-outline-danger" onClick={handleDelete}>
            Delete
          </button>
          <a href={`/admin/blog/${blogId}/${bSlug}`} className="btn btn-outline-secondary">Back</a>
        </div>
      </div>

      <PostForm
        blogId={blogId}
        bSlug={bSlug}
        initial={data}
        method="PATCH"
        onSuccess={(post) => router.push(`/admin/blog/${blogId}/${bSlug}/posts/${post.id}`)}
      />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/blog/[id]/[slug]/posts/[postId]/view/page.tsx --
// app/admin/blog/[id]/[slug]/posts/[postId]/view/page.tsx
"use client"

import React from "react"
import { useParams, useRouter } from "next/navigation"
import useSWR from "swr"
import { request } from "../../../../../../../../lib/allauth"
import type { Post } from "../../../../../../../../blog/types"
import Link from "next/link"

import PostCover from "./PostCover"
import PostContentViewer from "./PostContentViewer"

// =============================
// SWR fetcher
// =============================
const fetchPost = (url: string) => request<Post>("GET", url)

interface ViewPostPageProps {
  fallbackData: Post // optional pre-fetched data
}

export default function ViewPostPage({ fallbackData }: ViewPostPageProps) {
  const { id, slug, postId } = useParams()
  const blogId = id as string
  const bSlug = slug as string
  const router = useRouter()

  // =============================
  // SWR fetch
  // =============================
  const { data, error, isLoading } = useSWR<Post>(
    postId ? `/blog/posts/${postId}/` : null,
    fetchPost,
    { fallbackData }
  )

  if (isLoading) return <div className="container py-4">Loading...</div>
  if (error) return <div className="container py-4 text-danger">Gagal memuat data.</div>
  if (!data) return <div className="container py-4">Post tidak ditemukan.</div>

  // =============================
  // Parse content JSON aman
  // =============================
  let nodes: any[] = []
  if (data.content) {
    try {
      nodes = JSON.parse(data.content as unknown as string)
    } catch (e) {
      console.error("Invalid content JSON", e)
    }
  }

  return (
    <div className="container py-4">
      <h1 className="mb-4">{data.title}</h1>

      {data.cover_image && (
        <PostCover src={data.cover_image} alt={data.title || "Cover image"} />
      )}

      <div className="d-flex justify-content-between align-items-center mb-3">
        <div className="btn-group">
          <Link
            href={`/admin/blog/${blogId}/${bSlug}/posts/${postId}`}
            className="btn btn-sm btn-primary"
          >
            Edit
          </Link>
          <button className="btn btn-sm btn-secondary" onClick={() => router.back()}>
            Back
          </button>
        </div>
      </div>

      <PostContentViewer nodes={nodes} fallbackAlt={data.title || undefined} />

      <hr />
      <p className="text-muted small">
        Created: {new Date(data.created_at).toLocaleString()} <br />
        Updated: {new Date(data.updated_at).toLocaleString()}
      </p>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/blog/[id]/[slug]/posts/[postId]/view/PostCover.tsx --
// app/admin/blog/[id]/[slug]/posts/[postId]/view/PostCover.tsx
"use client"

import React from "react"

interface PostCoverProps {
  src?: string | null
  alt?: string
}

export default function PostCover({ src, alt }: PostCoverProps) {
  if (!src) return null

  return (
    <div className="mb-4 text-center">
      <img
        src={src}
        alt={alt || "Cover image"}
        className="img-fluid rounded shadow-sm"
        style={{ maxHeight: 420, objectFit: "cover", width: "100%" }}
      />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/blog/[id]/[slug]/posts/[postId]/view/PostContentViewer.tsx --
// app/admin/blog/[id]/[slug]/posts/[postId]/view/PostContentViewer.tsx
"use client"

import React from "react"
import { Descendant } from "slate"
import { renderNode } from "../../../../../../../../components/wysiwyg/renderers"

interface PostContentViewerProps {
  nodes: Descendant[]
  fallbackAlt?: string
}

export default function PostContentViewer({ nodes, fallbackAlt }: PostContentViewerProps) {
  if (!nodes || nodes.length === 0) return <p>No content</p>

  return (
    <div className="post-content">
      {nodes.map((node, i) => renderNode(node, i, fallbackAlt))}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/blog/[id]/[slug]/edit/page.tsx --
// app/admin/blog/[id]/[slug]/edit/page.tsx
"use client"

import React from "react"
import useSWR from "swr"
import { useParams, useRouter } from "next/navigation"
import BlogForm from "../../../../../../blog/components/BlogForm"
import { request } from "../../../../../../lib/allauth"
import type { Blog } from "../../../../../../blog/types"

export default function EditBlogPage() {
  const router = useRouter()
  const { id, slug } = useParams()
  const blogId = id as string
  const bSlug = slug as string

  const { data, error, isLoading } = useSWR<Blog>(
    blogId ? `/blog/blogs/${blogId}/` : null,
    (url: string) => request<Blog>("GET", url)
  )

  async function handleDelete() {
    if (!confirm("Yakin hapus blog ini? Aksi tidak bisa dibatalkan.")) return
    await request("DELETE", `/blog/blogs/${blogId}/`)
    router.push("/admin/blog")
  }

  if (isLoading) return <div className="container py-4">Loading...</div>
  if (error) return <div className="container py-4">Gagal memuat data.</div>
  if (!data) return null

  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h1 className="h3">Edit Blog</h1>
        <div className="d-flex gap-2">
          <button className="btn btn-outline-danger" onClick={handleDelete}>
            Delete
          </button>
          <a href={`/admin/blog/${blogId}/${bSlug}`} className="btn btn-outline-secondary">Back</a>
        </div>
      </div>

      <BlogForm
        initial={data}
        method="PATCH"
        onSuccess={(blog) => router.push(`/admin/blog/${blog.id}/${blog.slug}`)}
      />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/admin/blog/new/page.tsx --
// app/admin/blog/new/page.tsx
"use client"

import React from "react"
import { useRouter } from "next/navigation"
import BlogForm from "../../../../blog/components/BlogForm"
import type { Blog } from "../../../../blog/types"

export default function NewBlogPage() {
  const router = useRouter()
  return (
    <div className="container py-4">
      <h1 className="h3 mb-3">Create Blog</h1>
      <BlogForm onSuccess={(blog: Blog) => router.push(`/admin/blog/${blog.id}/${blog.slug}`)} />
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/not-found.tsx --
// app/blog/not-found.tsx
import React from "react"
import type { Metadata } from "next"
import Link from "next/link"

export const metadata: Metadata = {
  title: "Blog tidak ditemukan",
  description: "Konten yang kamu cari di blog tidak tersedia.",
  robots: { index: false, follow: false }, // 🚫 noindex global untuk semua 404 blog
}

export default function BlogNotFound() {
  return (
    <div className="container py-5 text-center">
      <h1 className="display-6 fw-bold mb-3">Blog tidak ditemukan 📝</h1>
      <p className="text-muted mb-4">
        Halaman atau artikel yang kamu cari tidak tersedia.
      </p>
      <Link href="/blog" className="btn btn-outline-primary">
        ← Kembali ke Blog
      </Link>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/metadata.ts --
// app/blog/metadata.ts
import type { Metadata } from "next"

export const blogMetadata: Metadata = {
  title: "Blog | OEM-X",
  description:
    "Jelajahi kumpulan blog publik di OEM-X. Temukan artikel terbaru yang dipublikasikan.",
  robots: {
    index: true,  // ✅ blog publik boleh diindeks
    follow: true,
  },
  openGraph: {
    title: "Blog | OEM-X",
    description:
      "Jelajahi kumpulan blog publik di OEM-X. Temukan artikel terbaru yang dipublikasikan.",
    type: "website",
    url: "https://oem-x.my.id/blog",
    images: [
      {
        url: "https://oem-x.my.id/next.svg",
        width: 1200,
        height: 630,
        alt: "OEM-X Blog",
      },
    ],
  },
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/page.tsx --
// app/blog/page.tsx
import React from "react"
import Link from "next/link"
import type { Metadata } from "next"
import { request } from "../../lib/allauth"

export default async function BlogListPage() {
  const res = await request<any>("GET", "/blog/public/blogs/")
  const blogs = Array.isArray(res) ? res : res?.results ?? []

  if (!blogs || blogs.length === 0) {
    return (
      <div className="container py-5 text-center">
        <h1 className="h3 mb-3">Daftar Blog</h1>
        <p className="text-muted">Belum ada blog yang tersedia.</p>
      </div>
    )
  }

  return (
    <div className="container py-5" style={{ maxWidth: "1000px" }}>
      <h1 className="display-6 fw-bold mb-4 text-center">Daftar Blog</h1>
      <div className="row g-4">
        {blogs.map((b: any) => (
          <div className="col-md-6 col-lg-4" key={b.id}>
            <div className="card h-100 shadow-sm border-0">
              <div className="card-body d-flex flex-column">
                <h5 className="card-title mb-2">
                  <Link
                    href={`/blog/${b.slug}`}
                    className="stretched-link text-decoration-none text-dark"
                  >
                    {b.title}
                  </Link>
                </h5>
                {b.description && (
                  <p className="card-text text-muted small">
                    {b.description.length > 120
                      ? b.description.slice(0, 120) + "..."
                      : b.description}
                  </p>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}

// ✅ Tambahan Metadata untuk SEO
export async function generateMetadata(): Promise<Metadata> {
  let blogs: any[] = []
  try {
    const res = await request<any>("GET", "/blog/public/blogs/")
    blogs = Array.isArray(res) ? res : res?.results ?? []
  } catch {
    blogs = []
  }

  const latest = blogs[0]

  return {
    title: "Daftar Blog | OEM-X",
    description:
      latest?.description?.slice(0, 150) ||
      "Jelajahi kumpulan blog publik di OEM-X. Temukan artikel terbaru yang dipublikasikan.",
    openGraph: {
      title: "Daftar Blog | OEM-X",
      description:
        latest?.description?.slice(0, 150) ||
        "Jelajahi kumpulan blog publik di OEM-X. Temukan artikel terbaru yang dipublikasikan.",
      type: "website",
      url: "https://oem-x.my.id/blog",
      images: [
        {
          url: "https://oem-x.my.id/next.svg",
          width: 1200,
          height: 630,
          alt: "OEM-X Blog",
        },
      ],
    },
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/layout.tsx --
// app/blog/layout.tsx
import React from "react"
import { blogMetadata } from "./metadata"

export const metadata = blogMetadata

export default function BlogLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <>{children}</>
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/index/page.tsx --
// src/app/blog/home/page.tsx
import React from "react"
import Link from "next/link"
import { request } from "../../../lib/allauth"
import { renderPlainNode } from "../../../components/wysiwyg/renderers"
import { Descendant } from "slate"
import type { Metadata } from "next"

export default async function BlogIndexPage() {
  const res = await request<any>("GET", "/blog/public/posts/")
  const posts = Array.isArray(res) ? res : res?.results ?? []

  if (!posts || posts.length === 0) {
    return (
      <div className="container py-5 text-center">
        <h1 className="h3 mb-3">Beranda Blog</h1>
        <p className="text-muted">Belum ada posting yang dipublikasikan.</p>
      </div>
    )
  }

  return (
    <div className="container py-5" style={{ maxWidth: "1000px" }}>
      <h1 className="display-6 fw-bold mb-4 text-center">Semua Artikel Terbaru</h1>
      <div className="row g-4">
        {posts.map((p: any) => {
          const content: Descendant[] =
            typeof p.content === "string" ? JSON.parse(p.content) : p.content
          const excerptNodes = content.slice(0, 2)

          return (
            <div className="col-md-6 col-lg-4" key={p.id}>
              <div className="card h-100 shadow-sm border-0">
                <div className="card-body d-flex flex-column">
                  <h5 className="card-title">
                    <Link
                      href={`/blog/${p.blog}/${p.slug}`}
                      className="stretched-link text-decoration-none text-dark"
                    >
                      {p.title}
                    </Link>
                  </h5>
                  <p className="card-subtitle mb-2 text-muted small">
                    {new Date(p.published_at).toLocaleDateString("id-ID", {
                      day: "numeric",
                      month: "long",
                      year: "numeric",
                    })}
                  </p>
                  <div
                    className="card-text text-truncate"
                    style={{ maxHeight: "4.5rem", overflow: "hidden" }}
                  >
                    {excerptNodes.map((node, i) => renderPlainNode(node, i))}
                  </div>
                </div>
              </div>
            </div>
          )
        })}
      </div>
    </div>
  )
}

// ✅ SEO Metadata
export const metadata: Metadata = {
  title: "Beranda Blog | OEM-X",
  description: "Kumpulan semua artikel terbaru dari berbagai blog di OEM-X.",
  openGraph: {
    title: "Beranda Blog | OEM-X",
    description: "Kumpulan semua artikel terbaru dari berbagai blog di OEM-X.",
    type: "website",
    url: "https://oem-x.my.id/blog/home",
    images: [
      {
        url: "https://oem-x.my.id/next.svg",
        width: 1200,
        height: 630,
        alt: "OEM-X Blog",
      },
    ],
  },
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/[slug]/metadata.ts --
// app/blog/[slug]/metadata.ts
import type { Metadata } from "next"

export const blogDetailMetadata: Metadata = {
  title: "Detail Blog | OEM-X",
  description: "Artikel dan konten dari blog tertentu di OEM-X.",
  robots: {
    index: true,  // ✅ default diindeks, nanti bisa override di generateMetadata()
    follow: true,
  },
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/[slug]/page.tsx --
// app/blog/[slug]/page.tsx
import React from "react"
import Link from "next/link"
import { notFound } from "next/navigation"
import { request } from "../../../lib/allauth"
import { renderPlainNode } from "../../../components/wysiwyg/renderers"
import { Descendant } from "slate"
import type { Metadata } from "next"

export default async function BlogPublicPage(
  props: { params: Promise<{ slug: string }> }
) {
  const { slug } = await props.params

  const res = await request<any>("GET", `/blog/public/posts/?blog=${slug}`)
  const posts = Array.isArray(res) ? res : res?.results ?? []

  if (!posts || posts.length === 0) {
    notFound() // 🚫 auto redirect ke app/blog/not-found.tsx
  }

  return (
    <div className="container py-5" style={{ maxWidth: "1000px" }}>
      <h1 className="display-6 fw-bold mb-4 text-center">Blog: {slug}</h1>
      <div className="row g-4">
        {posts.map((p: any) => {
          const content: Descendant[] =
            typeof p.content === "string" ? JSON.parse(p.content) : p.content
          const excerptNodes = content.slice(0, 2)

          return (
            <div className="col-md-6 col-lg-4" key={p.id}>
              <div className="card h-100 shadow-sm border-0">
                <div className="card-body d-flex flex-column">
                  <h5 className="card-title">
                    <Link
                      href={`/blog/${slug}/${p.slug}`}
                      className="stretched-link text-decoration-none text-dark"
                    >
                      {p.title}
                    </Link>
                  </h5>
                  <p className="card-subtitle mb-2 text-muted small">
                    {new Date(p.published_at).toLocaleDateString("id-ID", {
                      day: "numeric",
                      month: "long",
                      year: "numeric",
                    })}
                  </p>
                  <div
                    className="card-text text-truncate"
                    style={{ maxHeight: "4.5rem", overflow: "hidden" }}
                  >
                    {excerptNodes.map((node, i) => renderPlainNode(node, i))}
                  </div>
                </div>
              </div>
            </div>
          )
        })}
      </div>
    </div>
  )
}

// ✅ Metadata SEO
export async function generateMetadata(
  props: { params: Promise<{ slug: string }> }
): Promise<Metadata> {
  const { slug } = await props.params

  let posts: any[] = []
  try {
    const res = await request<any>("GET", `/blog/public/posts/?blog=${slug}`)
    posts = Array.isArray(res) ? res : res?.results ?? []
  } catch {
    posts = []
  }

  if (!posts || posts.length === 0) {
    // ❌ noindex di sini dihapus → ditangani oleh not-found.tsx
    return {}
  }

  const latest = posts[0]
  const title = `Blog ${slug} | OEM-X`
  const description =
    latest?.content
      ? (typeof latest.content === "string"
        ? JSON.parse(latest.content)
        : latest.content
      )
        .map((node: any) => ("text" in node ? node.text : ""))
        .join(" ")
        .slice(0, 150)
      : `Kumpulan artikel terbaru dari blog ${slug}.`

  const image = "https://oem-x.my.id/next.svg"

  return {
    title,
    description,
    openGraph: {
      title,
      description,
      type: "website",
      url: `https://oem-x.my.id/blog/${slug}`,
      images: [{ url: image, width: 1200, height: 630, alt: "OEM-X Blog" }],
    },
    twitter: {
      card: "summary_large_image",
      title,
      description,
      images: [image],
    },
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/[slug]/layout.tsx --
// app/blog/[slug]/layout.tsx
import React from "react"
import { blogDetailMetadata } from "./metadata"

export const metadata = blogDetailMetadata

export default function BlogDetailLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <>{children}</>
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/[slug]/[postSlug]/metadata.ts --
// app/blog/[slug]/[postSlug]/metadata.ts
import type { Metadata } from "next"

export const blogPostMetadata: Metadata = {
  title: "Artikel Blog | OEM-X",
  description: "Baca artikel menarik di OEM-X Blog.",
  robots: {
    index: true,  // ✅ default diindeks, kalau post not found → generateMetadata override ke noindex
    follow: true,
  },
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/[slug]/[postSlug]/page.tsx --
// src/app/blog/[slug]/[postSlug]/page.tsx
import React from "react"
import Link from "next/link"
import { notFound } from "next/navigation"
import { request } from "../../../../lib/allauth"
import { ImageViewer } from "../../../../components/wysiwyg/ImageViewer"
import { Descendant, Text } from "slate"

// ----- Utility untuk render read-only Slate content -----
function renderNode(node: Descendant, key: number, fallbackAlt?: string): React.ReactNode {
  // Text node
  if (Text.isText(node)) {
    let children: React.ReactNode = node.text
    if (node.bold) children = <strong>{children}</strong>
    if (node.italic) children = <em>{children}</em>
    if (node.underline) children = <u>{children}</u>
    if (node.code) children = <code>{children}</code>
    return <span key={key}>{children}</span>
  }

  // Children
  const children = node.children.map((n, i) => renderNode(n, i, fallbackAlt))

  // Style align
  const style: React.CSSProperties = {}
  if ("align" in node && node.align) style.textAlign = node.align as any

  // Element types
  switch (node.type) {
    case "heading-one":
      return <h1 key={key} style={style}>{children}</h1>
    case "heading-two":
      return <h2 key={key} style={style}>{children}</h2>
    case "block-quote":
      return <blockquote key={key} className="blockquote" style={style}>{children}</blockquote>
    case "blockquote-footer":
      return <footer key={key} className="blockquote-footer" style={style}>{children}</footer>
    case "numbered-list":
      return <ol key={key} style={style}>{children}</ol>
    case "bulleted-list":
      return <ul key={key} style={style}>{children}</ul>
    case "list-item":
      return <li key={key} style={style}>{children}</li>
    case "code-block":
      return (
        <pre key={key} style={{ ...style, background: "#f8f9fa", padding: "0.75rem", borderRadius: "0.25rem", overflowX: "auto" }}>
          <code>{children}</code>
        </pre>
      )
    case "image":
      return (
        <ImageViewer
          key={key}
          url={(node as any).url}
          alt={(node as any).alt || fallbackAlt}
          width={(node as any).width}
          height={(node as any).height}
          align={(node as any).align}
          wrap={(node as any).wrap}
        />
      )
    default:
      return <p key={key} style={style}>{children}</p>
  }
}

// Flatten Slate content untuk metadata/deskripsi
function flattenSlateText(nodes: Descendant[]): string {
  return nodes
    .map((node: any) => {
      if ("text" in node) return node.text
      if (Array.isArray(node.children)) return flattenSlateText(node.children)
      return ""
    })
    .join(" ")
    .trim()
}

// ----- Page Component -----
export default async function BlogPostPage({ params: rawParams }: any) {
  const params = await rawParams
  const { slug, postSlug } = params

  const res = await request<any>(
    "GET",
    `/blog/public/posts/?blog=${slug}&slug=${postSlug}`
  )
  const posts = Array.isArray(res) ? res : res?.results ?? []
  const post = posts[0]

  if (!post) notFound()

  const content: Descendant[] =
    post.content && typeof post.content === "string"
      ? JSON.parse(post.content)
      : Array.isArray(post.content)
        ? post.content
        : []

  return (
    <div className="container py-5" style={{ maxWidth: "900px" }}>
      <h1 className="display-5 fw-bold mb-3">{post.title}</h1>

      <div className="text-muted mb-4">
        <small>
          Dipublikasikan{" "}
          {new Date(post.published_at).toLocaleDateString("id-ID", {
            day: "numeric",
            month: "long",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
          })}{" "}
          oleh <strong>{post.author_email}</strong>
        </small>
      </div>

      {/* Cover Image */}
      {post.cover_image && (
        <div className="mb-4 text-center">
          <img
            src={post.cover_image}
            alt={post.title}
            className="img-fluid rounded w-100 w-xl-75 w-xxl-50"
            style={{
              maxHeight: "75vh",
              objectFit: "contain",
              backgroundColor: "#000",
              margin: "0 auto",
              display: "block",
            }}
          />
        </div>
      )}

      <article className="fs-5 lh-lg">
        {content.map((node, i) => renderNode(node, i, post.title))}
      </article>

      <hr className="my-5" />

      <div className="d-flex justify-content-between align-items-center">
        <Link href={`/blog/${slug}`} className="btn btn-outline-secondary">
          ← Kembali ke Blog
        </Link>
        <Link href={`/`} className="btn btn-outline-primary">
          🏠 Halaman Utama
        </Link>
        <div className="text-muted small">
          Bagikan artikel ini jika bermanfaat ✨
        </div>
      </div>
    </div>
  )
}

// ----- Metadata -----
export async function generateMetadata({ params: rawParams }: any) {
  const params = await rawParams
  const { slug, postSlug } = params

  const res = await request<any>(
    "GET",
    `/blog/public/posts/?blog=${slug}&slug=${postSlug}`
  )
  const posts = Array.isArray(res) ? res : res?.results ?? []
  const post = posts[0]

  if (!post) return { title: "Artikel Tidak Ditemukan" }

  const content: Descendant[] =
    post.content && typeof post.content === "string"
      ? JSON.parse(post.content)
      : Array.isArray(post.content)
        ? post.content
        : []

  const postContent = flattenSlateText(content).slice(0, 200)

  return {
    title: post.title,
    description: postContent || "Artikel di OEM-X Blog",
    alternates: { canonical: `https://oem-x.my.id/blog/${slug}/${postSlug}` },
    openGraph: {
      title: post.title,
      description: postContent || "",
      url: `https://oem-x.my.id/blog/${slug}/${postSlug}`,
      type: "article",
      images: [{ url: post.cover_image || "https://oem-x.my.id/next.svg", width: 1200, height: 630, alt: post.title }],
    },
    twitter: {
      card: "summary_large_image",
      title: post.title,
      description: postContent || "",
      images: [post.cover_image || "https://oem-x.my.id/next.svg"],
    },
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/blog/[slug]/[postSlug]/layout.tsx --
// app/blog/[slug]/[postSlug]/layout.tsx
import React from "react"
import { blogPostMetadata } from "./metadata"

export const metadata = blogPostMetadata

export default function BlogPostLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <>{children}</>
}


----------------------------------------


-- /nextjs_oem_frontend/src/types/index.ts --
// src/types/index.ts
export type Provider = {
  id: string
  name?: string
}


----------------------------------------


-- /nextjs_oem_frontend/src/types/bootstrap-js.d.ts --
declare module 'bootstrap/dist/js/bootstrap.bundle.min.js'

----------------------------------------


-- /nextjs_oem_frontend/src/blog/types.ts --
// blog/types.ts
export interface Blog {
  id: number
  title: string
  slug: string
  description?: string
  owner: number
  owner_email: string
  created_at: string
}

export interface BlogRole {
  value: "admin" | "editor" | "author"
  label: string
}

export interface Membership {
  id: number
  blog: number
  user: number
  user_email: string
  role: string
  role_display: string
  added_at: string
}

export interface Post {
  id: number
  blog: number
  title: string
  slug: string
  content: string
  cover_image?: string   // ✅ baru, optional (karena bisa null/blank di backend)
  published: boolean
  published_at?: string
  created_at: string
  updated_at: string
  author: number
  author_email: string
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/hooks/useMemberships.ts --
"use client"

import useSWR from "swr"
import { request } from "../../lib/allauth"
import { Membership } from "../types"

type PaginatedResponse<T> = {
  count: number
  next: string | null
  previous: string | null
  results: T[]
}

export function useMemberships(blogId: string | number) {
  const { data, error, isLoading, mutate } = useSWR<
    Membership[] | PaginatedResponse<Membership>
  >(
    blogId ? `/blog/memberships/?blog=${blogId}` : null,
    (url: string) =>
      request<Membership[] | PaginatedResponse<Membership>>("GET", url) // ✅ kasih generic
  )

  const memberships =
    Array.isArray(data) ? data : data?.results ?? []

  return {
    memberships,
    isLoading,
    isError: !!error,
    mutate,
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/hooks/useBlogs.ts --
// blog/hooks/useBlogs.ts
"use client"

import useSWR from "swr"
import { request } from "../../lib/allauth"
import { Blog } from "../types"

export function useBlogs() {
  const { data, error, isLoading, mutate } = useSWR(
    "/blog/blogs/",
    async (url: string) => {
      const res = await request<any>("GET", url)
      return Array.isArray(res) ? res : res?.results ?? []
    }
  )

  return {
    blogs: (data as Blog[]) ?? [],
    isLoading,
    isError: !!error,
    mutate,
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/hooks/useBlogRoles.ts --
"use client"

import useSWR from "swr"
import { request } from "../../lib/allauth"

export interface BlogRole {
  value: "admin" | "editor" | "author"
  label: string
}

/**
 * Fetch daftar role blog (untuk dropdown UI).
 */
export function useBlogRoles() {
  const { data, error, isLoading, mutate } = useSWR<BlogRole[]>(
    "/blog/roles/",
    (url: string) => request<BlogRole[]>("GET", url),   // ✅ fixed
    { revalidateOnFocus: false }
  )

  return {
    roles: data ?? [],
    isLoading,
    isError: !!error,
    mutate,
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/hooks/usePosts.ts --
// blog/hooks/usePosts.ts
"use client"

import useSWR from "swr"
import { request } from "../../lib/allauth"
import { Post } from "../types"

export function usePosts(blogId: string) {
  const { data, error, isLoading, mutate } = useSWR<Post[]>(
    `/blog/posts/?blog=${blogId}`,
    async (url: string) => {
      const res = await request<any>("GET", url)
      // Normalisasi supaya selalu array
      return Array.isArray(res) ? res : res?.results ?? []
    }
  )

  return {
    posts: data ?? [],   // ✅ dijamin array
    isLoading,
    isError: !!error,
    mutate,
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/components/AddMembershipForm.tsx --
// blog/components/AddMembershipForm.tsx
"use client"

import React, { useState } from "react"
import { request } from "../../lib/allauth"

export default function AddMembershipForm({ blogId, onAdded }: { blogId: string, onAdded: () => void }) {
  const [email, setEmail] = useState("")
  const [role, setRole] = useState("author")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    setLoading(true)
    setError(null)
    try {
      await request("POST", "/blog/memberships/add_by_email/", { blog: blogId, email: email, role })
      setEmail("")
      setRole("author")
      onAdded() // refresh memberships
    } catch (err: any) {
      setError(err?.data?.detail || "Gagal menambah member")
    } finally {
      setLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="d-flex gap-2 mb-3">
      <input
        type="email"
        className="form-control"
        placeholder="Email member"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        required
      />
      <select className="form-select" value={role} onChange={(e) => setRole(e.target.value)}>
        <option value="author">Author</option>
        <option value="editor">Editor</option>
        <option value="admin">Admin</option>
      </select>
      <button className="btn btn-primary" disabled={loading}>
        {loading ? "Adding..." : "Add"}
      </button>
      {error && <div className="text-danger">{error}</div>}
    </form>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/components/BlogRoleSelect.tsx --
"use client"

import React from "react"
import { useBlogRoles } from "../hooks/useBlogRoles"

interface Props {
  value: string
  onChange: (val: string) => void
}

export default function BlogRoleSelect({ value, onChange }: Props) {
  const { roles, isLoading, isError } = useBlogRoles()

  if (isLoading) return <p>Loading roles...</p>
  if (isError) return <p>Gagal load roles</p>

  return (
    <select
      className="form-select"
      value={value}
      onChange={(e) => onChange(e.target.value)}
    >
      {roles.map((r) => (
        <option key={r.value} value={r.value}>
          {r.label}
        </option>
      ))}
    </select>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/components/PostList.tsx --
// blog/components/PostList.tsx
"use client"

import Link from "next/link"
import { usePosts } from "../hooks/usePosts"
import { request } from "../../lib/allauth"
import React from "react"

interface PostListProps {
  blogId: string,
  slug: string
}

export default function PostList({ blogId, slug }: PostListProps) {
  const { posts, isLoading, isError, mutate } = usePosts(blogId)

  async function handleDelete(postId: number) {
    await request("DELETE", `/blog/posts/${postId}/`)
    mutate()
  }

  if (isLoading) return <p>Loading posts...</p>
  if (isError) return <p>Gagal memuat posts</p>

  return (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h2 className="h4">Posts</h2>
        <Link href={`/admin/blog/${blogId}/${slug}/posts/new`} className="btn btn-primary btn-sm">
          + New Post
        </Link>
      </div>

      {!posts || posts.length === 0 ? (
        <p className="text-muted">Belum ada post.</p>
      ) : (
        <table className="table table-striped align-middle">
          <thead>
            <tr>
              <th>Judul</th>
              <th>Author</th>
              <th>Status</th>
              <th>Dibuat</th>
              <th style={{ width: "180px" }}>Aksi</th>
            </tr>
          </thead>
          <tbody>
            {(posts ?? []).map((p) => (
              <tr key={p.id}>
                <td>
                  <Link
                    href={`/admin/blog/${blogId}/${slug}/posts/${p.id}`}
                    className="text-decoration-none"
                  >
                    {p.title}
                  </Link>
                </td>
                <td>{p.author_email}</td>
                <td>
                  {p.published ? (
                    <span className="badge bg-success">Published</span>
                  ) : (
                    <span className="badge bg-secondary">Draft</span>
                  )}
                </td>
                <td>{new Date(p.created_at).toLocaleString("id-ID")}</td>
                <td>
                  <div className="btn-group btn-group-sm" role="group">
                    <Link
                      href={`/admin/blog/${blogId}/${slug}/posts/${p.id}/view`}
                      className="btn btn-outline-secondary"
                    >
                      View
                    </Link>
                    <Link
                      href={`/admin/blog/${blogId}/${slug}/posts/${p.id}`}
                      className="btn btn-outline-primary"
                    >
                      Edit
                    </Link>
                    <button
                      className="btn btn-outline-danger"
                      onClick={() => handleDelete(p.id)}
                    >
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/components/PostForm.tsx --
// blog/components/PostForm.tsx
"use client"

import React, { useState } from "react"
import { request } from "../../lib/allauth"
import type { Post } from "../types"
import RichTextEditor from "../../components/wysiwyg/RichTextEditor"
import { Descendant } from "slate"

type Props = {
  blogId: string
  bSlug: string
  initial?: Partial<Post>
  onSuccess?: (post: Post) => void
  method?: "POST" | "PATCH" | "PUT"
}

export default function PostForm({ blogId, bSlug, initial, onSuccess, method }: Props) {
  const [title, setTitle] = useState(initial?.title ?? "")
  const [content, setContent] = useState<Descendant[]>(
    initial?.content
      ? JSON.parse(initial.content as string)
      : [{ type: "paragraph", children: [{ text: "" }] }]
  )
  const [published, setPublished] = useState(initial?.published ?? false)
  const [coverImage, setCoverImage] = useState<File | null>(null)
  const [submitting, setSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    setSubmitting(true)
    setError(null)
    try {
      // content langsung dipakai tanpa cleaning caption
      const formData = new FormData()
      formData.append("blog", blogId)
      formData.append("title", title)
      formData.append("content", JSON.stringify(content))
      formData.append("published", String(published))
      if (coverImage) {
        formData.append("cover_image", coverImage)
      }

      let post: Post
      if (initial?.id) {
        post = await request<Post>(
          method ?? "PATCH",
          `/blog/posts/${initial.id}/`,
          formData
        )
      } else {
        post = await request<Post>(
          "POST",
          "/blog/posts/",
          formData
        )
      }
      onSuccess?.(post)
    } catch (err: any) {
      const msg = err?.detail || err?.message || "Gagal menyimpan post."
      setError(typeof msg === "string" ? msg : JSON.stringify(msg))
    } finally {
      setSubmitting(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="card" encType="multipart/form-data">
      <div className="card-body">
        <div className="mb-3">
          <label className="form-label">Title</label>
          <input
            className="form-control"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
            maxLength={255}
          />
        </div>

        <div className="mb-3">
          <label className="form-label">Content</label>
          <RichTextEditor value={content} onChange={setContent} />
        </div>

        <div className="mb-3">
          <label className="form-label">Cover Image</label>
          <input
            type="file"
            className="form-control"
            accept="image/*"
            onChange={(e) => setCoverImage(e.target.files?.[0] || null)}
          />
          {initial?.cover_image && !coverImage && (
            <div className="mt-2">
              <img
                src={initial.cover_image}
                alt="Current cover"
                className="img-fluid rounded"
                style={{ maxHeight: "200px" }}
              />
            </div>
          )}
        </div>

        <div className="form-check mb-3">
          <input
            type="checkbox"
            className="form-check-input"
            id="published"
            checked={published}
            onChange={(e) => setPublished(e.target.checked)}
          />
          <label className="form-check-label" htmlFor="published">
            Published
          </label>
        </div>

        {error && <div className="alert alert-danger">{error}</div>}

        <div className="d-flex gap-2">
          <button className="btn btn-primary" type="submit" disabled={submitting}>
            {submitting ? "Saving..." : "Save"}
          </button>
          {initial?.id && (
            <a href={`/admin/blog/${blogId}/${bSlug}`} className="btn btn-outline-secondary">
              Cancel
            </a>
          )}
        </div>
      </div>
    </form>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/components/MembershipTable.tsx --
"use client"

import React from "react"
import { useParams } from "next/navigation"
import AddMembershipForm from "./AddMembershipForm"
import { useMemberships } from "../hooks/useMemberships"
import BlogRoleSelect from "./BlogRoleSelect"
import { request } from "../../lib/allauth"

function RoleBadge({ role }: { role: string }) {
  const colors: Record<string, string> = {
    admin: "badge bg-danger",
    editor: "badge bg-primary",
    author: "badge bg-success",
    reader: "badge bg-secondary",
  }
  return <span className={colors[role] || "badge bg-light"}>{role}</span>
}

export default function MembershipTable() {
  const { id } = useParams()
  const blogId = id as string
  const { memberships, isLoading, isError, mutate } = useMemberships(blogId)

  async function handleRoleChange(membershipId: number, newRole: string) {
    await request("PATCH", `/blog/memberships/${membershipId}/`, { role: newRole })
    mutate()
  }

  async function handleRemove(membershipId: number) {
    await request("DELETE", `/blog/memberships/${membershipId}/`)
    mutate()
  }

  if (isLoading) return <p>Loading memberships...</p>
  if (isError) return <p className="text-danger">Gagal memuat membership</p>

  return (
    <div>
      <AddMembershipForm blogId={blogId} onAdded={mutate} />

      <table className="table table-hover mt-3">
        <thead className="table-light">
          <tr>
            <th>Email</th>
            <th>Role</th>
            <th>Added At</th>
            <th>Aksi</th>
          </tr>
        </thead>
        <tbody>
          {memberships.map((m) => (
            <tr key={m.id}>
              <td>{m.user_email}</td>
              <td>
                <RoleBadge role={m.role} />
              </td>
              <td>{new Date(m.added_at).toLocaleString("id-ID", {
                dateStyle: "medium",
                timeStyle: "short",
              })}</td>
              <td>
                <div className="d-flex gap-2">
                  <BlogRoleSelect
                    value={m.role}
                    onChange={(val) => handleRoleChange(m.id, val)}
                  />
                  <button
                    className="btn btn-sm btn-outline-danger"
                    onClick={() => handleRemove(m.id)}
                  >
                    Hapus
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/components/BlogForm.tsx --
// blog/components/BlogForm.tsx
"use client"

import React, { useState } from "react"
import { request } from "../../lib/allauth"
import type { Blog } from "../types"

type Props = {
  initial?: Partial<Blog>
  onSuccess?: (blog: Blog) => void
  method?: "POST" | "PATCH" | "PUT"
}

export default function BlogForm({ initial, onSuccess, method }: Props) {
  const [title, setTitle] = useState(initial?.title ?? "")
  const [description, setDescription] = useState(initial?.description ?? "")
  const [submitting, setSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    setSubmitting(true)
    setError(null)
    try {
      let blog: Blog
      if (initial?.id) {
        blog = await request<Blog>(
          method ?? "PATCH",
          `/blog/blogs/${initial.id}/`,
          { title, description }
        )
      } else {
        blog = await request<Blog>(
          "POST",
          "/blog/blogs/",
          { title, description }
        )
      }
      onSuccess?.(blog)
    } catch (err: any) {
      const msg = err?.detail || err?.message || "Gagal menyimpan blog."
      setError(typeof msg === "string" ? msg : JSON.stringify(msg))
    } finally {
      setSubmitting(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="card">
      <div className="card-body">
        <div className="mb-3">
          <label className="form-label">Title</label>
          <input
            className="form-control"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
            maxLength={255}
          />
        </div>

        <div className="mb-3">
          <label className="form-label">Description</label>
          <textarea
            className="form-control"
            rows={4}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
        </div>

        {error && <div className="alert alert-danger">{error}</div>}

        <div className="d-flex gap-2">
          <button className="btn btn-primary" type="submit" disabled={submitting}>
            {submitting ? "Saving..." : "Save"}
          </button>
          {initial?.id && (
            <a href={`/admin/blog/${initial.id}/${initial.slug}/`} className="btn btn-outline-secondary">
              Cancel
            </a>
          )}
        </div>
      </div>
    </form>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/components/BlogList.tsx --
// blog/components/BlogList.tsx
"use client"

import React from "react"
import Link from "next/link"
import { useBlogs } from "../hooks/useBlogs"

export default function BlogList() {
  const { blogs, isLoading, isError } = useBlogs()

  if (isLoading) return <p>Loading blogs...</p>
  if (isError) return <p>Gagal memuat blogs</p>

  return (
    <div>
      <h2 className="h4 mb-3">Blogs</h2>
      <ul className="list-group">
        {blogs.map((b) => (
          // di dalam <li> pada BlogList
          <li key={b.id} className="list-group-item d-flex justify-content-between align-items-center">
            <div>
              <Link href={`/admin/blog/${b.id}/${b.slug}`}>{b.title} | {b.slug}</Link>
              <span className="text-muted ms-2">Owner: {b.owner_email}</span>
            </div>
            <div className="btn-group">
              <Link href={`/admin/blog/${b.id}/${b.slug}/memberships`} className="btn btn-sm btn-outline-secondary">Members</Link>
              <Link href={`/admin/blog/${b.id}/${b.slug}/edit`} className="btn btn-sm btn-outline-primary">Edit</Link>
            </div>
          </li>
        ))}
      </ul>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/Loading.tsx --
// components/Loading.tsx
import React from "react"


export default function Loading() {
  return (
    <div className="d-flex justify-content-center align-items-center" style={{ height: '100vh' }}>
      <div className="spinner-border text-primary" role="status">
        <span className="visually-hidden">Loading...</span>
      </div>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/Button.tsx --
'use client'

import React from 'react'

type ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement>

export default function Button({ children, ...props }: ButtonProps) {
  return (
    <button className="btn btn-primary" {...props}>
      {children}
    </button>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/APICard.tsx --
'use client'

import React from 'react'

export type APIResponse<T = unknown> = {
  status: number | 'Error'
  data: T | string
}

interface APICardProps {
  title: string
  docs: string
  response: APIResponse
}

export default function APICard({ title, docs, response }: APICardProps) {
  return (
    <div className="card">
      <div className="card-body">
        <h5 className="card-title">{title}</h5>
        <a href={docs} target="_blank" rel="noopener noreferrer">
          API documentation
        </a>
        <div className="mb-3 mt-3">
          <label className="form-label">Status</label>
          <input
            className="form-control"
            value={response.status}
            readOnly
          />
        </div>
        <pre className="overflow-x-scroll">
          {typeof response.data === 'string'
            ? response.data
            : JSON.stringify(response.data, null, 4)}
        </pre>
      </div>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/Navbar.tsx --
'use client'

import React, { useEffect, useMemo, useState } from 'react'
import Link from 'next/link'
import { useAuth } from '../auth/AuthContext'
import { useLogout } from '../auth/useLogout'
import clsx from 'clsx'

export default function Navbar() {
  const { isAuthenticated, user } = useAuth()
  const { triggerLogout } = useLogout()
  const [isCollapsed, setIsCollapsed] = useState(true)

  useEffect(() => {
    // Muat JavaScript bootstrap agar dropdown berfungsi
    import('bootstrap/dist/js/bootstrap.bundle.min.js')
  }, [])


  const toggleNavbar = () => setIsCollapsed((prev) => !prev)

  const displayName = useMemo(() => {
    if (!user) return null
    return String(user.email ?? user.username ?? 'User')
  }, [user])

  return (
    <nav className="navbar navbar-expand-lg navbar-dark bg-dark px-3">
      <Link href="/" className="navbar-brand">Next-Allauth</Link>
      <button
        className="navbar-toggler"
        type="button"
        onClick={toggleNavbar}
        aria-controls="navbarNav"
        aria-expanded={!isCollapsed}
        aria-label="Toggle navigation"
      >
        <span className="navbar-toggler-icon" />
      </button>

      <div
        className={clsx('collapse navbar-collapse', { show: !isCollapsed })}
        id="navbarNav"
      >
        <ul className="navbar-nav me-auto mb-2 mb-lg-0">
          <li className="nav-item">
            <Link href="/calculator" className="nav-link">Calculator</Link>
          </li>
          {["admin", "manager", "staff"].includes(user?.role) && (
            <li className="nav-item dropdown">
              <a
                className="nav-link dropdown-toggle"
                href="#"
                id="appDropdown"
                role="button"
                data-bs-toggle="dropdown"
                aria-expanded="false"
              >
                App
              </a>
              <ul className="dropdown-menu dropdown-menu-end" aria-labelledby="appDropdown">
                <>
                  {user?.is_superuser && user?.role === "admin" && (
                    <li><Link href="/admin/users/status" className="dropdown-item">User Status</Link></li>
                  )}

                  {user?.is_superuser && ["admin", "manager"].includes(user?.role) && (
                    <li><Link href="/admin/users/roles" className="dropdown-item">User Roles</Link></li>
                  )}

                  {["admin", "manager"].includes(user?.role) && (
                    <li><Link href="/admin/invitations" className="dropdown-item">Invitations</Link></li>
                  )}

                  {["admin", "manager", "staff"].includes(user?.role) && (
                    <li><Link href="/admin/blog" className="dropdown-item">Blog</Link></li>
                  )}
                </>
              </ul>
            </li>
          )}
          <li className="nav-item">
            <Link href="/blog" className="nav-link">Blog</Link>
          </li>
        </ul>

        <ul className="navbar-nav ms-auto mb-2 mb-lg-0">
          {isAuthenticated ? (
            <>
              <li className="nav-item dropdown">
                <a
                  className="nav-link dropdown-toggle"
                  href="#"
                  id="accountDropdown"
                  role="button"
                  data-bs-toggle="dropdown"
                  aria-expanded="false"
                >
                  {displayName}
                </a>
                <ul className="dropdown-menu dropdown-menu-end" aria-labelledby="accountDropdown">
                  <li><Link href="/account" className="dropdown-item">Profil</Link></li>
                  <li><Link href="/account/email" className="dropdown-item">Email</Link></li>
                  <li><Link href="/account/password/change" className="dropdown-item">Ubah Password</Link></li>
                  <li><Link href="/account/sessions" className="dropdown-item">Sesi Aktif</Link></li>
                  <li><Link href="/account/provider" className="dropdown-item">Akun Sosial</Link></li>
                  <li><hr className="dropdown-divider" /></li>
                  <li>
                    <button onClick={triggerLogout} className="dropdown-item text-danger">
                      Logout
                    </button>
                  </li>
                </ul>
              </li>
            </>
          ) : (
            <>
              <li className="nav-item">
                <Link href="/account/login" className="nav-link">Login</Link>
              </li>
              <li className="nav-item">
                <Link href="/account/signup" className="nav-link">Signup</Link>
              </li>
            </>
          )}
        </ul>
      </div>
    </nav>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/ConfigLoader.tsx --
'use client'

import React, { useEffect } from 'react'
import { useConfig } from '../auth/AuthContext'
import { isConfigReady } from '../utils/isConfigReady'

interface ConfigLoaderProps {
  children: React.ReactNode
  fallback?: React.ReactNode
}

export default function ConfigLoader({
  children,
  fallback = <DefaultConfigFallback />,
}: ConfigLoaderProps) {
  const config = useConfig()

  useEffect(() => {
    console.log('[ConfigLoader] config:', config)
    if (!isConfigReady(config)) {
      console.warn('[ConfigLoader] config belum siap:', config)
      console.log('[ConfigLoader] config:', config)
      console.log('[ConfigLoader] isReady:', isConfigReady(config))
    }
  }, [config])

  if (!isConfigReady(config)) {
    return fallback
  }

  return <>{children}</>
}

function DefaultConfigFallback() {
  return (
    <div className="text-center my-5">
      <div className="spinner-border text-primary" role="status" />
      <p className="mt-3">Memuat konfigurasi...</p>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/Spinner.tsx --
// src/components/Spinner.tsx
import React from 'react'

interface SpinnerProps {
  small?: boolean
  className?: string
}

export default function Spinner({ small = false, className = '' }: SpinnerProps) {
  const sizeClass = small ? 'spinner-border-sm' : 'spinner-border'
  return (
    <div className={`spinner ${sizeClass} ${className}`} role="status">
      <span className="visually-hidden">Loading...</span>
    </div>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/ProviderList.tsx --
'use client'

import React from "react"
import { useConfig } from '../auth/AuthContext'
import { redirectToProvider, settings, Client, AuthProcess } from '../lib/allauth'


type Props = {
  callbackURL: string
  process?: 'login' | 'connect'
}

export default function ProviderList({ callbackURL, process = AuthProcess.LOGIN }: Props) {
  const config = useConfig()
  const providers = config?.socialaccount?.providers || []

  if (!providers.length) return null

  return (
    <>
      {settings.client === Client.BROWSER && (
        <ul className="list-unstyled">
          {providers.map(provider => (
            <li key={provider.id} className="mb-2">
              <button
                onClick={() => redirectToProvider(provider.id, callbackURL, process)}
                className="btn btn-outline-secondary w-100"
              >
                Login dengan {provider.name ?? provider.id}
              </button>
            </li>
          ))}
        </ul>
      )}
    </>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/BootstrapInit.tsx --
// components/BootstrapInit.tsx
"use client";

import { useEffect } from "react";

export default function BootstrapInit() {
  useEffect(() => {
    // Import bootstrap bundle JS di client
    import("bootstrap/dist/js/bootstrap.bundle.min.js").then((bootstrap) => {
      // Setelah bundle siap, aktifkan semua tooltip
      const tooltipTriggerList = Array.from(
        document.querySelectorAll('[data-bs-toggle="tooltip"]')
      );
      tooltipTriggerList.forEach(
        (el) => new bootstrap.Tooltip(el as HTMLElement)
      );
    });
  }, []);

  return null;
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/NavbarWrapper.tsx --
'use client'

import React from 'react'
import dynamic from 'next/dynamic'

// ✅ Import Navbar dynamically with SSR off
const Navbar = dynamic(() => import('./Navbar'), { ssr: false })

export default function NavbarWrapper() {
  return <Navbar />
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/AppWrapper.tsx --
// src/components/AppWrapper.tsx
'use client'

import React from 'react'
import { SWRConfig } from 'swr'
import { csrfMiddleware } from '../auth/csrfMiddleware'

export default function AppWrapper({ children }: { children: React.ReactNode }) {
  return (
    <SWRConfig value={{
      use: [csrfMiddleware],
    }}>
      {children}
    </SWRConfig>
  )
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/ImageViewerEditorLike.tsx --
// components/wysiwyg/ImageViewerEditorLike.tsx
"use client";

import React from "react";
import { ImageBase } from "./ImageBase";
import type { Align } from "./ImageRenderer";

interface ImageViewerEditorLikeProps {
  url: string;
  alt?: string;
  width?: number;
  height?: number;
  align?: Align;
  className?: string;
  style?: React.CSSProperties;
}

export function ImageViewerEditorLike({
  url,
  alt,
  width,
  height,
  align = "center",
  className,
  style,
}: ImageViewerEditorLikeProps) {
  const containerStyle: React.CSSProperties = {
    display: "block",
    textAlign: align,
    ...style,
  };

  return (
    <div style={containerStyle}>
      <ImageBase
        url={url}
        alt={alt}
        width={width}
        height={height}
        align={align}
        isEditing={false}
        selected={false}
        focused={false}
        className={className ?? "rounded"}
        style={{ float: undefined, margin: undefined }}
      />
    </div>
  );
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/ImageBase.tsx --
// components/wysiwyg/ImageBase.tsx
"use client";

import React, { useRef, useState, useEffect, useCallback } from "react";
import type { Align } from "./ImageRenderer";

export interface ImageBaseProps {
  url: string;
  alt?: string;
  width?: number;
  height?: number;
  align?: Align;
  isEditing?: boolean;
  selected?: boolean;
  focused?: boolean;
  children?: React.ReactNode;
  className?: string;
  style?: React.CSSProperties;
  onRemove?: (e: React.MouseEvent) => void;
  onResize?: (newWidth: number, newHeight: number) => void;
  onEditAlt?: () => void;
  onAlign?: (align: Align) => void;
  keepAspectRatio?: boolean;
  onToggleCaption?: () => void;
  hasCaption?: boolean;
}

export function ImageBase({
  url,
  alt,
  width,
  height,
  align = "center",
  isEditing = false,
  selected = false,
  focused = false,
  children,
  className,
  style,
  onRemove,
  onResize: _onResize,
  onEditAlt,
  onAlign,
  onToggleCaption,
  hasCaption,
}: ImageBaseProps) {
  const imgRef = useRef<HTMLImageElement>(null);
  const [internalSize, setInternalSize] = useState<{ w?: number; h?: number }>({
    w: width,
    h: height,
  });

  useEffect(() => {
    if (imgRef.current && (!internalSize.w || !internalSize.h)) {
      setInternalSize({
        w: width ?? imgRef.current.naturalWidth,
        h: height ?? imgRef.current.naturalHeight,
      });
    }
  }, [width, height, internalSize.w, internalSize.h]);

  const displayW = width ?? internalSize.w;
  const displayH = height ?? internalSize.h;

  const handleLoad = useCallback(() => {
    if (imgRef.current && (!internalSize.w || !internalSize.h)) {
      setInternalSize({
        w: width ?? imgRef.current.naturalWidth,
        h: height ?? imgRef.current.naturalHeight,
      });
    }
  }, [width, height, internalSize.w, internalSize.h]);

  const containerStyle: React.CSSProperties = {
    display: "block",
    textAlign: align,
    ...style,
  };

  return (
    <div contentEditable={false} style={containerStyle}>
      <div style={{ position: "relative", display: "inline-block", width: displayW }}>
        <img
          ref={imgRef}
          src={url}
          alt={alt ?? ""}
          onLoad={handleLoad}
          style={{
            width: displayW ? `${displayW}px` : "auto",
            height: displayH ? `${displayH}px` : "auto",
            display: "inline-block",
            boxShadow: isEditing && selected && focused ? "0 0 0 2px #0d6efd" : undefined,
            transition: "box-shadow 0.2s",
          }}
          className={className}
        />

        {isEditing && selected && focused && (
          <div
            contentEditable={false}
            style={{
              position: "absolute",
              top: 2,
              right: 2,
              display: "flex",
              gap: 2,
              background: "rgba(255,255,255,0.8)",
              padding: 2,
              borderRadius: 2,
              zIndex: 30,
            }}
          >
            <button
              onClick={(e) => {
                e.preventDefault();
                onEditAlt?.();
              }}
              style={{ fontSize: 10 }}
            >
              Alt
            </button>
            <button
              onClick={(e) => {
                e.preventDefault();
                onAlign?.("left");
              }}
              style={{ fontSize: 10, fontWeight: align === "left" ? "bold" : undefined }}
            >
              ◀
            </button>
            <button
              onClick={(e) => {
                e.preventDefault();
                onAlign?.("center");
              }}
              style={{ fontSize: 10, fontWeight: align === "center" ? "bold" : undefined }}
            >
              ●
            </button>
            <button
              onClick={(e) => {
                e.preventDefault();
                onAlign?.("right");
              }}
              style={{ fontSize: 10, fontWeight: align === "right" ? "bold" : undefined }}
            >
              ▶
            </button>
            <button
              onClick={(e) => {
                e.preventDefault();
                console.log("[ImageBase] Caption button clicked. hasCaption:", hasCaption);
                onToggleCaption?.();
              }}
              style={{
                fontSize: 10,
                fontWeight: hasCaption ? "bold" : undefined,
                color: hasCaption ? "#0d6efd" : undefined,
              }}
            >
              C
            </button>
            <button
              onClick={(e) => {
                e.preventDefault();
                onRemove?.(e);
              }}
              style={{ fontSize: 10, color: "red" }}
            >
              X
            </button>
          </div>
        )}
      </div>

      {children && <div>{children}</div>}
    </div>
  );
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/ImageRenderer.tsx --
// components/wysiwyg/ImageRenderer.tsx
"use client";

import React, { useState, useCallback, memo } from "react";
import { ImageBase, ImageBaseProps } from "./ImageBase";

export type Align = "left" | "center" | "right";
type ResizeDir = "top-left" | "top-right" | "bottom-left" | "bottom-right";

interface ImageRendererProps extends ImageBaseProps {
  keepAspectRatio?: boolean;
  onRemove?: (e: React.MouseEvent) => void;
  onResize?: (newWidth: number, newHeight: number) => void;
  onEditAlt?: () => void;
  onAlign?: (align: Align) => void;
}

function ImageRendererComponent({
  keepAspectRatio = true,
  onResize,
  ...baseProps
}: ImageRendererProps) {
  const [size, setSize] = useState<{ w?: number; h?: number }>({
    w: baseProps.width ?? 200,
    h: baseProps.height ?? 200,
  });
  const aspectRatio = size.w && size.h ? size.w / size.h : 1;

  const createResizerHandler = useCallback(
    (dir: ResizeDir) => (e: React.MouseEvent<HTMLDivElement>) => {
      e.preventDefault();
      e.stopPropagation();
      if (!size.w || !size.h) return;

      const startX = e.clientX;
      const startY = e.clientY;
      const startW = size.w;
      const startH = size.h;
      const prevUserSelect = document.body.style.userSelect;
      document.body.style.userSelect = "none";

      const onMove = (ev: MouseEvent) => {
        let newW =
          startW +
          (dir.includes("right")
            ? ev.clientX - startX
            : dir.includes("left")
              ? startX - ev.clientX
              : 0);
        let newH =
          startH +
          (dir.includes("bottom")
            ? ev.clientY - startY
            : dir.includes("top")
              ? startY - ev.clientY
              : 0);

        if (keepAspectRatio && !ev.shiftKey && newW > 0)
          newH = newW / aspectRatio;

        newW = Math.max(50, Math.round(newW));
        newH = Math.max(50, Math.round(newH));

        setSize({ w: newW, h: newH });
        onResize?.(newW, newH);
      };

      const onUp = () => {
        document.removeEventListener("mousemove", onMove);
        document.removeEventListener("mouseup", onUp);
        document.body.style.userSelect = prevUserSelect || "";
      };

      document.addEventListener("mousemove", onMove);
      document.addEventListener("mouseup", onUp);
    },
    [size.w, size.h, aspectRatio, keepAspectRatio, onResize]
  );

  const resizerStyle: React.CSSProperties = {
    position: "absolute",
    width: 12,
    height: 12,
    background: "#fff",
    border: "2px solid #0d6efd",
    borderRadius: 2,
    userSelect: "none",
    zIndex: 40,
    pointerEvents: "auto",
    touchAction: "none",
  };

  return (
    <div
      contentEditable={false}
      style={{
        position: "relative",
        display: "inline-block",
        outline:
          baseProps.selected && baseProps.focused
            ? "2px solid #0d6efd"
            : "none",
      }}
    >
      <ImageBase
        {...baseProps}
        width={size.w}
        height={size.h}
        isEditing={baseProps.isEditing}
        onToggleCaption={baseProps.onToggleCaption} // forward
        hasCaption={baseProps.hasCaption}           // forward
      />

      {baseProps.isEditing && baseProps.selected && baseProps.focused && (
        <>
          {(
            ["top-left", "top-right", "bottom-left", "bottom-right"] as ResizeDir[]
          ).map((dir) => {
            const styleMap: Record<ResizeDir, React.CSSProperties> = {
              "top-left": { top: -6, left: -6, cursor: "nwse-resize" },
              "top-right": { top: -6, right: -6, cursor: "nesw-resize" },
              "bottom-left": { bottom: -6, left: -6, cursor: "nesw-resize" },
              "bottom-right": { bottom: -6, right: -6, cursor: "nwse-resize" },
            };
            return (
              <div
                key={dir}
                contentEditable={false}
                style={{ ...resizerStyle, ...styleMap[dir] }}
                onMouseDown={createResizerHandler(dir)}
              />
            );
          })}
        </>
      )}
    </div>
  );
}

export const ImageRenderer = memo(ImageRendererComponent);


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/renderers.tsx --
import React from "react";
import { Descendant, Text } from "slate";
import { RenderElementProps, RenderLeafProps } from "slate-react";
import { ImageElement } from "./ImageElement";
import { ImageViewerEditorLike } from "./ImageViewerEditorLike";
import type { ImageElementNode } from "./custom-types";

export const EMPTY_VALUE: Descendant[] = [
  { type: "paragraph", children: [{ text: "" }] },
];

// =============================
// Editor Rendering (Editable)
// =============================
export function renderLeaf({ attributes, children, leaf }: RenderLeafProps) {
  if (leaf.bold) children = <strong>{children}</strong>;
  if (leaf.code) children = <code>{children}</code>;
  if (leaf.italic) children = <em>{children}</em>;
  if (leaf.underline) children = <u>{children}</u>;
  return <span {...attributes}>{children}</span>;
}

export function renderElement({
  attributes,
  children,
  element,
}: RenderElementProps) {
  const style: React.CSSProperties = {};
  if ("align" in element && element.align) style.textAlign = element.align as any;

  switch (element.type) {
    case "heading-one":
      return <h1 style={style} {...attributes}>{children}</h1>;
    case "heading-two":
      return <h2 style={style} {...attributes}>{children}</h2>;
    case "block-quote":
      return <blockquote className="blockquote" style={style} {...attributes}>{children}</blockquote>;
    case "blockquote-footer":
      return <footer className="blockquote-footer" style={style} {...attributes}>{children}</footer>;
    case "numbered-list":
      return <ol style={style} {...attributes}>{children}</ol>;
    case "bulleted-list":
      return <ul style={style} {...attributes}>{children}</ul>;
    case "list-item":
      return <li style={style} {...attributes}>{children}</li>;
    case "code-block":
      return (
        <pre
          style={{
            ...style,
            background: "#f8f9fa",
            padding: "0.75rem",
            borderRadius: "0.25rem",
            overflowX: "auto",
          }}
          {...attributes}
        >
          <code>{children}</code>
        </pre>
      );
    case "image":
      return (
        <figure
          style={{
            textAlign: (element as any).align ?? "center",
            margin: "1em 0",
          }}
          {...attributes}
        >
          <ImageElement
            element={element as ImageElementNode}
            attributes={attributes}
            isEditing
          >
            {children}
          </ImageElement>
        </figure>
      );
    case "caption":
      return (
        <figcaption
          style={{
            fontSize: "0.9em",
            color: "#6c757d",
            textAlign: "center",
            marginTop: "0.5em",
            marginBottom: "1em",
          }}
          {...attributes}
        >
          {children}
        </figcaption>
      );
    default:
      return <p style={style} {...attributes}>{children}</p>;
  }
}

// =============================
// Viewer Rendering (Read-only)
// =============================
export function renderNode(
  node: Descendant,
  key: number,
  fallbackAlt?: string
): React.ReactNode {
  if (Text.isText(node)) {
    let children: React.ReactNode = node.text;
    if (node.bold) children = <strong>{children}</strong>;
    if (node.italic) children = <em>{children}</em>;
    if (node.underline) children = <u>{children}</u>;
    if (node.code) children = <code>{children}</code>;
    return <span key={key}>{children}</span>;
  }

  const childrenNodes = node.children.map((n, i) =>
    renderNode(n, i, fallbackAlt)
  );
  const style: React.CSSProperties = {};
  if ("align" in node && node.align) style.textAlign = node.align as any;

  switch (node.type) {
    case "heading-one":
      return <h1 key={key} style={style}>{childrenNodes}</h1>;
    case "heading-two":
      return <h2 key={key} style={style}>{childrenNodes}</h2>;
    case "block-quote":
      return <blockquote key={key} className="blockquote" style={style}>{childrenNodes}</blockquote>;
    case "blockquote-footer":
      return <footer key={key} className="blockquote-footer" style={style}>{childrenNodes}</footer>;
    case "numbered-list":
      return <ol key={key} style={style}>{childrenNodes}</ol>;
    case "bulleted-list":
      return <ul key={key} style={style}>{childrenNodes}</ul>;
    case "list-item":
      return <li key={key} style={style}>{childrenNodes}</li>;
    case "code-block":
      return (
        <pre
          key={key}
          style={{
            ...style,
            background: "#f8f9fa",
            padding: "0.75rem",
            borderRadius: "0.25rem",
            overflowX: "auto",
          }}
        >
          <code>{childrenNodes}</code>
        </pre>
      );
    case "image": {
      const imgNode = node as ImageElementNode;
      const captionNode = node.children.find((c: any) => c.type === "caption");

      return (
        <figure key={key} style={{ textAlign: imgNode.align ?? "center", margin: "1em 0" }}>
          <ImageViewerEditorLike
            url={imgNode.url}
            alt={imgNode.alt || fallbackAlt}
            width={imgNode.width}
            height={imgNode.height}
            align={imgNode.align || "center"}
          />
          {captionNode && (
            <figcaption
              style={{
                fontSize: "0.9em",
                color: "#6c757d",
                textAlign: "center",
                marginTop: "0.5em",
                marginBottom: "1em",
              }}
            >
              {renderNode(captionNode as Descendant, 0, fallbackAlt)}
            </figcaption>
          )}
        </figure>
      );
    }
    case "caption":
      // Jangan render caption terpisah (sudah di-handle dalam image)
      return null;
    default:
      return <p key={key} style={style}>{childrenNodes}</p>;
  }
}

export function renderPlainNode(node: Descendant, key: React.Key) {
  if (Text.isText(node)) {
    return <span key={key}>{node.text}</span>
  }
  if ("children" in node) {
    return (
      <React.Fragment key={key}>
        {node.children.map((child, i) => renderPlainNode(child, `${key}-${i}`))}
      </React.Fragment>
    )
  }
  return null
}

----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/withImages.ts --
// components/wysiwyg/withImages.ts
import { Transforms, Element as SlateElement } from "slate";
import type { CustomEditor, ImageElementNode } from "./custom-types";

export const withImages = <T extends CustomEditor>(editor: T): T => {
  const { normalizeNode } = editor;

  editor.normalizeNode = (entry) => {
    const [node, path] = entry;

    if (path.length === 0 && editor.children.length === 0) {
      Transforms.insertNodes(editor, { type: "paragraph", children: [{ text: "" }] });
      return;
    }

    // Normalizer khusus image
    if (SlateElement.isElement(node) && node.type === "image") {
      const imageNode = node as ImageElementNode;

      // 1) image harus punya tepat 1 text child kosong
      if (
        !imageNode.children ||
        imageNode.children.length !== 1 ||
        !("text" in imageNode.children[0])
      ) {
        Transforms.removeNodes(editor, { at: path });
        Transforms.insertNodes(
          editor,
          {
            ...imageNode,
            children: [{ text: "" }],
          },
          { at: path }
        );
        return;
      }
    }

    // fallback ke normalizer asli
    normalizeNode(entry);
  };

  return editor;
};


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/ImageElement.tsx --
// components/wysiwyg/ImageElement.tsx
"use client";

import React, { memo, useCallback } from "react";
import { RenderElementProps, useFocused, useSelected, ReactEditor } from "slate-react";
import { Transforms } from "slate";
import { useSlateStatic } from "slate-react";
import { ImageRenderer, Align } from "./ImageRenderer";
import type { ImageElementNode } from "./custom-types";
import { hasCaption, toggleCaption } from "./utils/caption";

interface ImageElementProps extends RenderElementProps {
  element: ImageElementNode;
  align?: Align;
  isEditing?: boolean;
}

function ImageElementComponent({
  attributes,
  children,
  element,
  align,
  isEditing = true,
}: ImageElementProps) {
  const editor = useSlateStatic();
  const selected = useSelected();
  const focused = useFocused();

  const path = ReactEditor.findPath(editor, element);
  const currentHasCaption = hasCaption(editor, element);

  const handleRemove = useCallback(
    (e: React.MouseEvent) => {
      e.preventDefault();
      Transforms.removeNodes(editor, { at: path });
    },
    [editor, path]
  );

  const handleEditAlt = useCallback(() => {
    const newAlt = window.prompt("Enter alt text:", element.alt || "");
    if (newAlt !== null) {
      Transforms.setNodes(editor, { alt: newAlt }, { at: path });
    }
  }, [editor, element, path]);

  const handleAlign = useCallback(
    (a: Align) => {
      Transforms.setNodes(editor, { align: a }, { at: path });
    },
    [editor, path]
  );

  const handleToggleCaption = useCallback(() => {
    toggleCaption(editor, element);
  }, [editor, element]);

  return (
    <div {...attributes} style={{ textAlign: element.align ?? "center" }}>
      <figure style={{ display: "inline-block", margin: 0 }}>
        <ImageRenderer
          url={element.url}
          alt={element.alt}
          width={element.width}
          height={element.height}
          align={align ?? element.align ?? "center"}
          isEditing={isEditing}
          selected={selected}
          focused={focused}
          onRemove={handleRemove}
          onResize={(w, h) => {
            Transforms.setNodes(editor, { width: w, height: h }, { at: path });
          }}
          onEditAlt={handleEditAlt}
          onAlign={handleAlign}
          keepAspectRatio
          onToggleCaption={handleToggleCaption}
          hasCaption={currentHasCaption}
        />
        {children /* dummy text only */}
      </figure>
    </div>
  );
}

export const ImageElement = memo(ImageElementComponent, (prev, next) =>
  prev.element === next.element &&
  prev.align === next.align &&
  prev.isEditing === next.isEditing
);


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/components.tsx --
"use client"

import React from "react"
import clsx from "clsx"

export const Button = ({
  className,
  active,
  ...props
}: React.ButtonHTMLAttributes<HTMLButtonElement> & { active?: boolean }) => (
  <button
    {...props}
    className={clsx(
      "btn btn-sm me-1",
      active ? "btn-primary text-white" : "btn-light border",
      className
    )}
    type="button"
  />
)

export const Icon = ({ name }: { name: string }) => (
  <i className={`bi bi-${name}`} />
)

export const Toolbar = ({ children }: { children: React.ReactNode }) => (
  <div className="d-flex flex-wrap mb-2 border rounded p-1 bg-light">
    {children}
  </div>
)


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/RichTextRenderer.tsx --
// components/wysiwyg/RichTextRenderer.tsx
"use client";

import React from "react";
import { Descendant } from "slate";
import { renderNode } from "./renderers";

interface Props {
  value: Descendant[];
}

export default function RichTextRenderer({ value }: Props) {
  return <div>{value.map((node, i) => renderNode(node, i))}</div>;
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/RichTextEditor.tsx --
// components/wysiwyg/RichTextEditor.tsx
"use client";

import isHotkey from "is-hotkey";
import React, { KeyboardEvent, PointerEvent, useMemo } from "react";
import { Descendant, Editor, Element as SlateElement, Transforms, createEditor } from "slate";
import { withHistory } from "slate-history";
import { Editable, Slate, useSlate, withReact } from "slate-react";
import { Button, Icon, Toolbar } from "./components";
import { CustomEditor, CustomElementType, CustomElementWithAlign, CustomTextKey, ImageElementNode, OtherElement } from "./custom-types.d";
import { renderElement, renderLeaf, EMPTY_VALUE } from "./renderers";
import { withImages } from "./withImages";
import { uploadImage } from "../../utils/upload";
import { SlateDebugger } from "./useDebugSlate";

interface Props {
  value: Descendant[] | null;
  onChange: (value: Descendant[]) => void;
}

const HOTKEYS: Record<string, CustomTextKey> = {
  "mod+b": "bold",
  "mod+i": "italic",
  "mod+u": "underline",
  "mod+`": "code",
};

const LIST_TYPES = ["numbered-list", "bulleted-list"] as const;
const TEXT_ALIGN_TYPES = ["left", "center", "right", "justify"] as const;

type AlignType = (typeof TEXT_ALIGN_TYPES)[number];
type ListType = (typeof LIST_TYPES)[number];
type CustomElementFormat = CustomElementType | AlignType | ListType;

// =============================
// Ikon & Label
// =============================
const FORMAT_ICONS: Record<string, string> = {
  bold: "type-bold",
  italic: "type-italic",
  underline: "type-underline",
  code: "code",
  "code-block": "code-slash",
  "heading-one": "type-h1",
  "heading-two": "type-h2",
  "block-quote": "quote",
  "blockquote-footer": "person",
  "numbered-list": "list-ol",
  "bulleted-list": "list-ul",
  left: "text-left",
  center: "text-center",
  right: "text-right",
  justify: "justify",
  image: "image",
};

const FORMAT_LABELS: Record<string, string> = {
  bold: "Bold (Ctrl+B)",
  italic: "Italic (Ctrl+I)",
  underline: "Underline (Ctrl+U)",
  code: "Inline Code (Ctrl+`)",
  "code-block": "Code Block",
  "heading-one": "Heading 1",
  "heading-two": "Heading 2",
  "block-quote": "Block Quote",
  "blockquote-footer": "Quote Footer",
  "numbered-list": "Numbered List",
  "bulleted-list": "Bulleted List",
  left: "Align Left",
  center: "Align Center",
  right: "Align Right",
  justify: "Justify",
  image: "Insert Image",
};

// =============================
// Component
// =============================
export default function RichTextEditor({ value, onChange }: Props) {
  const editor = useMemo(() => withImages(withHistory(withReact(createEditor() as CustomEditor))), []);

  const initialValue: Descendant[] =
    value && value.length > 0 ? value : EMPTY_VALUE;

  return (
    <Slate editor={editor} initialValue={initialValue} onChange={(val) => {
      // Jangan pernah izinkan [] lolos keluar
      onChange(val.length > 0 ? val : EMPTY_VALUE);
    }}
    >
      <SlateDebugger label="RichTextEditor" />
      <Toolbar>
        {(["bold", "italic", "underline", "code"] as CustomTextKey[]).map((f) => (
          <MarkButton key={f} format={f} icon={FORMAT_ICONS[f]} />
        ))}
        {(
          [
            "heading-one",
            "heading-two",
            "block-quote",
            "blockquote-footer",
            "code-block",
            "numbered-list",
            "bulleted-list",
            "left",
            "center",
            "right",
            "justify",
          ] as CustomElementFormat[]
        ).map((f) => (
          <BlockButton key={f} format={f} icon={FORMAT_ICONS[f]} />
        ))}
        <ImageButton />
      </Toolbar>

      <div className="border rounded p-2">
        <Editable
          renderElement={renderElement}
          renderLeaf={renderLeaf}
          placeholder="Tulis konten di sini..."
          spellCheck
          autoFocus
          onKeyDown={(event: KeyboardEvent<HTMLDivElement>) => {
            for (const hotkey in HOTKEYS) {
              if (isHotkey(hotkey, event as any)) {
                event.preventDefault();
                toggleMark(editor, HOTKEYS[hotkey]);
              }
            }
          }}
        />
      </div>
    </Slate>
  );
}

// =============================
// Utils
// =============================
const insertImage = (editor: CustomEditor, url: string, alt: string = "") => {
  const image: ImageElementNode = {
    type: "image",
    url,
    alt,
    align: "center",
    width: undefined,
    height: undefined,
    children: [{ text: "" }], // ✅ children minimal
  };
  Transforms.insertNodes(editor, image);
};

const toggleBlock = (editor: CustomEditor, format: CustomElementFormat) => {
  const isActive = isBlockActive(editor, format, isAlignType(format) ? "align" : "type");
  const isList = isListType(format);
  const isQuote = format === "block-quote";

  Transforms.unwrapNodes(editor, {
    match: (n) =>
      !Editor.isEditor(n) &&
      SlateElement.isElement(n) &&
      isValidBlockType(n.type) &&
      ((isListType(n.type) || n.type === "block-quote") && !isAlignType(format)),
    split: true,
  });

  const newProperties: Partial<SlateElement> = isAlignType(format)
    ? { align: isActive ? undefined : format }
    : { type: isActive ? "paragraph" : isList ? "list-item" : format };

  Transforms.setNodes(editor, newProperties);

  if (!isActive && (isList || isQuote) && !isAlignType(format) && isOtherElementType(format)) {
    const block: OtherElement = { type: format, align: undefined, children: [] };
    Transforms.wrapNodes(editor, block);
  }
};

const toggleMark = (editor: CustomEditor, format: CustomTextKey) => {
  const isActive = isMarkActive(editor, format);
  if (isActive) Editor.removeMark(editor, format);
  else Editor.addMark(editor, format, true);
};

const isBlockActive = (editor: CustomEditor, format: CustomElementFormat, blockType: "type" | "align" = "type") => {
  const { selection } = editor;
  if (!selection) return false;

  const [match] = Array.from(
    Editor.nodes(editor, {
      at: Editor.unhangRange(editor, selection),
      match: (n) => {
        if (!Editor.isEditor(n) && SlateElement.isElement(n)) {
          if (blockType === "align" && isAlignElement(n)) {
            return n.align === format;
          }
          return n.type === format;
        }
        return false;
      },
    })
  );
  return !!match;
};

const isMarkActive = (editor: CustomEditor, format: CustomTextKey) => {
  const marks = Editor.marks(editor);
  return marks ? marks[format] === true : false;
};

// =============================
// Toolbar Buttons
// =============================
const BlockButton = ({ format, icon }: { format: CustomElementFormat; icon: string }) => {
  const editor = useSlate();
  return (
    <Button
      active={isBlockActive(editor, format, isAlignType(format) ? "align" : "type")}
      onPointerDown={(e: PointerEvent<HTMLButtonElement>) => e.preventDefault()}
      onClick={() => toggleBlock(editor, format)}
      title={FORMAT_LABELS[format]}
      data-bs-toggle="tooltip"
    >
      <Icon name={icon} />
    </Button>
  );
};

const MarkButton = ({ format, icon }: { format: CustomTextKey; icon: string }) => {
  const editor = useSlate();
  return (
    <Button
      active={isMarkActive(editor, format)}
      onPointerDown={(e: PointerEvent<HTMLButtonElement>) => e.preventDefault()}
      onClick={() => toggleMark(editor, format)}
      title={FORMAT_LABELS[format]}
      data-bs-toggle="tooltip"
    >
      <Icon name={icon} />
    </Button>
  );
};

const ImageButton = () => {
  const editor = useSlate();
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    try {
      const url = await uploadImage(file);
      const alt = prompt("Masukkan alt text untuk gambar ini:") || "";
      insertImage(editor, url, alt);
    } catch (err: any) {
      alert(err.message || "Gagal upload gambar");
    } finally {
      if (fileInputRef.current) fileInputRef.current.value = "";
    }
  };

  return (
    <>
      <input
        type="file"
        accept="image/*"
        ref={fileInputRef}
        style={{ display: "none" }}
        onChange={handleFileChange}
      />
      <Button
        onPointerDown={(e: PointerEvent<HTMLButtonElement>) => e.preventDefault()}
        onClick={() => fileInputRef.current?.click()}
        title={FORMAT_LABELS.image}
        data-bs-toggle="tooltip"
      >
        <Icon name={FORMAT_ICONS.image} />
      </Button>
    </>
  );
};

// =============================
// Type Guards
// =============================
const isAlignType = (format: CustomElementFormat): format is AlignType =>
  TEXT_ALIGN_TYPES.includes(format as AlignType);

const isListType = (format: CustomElementFormat): format is ListType =>
  LIST_TYPES.includes(format as ListType);

const isValidBlockType = (type: string): type is CustomElementFormat =>
  type !== "caption";

const isAlignElement = (element: any): element is CustomElementWithAlign =>
  "align" in element && TEXT_ALIGN_TYPES.includes(element.align);

export const isOtherElementType = (format: CustomElementFormat): format is OtherElement["type"] =>
  ["heading-one", "heading-two", "block-quote", "blockquote-footer", "numbered-list", "bulleted-list", "list-item", "code-block"].includes(format as string);


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/custom-types.d.ts --
// components/wysiwyg/custom-types.d.ts
import { BaseEditor, Descendant } from "slate"
import { ReactEditor } from "slate-react"

export type CustomText = {
  text: string
  bold?: boolean
  italic?: boolean
  underline?: boolean
  code?: boolean
}

export type CustomElementType =
  | "paragraph"
  | "heading-one"
  | "heading-two"
  | "block-quote"
  | "blockquote-footer"
  | "numbered-list"
  | "bulleted-list"
  | "list-item"
  | "image"
  | "caption"
  | "code-block"

export interface CustomElementWithAlign {
  align?: "left" | "center" | "right" | "justify"
}

export type ParagraphElement = {
  type: "paragraph"
  children: Descendant[]
} & CustomElementWithAlign

export type CaptionElement = {
  type: "caption"
  children: { text: string }[]
}

export type ImageElementNode = {
  type: "image"
  url: string
  alt?: string
  align?: "left" | "center" | "right"
  width?: number
  height?: number
  children: [{ text: "" }] // wajib ada 1 text kosong
}

export type OtherElement = {
  type: Exclude<CustomElementType, "paragraph" | "image">
  align?: "left" | "center" | "right" | "justify"
  children: Descendant[]
}

export type CustomElement =
  | ParagraphElement
  | ImageElementNode
  | OtherElement
  | CaptionElement

export type CustomEditor = BaseEditor & ReactEditor
export type CustomTextKey = keyof Omit<CustomText, "text">

declare module "slate" {
  interface CustomTypes {
    Editor: CustomEditor
    Element: CustomElement
    Text: CustomText
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/useDebugSlate.ts --
// components/wysiwyg/SlateDebugger.tsx
"use client";

import { useEffect } from "react";
import { useSlateStatic } from "slate-react";
import { Descendant, Text, Element } from "slate";
import type { ImageElementNode, CaptionElement } from "./custom-types";

/**
 * Transformasi node Slate jadi bentuk debug-friendly
 */
function simplifyNode(node: Descendant): any {
  if (Text.isText(node)) {
    return {
      text: node.text,
      bold: (node as any).bold,
      italic: (node as any).italic,
      underline: (node as any).underline,
      code: (node as any).code,
    };
  }

  if ("type" in node) {
    if ((node as any).type === "image") {
      const img = node as ImageElementNode;
      return {
        type: "image",
        url: img.url,
        alt: img.alt,
        width: img.width,
        height: img.height,
        align: img.align,
      };
    }

    if ((node as any).type === "caption") {
      const cap = node as CaptionElement;
      return {
        type: "caption",
        text: cap.children.map((c) => ("text" in c ? c.text : "")).join(""),
      };
    }

    return {
      type: (node as any).type,
      children: "children" in node ? (node as any).children.map(simplifyNode) : [],
    };
  }

  return node;
}

/**
 * SlateDebugger: log full tree + image + caption sibling info
 */
export function SlateDebugger({ label = "SlateValue" }: { label?: string }) {
  const editor = useSlateStatic();

  useEffect(() => {
    if (!editor || !editor.children) return;

    const simplified = (editor.children as Descendant[]).map(simplifyNode);
    console.log(`[${label}] full tree:`, simplified);

    // cek pasangan image + caption sebagai sibling
    const nodes = editor.children as Element[];
    const debugImages = nodes
      .map((n, i) => {
        if (n.type === "image") {
          const img = n as ImageElementNode;
          const next = nodes[i + 1];
          const caption =
            next && next.type === "caption"
              ? (next as CaptionElement).children.map((c) =>
                "text" in c ? c.text : ""
              ).join("")
              : null;

          return {
            url: img.url,
            alt: img.alt,
            width: img.width,
            height: img.height,
            align: img.align,
            caption: caption || "(none)",
            captionSibling: caption ? "valid (next sibling)" : "no caption",
          };
        }
        return null;
      })
      .filter(Boolean);

    console.log(`[${label}] images:`, debugImages);
  }, [editor.children, label, editor]);

  return null;
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/hooks/useImageResize.ts --
// components/wysiwyg/hooks/useImageResize.ts
import { useCallback } from "react"
import { Transforms } from "slate"
import { ReactEditor, useSlateStatic } from "slate-react"
import type { ImageElementNode } from "../custom-types"

export function useImageResize(
  element: ImageElementNode,
  keepAspectRatio: boolean = true
) {
  const editor = useSlateStatic()
  const path = ReactEditor.findPath(editor, element)

  const handleResize = useCallback(
    (newWidth: number, newHeight?: number) => {
      let finalWidth = newWidth
      let finalHeight = newHeight ?? element.height

      if (keepAspectRatio && element.width && element.height) {
        const ratio = element.height / element.width
        finalHeight = Math.round(finalWidth * ratio)
      }

      Transforms.setNodes(
        editor,
        { width: finalWidth, height: finalHeight },
        { at: path }
      )

      return { width: finalWidth, height: finalHeight }
    },
    [editor, path, element.width, element.height, keepAspectRatio]
  )

  return { handleResize }
}


----------------------------------------


-- /nextjs_oem_frontend/src/components/wysiwyg/utils/caption.ts --
// components/wysiwyg/utils/caption.ts
import { Node, Element, Path, Transforms } from "slate";
import { ReactEditor } from "slate-react";
import type { CustomEditor, ImageElementNode, CaptionElement } from "../custom-types";

export function hasCaption(editor: CustomEditor, image: ImageElementNode): boolean {
  const path = ReactEditor.findPath(editor, image);

  if (path[0] >= editor.children.length - 1) {
    return false;
  }

  try {
    const nextEntry = Node.get(editor, Path.next(path));
    return Element.isElement(nextEntry) && nextEntry.type === "caption";
  } catch {
    return false;
  }
}

export function toggleCaption(editor: CustomEditor, image: ImageElementNode) {
  const path = ReactEditor.findPath(editor, image);
  const nextPath = Path.next(path);

  if (path[0] >= editor.children.length) return;

  const nextNode = (editor.children as any)[nextPath[0]];
  if (Element.isElement(nextNode) && nextNode.type === "caption") {
    // remove caption
    Transforms.removeNodes(editor, { at: nextPath });
  } else {
    // insert caption
    const captionNode: CaptionElement = {
      type: "caption",
      children: [{ text: "" }],
    };
    Transforms.insertNodes(editor, captionNode, { at: nextPath });
  }
}


----------------------------------------

