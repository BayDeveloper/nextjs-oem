
-- /nextjs_oem_frontend/src/app/page.module.css --
.page {
  --gray-rgb: 0, 0, 0;
  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);

  --button-primary-hover: #383838;
  --button-secondary-hover: #f2f2f2;

  display: grid;
  grid-template-rows: 20px 1fr 20px;
  align-items: center;
  justify-items: center;
  min-height: 100svh;
  padding: 80px;
  gap: 64px;
  font-family: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  .page {
    --gray-rgb: 255, 255, 255;
    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);

    --button-primary-hover: #ccc;
    --button-secondary-hover: #1a1a1a;
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 32px;
  grid-row-start: 2;
}

.main ol {
  font-family: var(--font-geist-mono);
  padding-left: 0;
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: -0.01em;
  list-style-position: inside;
}

.main li:not(:last-of-type) {
  margin-bottom: 8px;
}

.main code {
  font-family: inherit;
  background: var(--gray-alpha-100);
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
}

.ctas {
  display: flex;
  gap: 16px;
}

.ctas a {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  border: 1px solid transparent;
  transition:
    background 0.2s,
    color 0.2s,
    border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
}

a.primary {
  background: var(--foreground);
  color: var(--background);
  gap: 8px;
}

a.secondary {
  border-color: var(--gray-alpha-200);
  min-width: 158px;
}

.footer {
  grid-row-start: 3;
  display: flex;
  gap: 24px;
}

.footer a {
  display: flex;
  align-items: center;
  gap: 8px;
}

.footer img {
  flex-shrink: 0;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  a.primary:hover {
    background: var(--button-primary-hover);
    border-color: transparent;
  }

  a.secondary:hover {
    background: var(--button-secondary-hover);
    border-color: transparent;
  }

  .footer a:hover {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
}

@media (max-width: 600px) {
  .page {
    padding: 32px;
    padding-bottom: 80px;
  }

  .main {
    align-items: center;
  }

  .main ol {
    text-align: center;
  }

  .ctas {
    flex-direction: column;
  }

  .ctas a {
    font-size: 14px;
    height: 40px;
    padding: 0 16px;
  }

  a.secondary {
    min-width: auto;
  }

  .footer {
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
}

@media (prefers-color-scheme: dark) {
  .logo {
    filter: invert();
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/page.tsx --
// src/app/page.tsx
import type { Metadata } from "next"
import HomeClient from "./HomeClient"
import React from "react"

export const metadata: Metadata = {
  title: "OEM-X Blog | Artikel Terbaru",
  description: "Kumpulan artikel terbaru dari semua blog di OEM-X.",
  openGraph: {
    title: "OEM-X Blog | Artikel Terbaru",
    description: "Kumpulan artikel terbaru dari semua blog di OEM-X.",
    url: "https://oem-x.my.id/",
    type: "website",
    images: [
      {
        url: "https://oem-x.my.id/next.svg",
        width: 1200,
        height: 630,
        alt: "OEM-X Blog",
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: "OEM-X Blog | Artikel Terbaru",
    description: "Kumpulan artikel terbaru dari semua blog di OEM-X.",
    images: ["https://oem-x.my.id/next.svg"],
  },
}

export default function HomePage() {
  return <HomeClient />
}


----------------------------------------


-- /nextjs_oem_frontend/src/app/HomeClient.tsx --
"use client"

import React, { useEffect, useState } from "react"
import Link from "next/link"
import { request } from "../lib/allauth"
import { renderPlainNode } from "../components/wysiwyg/renderers"
import { Descendant } from "slate"

type Blog = {
  id: number
  slug: string
  title: string
}

type Post = {
  id: number
  slug: string
  title: string
  blog: string
  published_at: string
  content: string | Descendant[]
}

export default function HomeClient() {
  const [blogs, setBlogs] = useState<Blog[]>([])
  const [posts, setPosts] = useState<Post[]>([])
  const [selectedBlog, setSelectedBlog] = useState<string>("")
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    async function fetchBlogs() {
      try {
        const res = await request<any>("GET", "/blog/public/blogs/")
        setBlogs(res?.results ?? res ?? [])
      } catch (e) {
        console.error("Gagal load blogs:", e)
        setBlogs([])
      }
    }
    fetchBlogs()
  }, [])

  useEffect(() => {
    async function fetchPosts() {
      setLoading(true)
      try {
        const url = selectedBlog
          ? `/blog/public/posts/?blog=${encodeURIComponent(selectedBlog)}`
          : "/blog/public/posts/"
        const res = await request<any>("GET", url)
        setPosts(res?.results ?? res ?? [])
      } catch (e) {
        console.error("Gagal load posts:", e)
      } finally {
        setLoading(false)
      }
    }
    fetchPosts()
  }, [selectedBlog])

  return (
    <div className="container py-5" style={{ maxWidth: "1000px" }}>
      <h1 className="display-6 fw-bold mb-4 text-center">Artikel Terbaru</h1>

      <div className="mb-4 text-center">
        <select
          className="form-select w-auto d-inline-block"
          value={selectedBlog}
          onChange={(e) => setSelectedBlog(e.target.value)}
        >
          <option value="">Semua Blog</option>
          {blogs.map((b) => (
            <option key={b.id} value={b.slug}>
              {b.title}
            </option>
          ))}
        </select>
      </div>

      {loading ? (
        <div className="text-center">Memuat posting...</div>
      ) : posts.length === 0 ? (
        <p className="text-muted text-center">Tidak ada posting.</p>
      ) : (
        <div className="row g-4">
          {posts.map((p) => {
            const content: Descendant[] =
              typeof p.content === "string" ? JSON.parse(p.content) : p.content
            const excerptNodes = content.slice(0, 2)

            return (
              <div className="col-md-6 col-lg-4" key={p.id}>
                <div className="card h-100 shadow-sm border-0">
                  <div className="card-body d-flex flex-column">
                    <h5 className="card-title">
                      <Link href={`/blog/${p.blog}/${p.slug}`}>
                        {p.title}
                      </Link>
                    </h5>
                    <p className="card-subtitle mb-2 text-muted small">
                      {new Date(p.published_at).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </p>
                    <div
                      className="card-text text-truncate"
                      style={{ maxHeight: "4.5rem", overflow: "hidden" }}
                    >
                      {excerptNodes.map((node, i) =>
                        renderPlainNode(node, i)
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      )}
    </div>
  )
}


----------------------------------------

