
-- /nextjs_oem_frontend/src/app/blog/[slug]/[postSlug]/layout.tsx --
// app/blog/[slug]/[postSlug]/layout.tsx
import React from "react"
import { blogPostMetadata } from "./metadata"

export const metadata = blogPostMetadata

export default function BlogPostLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <>{children}</>
}


----------------------------------------


-- /nextjs_oem_frontend/src/types/index.ts --
// src/types/index.ts
export type Provider = {
  id: string
  name?: string
}


----------------------------------------


-- /nextjs_oem_frontend/src/types/bootstrap-js.d.ts --
declare module 'bootstrap/dist/js/bootstrap.bundle.min.js'

----------------------------------------


-- /nextjs_oem_frontend/src/blog/types.ts --
// blog/types.ts
export interface Blog {
  id: number
  title: string
  slug: string
  description?: string
  owner: number
  owner_email: string
  created_at: string
}

export interface BlogRole {
  value: "admin" | "editor" | "author"
  label: string
}

export interface Membership {
  id: number
  blog: number
  user: number
  user_email: string
  role: string
  role_display: string
  added_at: string
}

export interface Post {
  id: number
  blog: number
  title: string
  slug: string
  content: string
  cover_image?: string   // ✅ baru, optional (karena bisa null/blank di backend)
  published: boolean
  published_at?: string
  created_at: string
  updated_at: string
  author: number
  author_email: string
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/hooks/useMemberships.ts --
"use client"

import useSWR from "swr"
import { request } from "../../lib/allauth"
import { Membership } from "../types"

type PaginatedResponse<T> = {
  count: number
  next: string | null
  previous: string | null
  results: T[]
}

export function useMemberships(blogId: string | number) {
  const { data, error, isLoading, mutate } = useSWR<
    Membership[] | PaginatedResponse<Membership>
  >(
    blogId ? `/blog/memberships/?blog=${blogId}` : null,
    (url: string) =>
      request<Membership[] | PaginatedResponse<Membership>>("GET", url) // ✅ kasih generic
  )

  const memberships =
    Array.isArray(data) ? data : data?.results ?? []

  return {
    memberships,
    isLoading,
    isError: !!error,
    mutate,
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/hooks/useBlogs.ts --
// blog/hooks/useBlogs.ts
"use client"

import useSWR from "swr"
import { request } from "../../lib/allauth"
import { Blog } from "../types"

export function useBlogs() {
  const { data, error, isLoading, mutate } = useSWR(
    "/blog/blogs/",
    async (url: string) => {
      const res = await request<any>("GET", url)
      return Array.isArray(res) ? res : res?.results ?? []
    }
  )

  return {
    blogs: (data as Blog[]) ?? [],
    isLoading,
    isError: !!error,
    mutate,
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/hooks/useBlogRoles.ts --
"use client"

import useSWR from "swr"
import { request } from "../../lib/allauth"

export interface BlogRole {
  value: "admin" | "editor" | "author"
  label: string
}

/**
 * Fetch daftar role blog (untuk dropdown UI).
 */
export function useBlogRoles() {
  const { data, error, isLoading, mutate } = useSWR<BlogRole[]>(
    "/blog/roles/",
    (url: string) => request<BlogRole[]>("GET", url),   // ✅ fixed
    { revalidateOnFocus: false }
  )

  return {
    roles: data ?? [],
    isLoading,
    isError: !!error,
    mutate,
  }
}


----------------------------------------


-- /nextjs_oem_frontend/src/blog/hooks/usePosts.ts --
// blog/hooks/usePosts.ts
"use client"

import useSWR from "swr"
import { request } from "../../lib/allauth"
import { Post } from "../types"

export function usePosts(blogId: string) {
  const { data, error, isLoading, mutate } = useSWR<Post[]>(
    `/blog/posts/?blog=${blogId}`,
    async (url: string) => {
      const res = await request<any>("GET", url)
      // Normalisasi supaya selalu array
      return Array.isArray(res) ? res : res?.results ?? []
    }
  )

  return {
    posts: data ?? [],   // ✅ dijamin array
    isLoading,
    isError: !!error,
    mutate,
  }
}


----------------------------------------

